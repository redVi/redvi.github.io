"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[2200],{2944:function(n,s,a){a.r(s),a.d(s,{Head:function(){return c.Ss},default:function(){return r}});var t=a(8876),e=a(4424);function p(n){const s=Object.assign({p:"p",strong:"strong",h2:"h2",a:"a",span:"span",ul:"ul",li:"li",h3:"h3",em:"em"},(0,t.MN)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"Самым популярным серверным решением для приложений на Node.js является Express. Это минималистичный фреймворк,\nсравнимый с Sinatra из мира ruby или Flask из мира python. Но... есть одно «но»: слишком много кода\nприходится писать руками, нет единой продуманной архитектуры."),"\n",e.createElement(s.p,null,"А когда хочется всего этого «из коробки» приходит Nest. По-умолчанию он использует всё тот же Express\nвнутри себя. И, вдохновлённый Angular, даёт сверху много нужных плюшек."),"\n",e.createElement(s.p,null,e.createElement(s.strong,null,"План на сегодня"),": настроить окружение и поднять в docker сам Nestjs + Postgres в качестве базы данных.\nКак, возможно, уже догадался читатель, эта заметка вводная. В дальнейших планах рассказать про работу с TypeORM,\nвалидацию и тестирование. В целом, у Nest отличная документация, поэтому рассмотрен он будет коротко\nи на живых примерах. Для лёгкого старта: чтобы затронуть вещи, которые не слишком подробно раскрыты в официальной доке."),"\n",e.createElement(s.h2,{id:"используемые-технологии",style:{position:"relative"}},e.createElement(s.a,{href:"#%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D0%B5%D0%BC%D1%8B%D0%B5-%D1%82%D0%B5%D1%85%D0%BD%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D0%B8","aria-label":"используемые технологии permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Используемые технологии"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.strong,null,"GraphQL")," — синтаксис, который описывает как запрашивать данные. Имеет несколько практических реализаций."),"\n",e.createElement(s.li,null,e.createElement(s.strong,null,"PostgreSQL")," — одна из баз данных. Исходим из предположения, что наши данные будут в основном отдаваться на чтение. Для чтения postgres хороша, но выбирайте из своих нужд."),"\n",e.createElement(s.li,null,e.createElement(s.strong,null,"TypeORM")," — ORM для множества баз данных с поддержкой TypeScript. Это чтобы не писать сырые запросы руками."),"\n",e.createElement(s.li,null,e.createElement(s.strong,null,"Docker")," — программная платформа для быстрой разработки, тестирования и развертывания приложений."),"\n"),"\n",e.createElement(s.h2,{id:"nestjs",style:{position:"relative"}},e.createElement(s.a,{href:"#nestjs","aria-label":"nestjs permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Nestjs"),"\n",e.createElement(s.p,null,"Установка nest и генерация нового приложения:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">yarn</span> <span class="token function">add</span> global nestjs\n$ nest new nest-api\n$ <span class="token builtin class-name">cd</span> nest-api</code></pre></div>'}}),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1200px; flex:1;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 68%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/04787c1cfa2aec3c0148427c314cfdce/e93cc/nest-new.webp 300w,\n/static/04787c1cfa2aec3c0148427c314cfdce/b0544/nest-new.webp 600w,\n/static/04787c1cfa2aec3c0148427c314cfdce/68fc1/nest-new.webp 1200w,\n/static/04787c1cfa2aec3c0148427c314cfdce/a8feb/nest-new.webp 1392w"\n              sizes="(max-width: 1200px) 100vw, 1200px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/04787c1cfa2aec3c0148427c314cfdce/73b64/nest-new.jpg 300w,\n/static/04787c1cfa2aec3c0148427c314cfdce/3ad8d/nest-new.jpg 600w,\n/static/04787c1cfa2aec3c0148427c314cfdce/6c738/nest-new.jpg 1200w,\n/static/04787c1cfa2aec3c0148427c314cfdce/fb170/nest-new.jpg 1392w"\n            sizes="(max-width: 1200px) 100vw, 1200px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/04787c1cfa2aec3c0148427c314cfdce/6c738/nest-new.jpg"\n            alt="nest_cli"\n            title="Nest Cli"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",e.createElement(s.p,null,"Установка зависимостей:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">yarn</span> <span class="token function">add</span> @nestjs/config @nestjs/graphql <span class="token punctuation">\\</span>\n  @nestjs/platform-fastify @nestjs/typeorm <span class="token punctuation">\\</span>\n  apollo-server-fastify graphql typeorm pg</code></pre></div>'}}),"\n",e.createElement(s.p,null,"Забрать приложение docker-desktop можно ",e.createElement(s.a,{href:"https://www.docker.com/products/docker-desktop",target:"_blank",rel:"nofollow"},"здесь"),"."),"\n",e.createElement(s.h3,{id:"конфигурация",style:{position:"relative"}},e.createElement(s.a,{href:"#%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F","aria-label":"конфигурация permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Конфигурация"),"\n",e.createElement(s.p,null,"Следуя хорошим практикам, переменные окружения станем брать из ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.env</code>'}}),"-файла.\nДля этого нужно создать файл конфигурации, который позволит получать эти переменные динамически.\nПлагин ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ApolloServerPluginLandingPageLocalDefault</code>'}})," не является обязательным: он предоставляет более\nудобный интерфейс для GraphQL-запросов."),"\n",e.createElement(s.p,null,"Nest позволяет выбрать стиль написания кода: ",e.createElement(s.em,null,"scheme-first")," или ",e.createElement(s.em,null,"code-first"),". В первом случае схема GraphQL\nпишется руками, а типы TypeScript генерируются автоматически. Во втором — наоборот, схему вручную не пишем.\nЗдесь выбран второй вариант. Название файла схемы указывается в конфиге ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">autoSchemaFile</code>'}}),"."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/config.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> join <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'path\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ApolloServerPluginLandingPageLocalDefault <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'apollo-server-core\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">any</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  envFilePath<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">.env.</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MODE</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>\n  database<span class="token operator">:</span> <span class="token punctuation">{</span>\n    type<span class="token operator">:</span> <span class="token string">\'postgres\'</span><span class="token punctuation">,</span>\n    host<span class="token operator">:</span> <span class="token string">\'postgres\'</span><span class="token punctuation">,</span> <span class="token comment">// так будет назван docker-контейнер! при обычном запуске указать 127.0.0.1</span>\n    port<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">POSTGRES_PORT</span><span class="token punctuation">,</span>\n    username<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">POSTGRES_USER</span><span class="token punctuation">,</span>\n    password<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">POSTGRES_PASSWORD</span><span class="token punctuation">,</span>\n    database<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">POSTGRES_DB</span><span class="token punctuation">,</span>\n    entities<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'**\'</span><span class="token punctuation">,</span> <span class="token string">\'*.entity.{ts,js}\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    migrations<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">\'**\'</span><span class="token punctuation">,</span> <span class="token string">\'*.migration.{ts,js}\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    synchronize<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MODE</span> <span class="token operator">!=</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  gql<span class="token operator">:</span> <span class="token punctuation">{</span>\n    playground<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n    plugins<span class="token operator">:</span>\n      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">MODE</span> <span class="token operator">==</span> <span class="token string">\'production\'</span>\n      <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n      <span class="token operator">:</span> <span class="token punctuation">[</span><span class="token function">ApolloServerPluginLandingPageLocalDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    autoSchemaFile<span class="token operator">:</span> <span class="token string">\'schema.gql\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"В корне проекта создать один или несколько ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.env</code>'}}),"-файлов с переменными окружения.\nНастраиваем dev-окружение, поэтому для примера приводится файл ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.env.development</code>'}}),":"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">POSTGRES_DB=nestjs\nPOSTGRES_USER=nestjs\nPOSTGRES_PASSWORD=fRzYg8Vq&amp;w8b\nPOSTGRES_PORT=5432\nMODE=development</code></pre></div>'}}),"\n",e.createElement(s.p,null,"Чтобы Nest читал переменные из env, в ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src/app.module.ts</code>'}})," включим глобально ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ConfigModule</code>'}})," и передадим\nдля загрузки наш конфиг."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/app.module.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/common\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ConfigModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/config\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> GraphQLModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/graphql\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/typeorm\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./app.service\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppController <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./app.controller\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> config <span class="token keyword">from</span> <span class="token string">\'./config\'</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>\n    ConfigModule<span class="token punctuation">.</span><span class="token function">forRoot</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      isGlobal<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      load<span class="token operator">:</span> <span class="token punctuation">[</span>config<span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    TypeOrmModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>database <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    GraphQLModule<span class="token punctuation">.</span><span class="token function">forRootAsync</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token function-variable function">useFactory</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gql <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  controllers<span class="token operator">:</span> <span class="token punctuation">[</span>AppController<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>AppService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">AppModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Наконец, в ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">main.ts</code>'}})," укажем использование Fastify вместо Express. По словам\nего разработчиков (что подтверждают и ребята из Nest) Fastify гораздо быстрее\nсвоего собрата."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/main.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> NestFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/core\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> FastifyAdapter<span class="token punctuation">,</span> NestFastifyApplication <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/platform-fastify\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./app.module\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">await</span> NestFactory<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">create</span><span class="token generic class-name"><span class="token operator">&lt;</span>NestFastifyApplication<span class="token operator">></span></span></span><span class="token punctuation">(</span>\n    AppModule<span class="token punctuation">,</span>\n    <span class="token keyword">new</span> <span class="token class-name">FastifyAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// nest_api имя контейнера, если его не задать по http://localhost:3000</span>\n  <span class="token comment">// достучаться к приложению будет нереально</span>\n  <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token string">\'nest_api\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">bootstrap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",e.createElement(s.h3,{id:"логика",style:{position:"relative"}},e.createElement(s.a,{href:"#%D0%BB%D0%BE%D0%B3%D0%B8%D0%BA%D0%B0","aria-label":"логика permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Логика"),"\n",e.createElement(s.p,null,"Для GraphQL сгенерируем сущность, называемую в терминологии Nest ресурсом."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ nest g resource <span class="token function">users</span></code></pre></div>'}}),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1200px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 47.66666666666667%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/87df9330d782714a3774e9f9099ca3c1/e93cc/nest-resource.webp 300w,\n/static/87df9330d782714a3774e9f9099ca3c1/b0544/nest-resource.webp 600w,\n/static/87df9330d782714a3774e9f9099ca3c1/68fc1/nest-resource.webp 1200w,\n/static/87df9330d782714a3774e9f9099ca3c1/8838a/nest-resource.webp 1265w"\n              sizes="(max-width: 1200px) 100vw, 1200px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/87df9330d782714a3774e9f9099ca3c1/73b64/nest-resource.jpg 300w,\n/static/87df9330d782714a3774e9f9099ca3c1/3ad8d/nest-resource.jpg 600w,\n/static/87df9330d782714a3774e9f9099ca3c1/6c738/nest-resource.jpg 1200w,\n/static/87df9330d782714a3774e9f9099ca3c1/e9243/nest-resource.jpg 1265w"\n            sizes="(max-width: 1200px) 100vw, 1200px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/87df9330d782714a3774e9f9099ca3c1/6c738/nest-resource.jpg"\n            alt="&quot;Nest resource&quot;"\n            title="nest g resource"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",e.createElement(s.p,null,"Nest автоматически сгенерирует всё необходимое в ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src/user</code>'}})," и подключит\nмодуль в начальную точку приложения: ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src/app.module.ts</code>'}}),"."),"\n",e.createElement(s.p,null,"Для проверки запросов создадим простой resolver и подключим модель ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">User</code>'}})," к TypeORM.\nИзменения будут в следующих файлах:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/users/dto/create-user.input.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> InputType<span class="token punctuation">,</span> Field <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/graphql\'</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">InputType</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">CreateUserInput</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Field это поле для GraphQL</span>\n  <span class="token comment">// Если его не поставить, поле name не будет видно на стороне клиента!</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Field</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> String<span class="token punctuation">)</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Модель таблицы базы данных:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/users/entities/user.entity.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ObjectType<span class="token punctuation">,</span> Field<span class="token punctuation">,</span> Int <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/graphql\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Column<span class="token punctuation">,</span> PrimaryGeneratedColumn<span class="token punctuation">,</span> Entity <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'typeorm\'</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">ObjectType</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// users - название таблицы в базе, можно назвать как угодно</span>\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Entity</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">\'users\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Field</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> Int<span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">PrimaryGeneratedColumn</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Field</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> String<span class="token punctuation">)</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Column</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Модуль со всеми зависимостями ресурса ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">users</code>'}}),":"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/users/users.module.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Module <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/common\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> TypeOrmModule <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/typeorm\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./entities/user.entity\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./users.service\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersResolver <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./users.resolver\'</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Module</span></span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  imports<span class="token operator">:</span> <span class="token punctuation">[</span>TypeOrmModule<span class="token punctuation">.</span><span class="token function">forFeature</span><span class="token punctuation">(</span><span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  providers<span class="token operator">:</span> <span class="token punctuation">[</span>UsersResolver<span class="token punctuation">,</span> UsersService<span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersModule</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Сервис (логика модуля):"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/users/users.service.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Injectable <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/common\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> InjectRepository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/typeorm\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Repository <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'typeorm\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./entities/user.entity\'</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Injectable</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersService</span> <span class="token punctuation">{</span>\n  <span class="token comment">// получить доступ к методам TypeORM для User</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token decorator"><span class="token at operator">@</span><span class="token function">InjectRepository</span></span><span class="token punctuation">(</span>User<span class="token punctuation">)</span> <span class="token keyword">private</span> <span class="token keyword">readonly</span> repository<span class="token operator">:</span> Repository<span class="token operator">&lt;</span>User<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// найти в базе и вернуть список пользователей</span>\n  <span class="token keyword">async</span> <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token keyword">this</span><span class="token punctuation">.</span>repository<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Resolver (примерно как роутер в REST):"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// src/users/users.resolver.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Resolver<span class="token punctuation">,</span> Query <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@nestjs/graphql\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> UsersService <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./users.service\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./entities/user.entity\'</span><span class="token punctuation">;</span>\n\n<span class="token decorator"><span class="token at operator">@</span><span class="token function">Resolver</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> User<span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">UsersResolver</span> <span class="token punctuation">{</span>\n  <span class="token comment">// доступ к сервису</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token keyword">private</span> <span class="token keyword">readonly</span> usersService<span class="token operator">:</span> UsersService<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token comment">// query-запрос вернёт список сущностей типа User</span>\n  <span class="token comment">// это для GraphQL на клиенте, примерный аналог GET-запроса</span>\n  <span class="token decorator"><span class="token at operator">@</span><span class="token function">Query</span></span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">[</span>User<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">\'users\'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// обращение к методу findAll из сервиса</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>usersService<span class="token punctuation">.</span><span class="token function">findAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.h2,{id:"docker",style:{position:"relative"}},e.createElement(s.a,{href:"#docker","aria-label":"docker permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Docker"),"\n",e.createElement(s.p,null,"Пришло время упаковать всё в контейнер. Для nest будет ручная сборка через ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Dockerfile</code>'}}),",\nостальные образы берутся готовыми из ",e.createElement(s.a,{href:"https://hub.docker.com",target:"_blank",rel:"nofollow"},"Docker Hub"),"."),"\n",e.createElement(s.h3,{id:"dockerfile",style:{position:"relative"}},e.createElement(s.a,{href:"#dockerfile","aria-label":"dockerfile permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Dockerfile"),"\n",e.createElement(s.p,null,"В корне проекта создать новую директорию ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.docker</code>'}}),", где будут лежать скрипты и файл сборки nest.\nВ ней ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Dockerfile</code>'}})," со следующим содержимым:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash"><span class="token comment"># образ для development</span>\nFROM node:16.13.2-alpine AS development\n\n<span class="token comment"># Создать директорию внутри контейнера</span>\nWORKDIR ./app\n\n<span class="token comment"># Установить зависимости</span>\nCOPY package*.json ./\nRUN <span class="token function">npm</span> i <span class="token parameter variable">-g</span> @nestjs/cli\nRUN <span class="token function">npm</span> <span class="token function">install</span>\n\n<span class="token comment"># Скопировать приложение из текущей директории в WORKDIR-директорию</span>\nCOPY <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>\n\n<span class="token comment"># Скомпилировать приложение</span>\nRUN <span class="token function">npm</span> run build\n\n<span class="token comment"># образ для production по той же схеме</span>\nFROM node:16.13.2-alpine AS production\n\nARG <span class="token assign-left variable">NODE_ENV</span><span class="token operator">=</span>production\nENV <span class="token assign-left variable">NODE_ENV</span><span class="token operator">=</span><span class="token variable">${NODE_ENV}</span>\n\nWORKDIR ./app\n\nCOPY package*.json ./\nRUN <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--only</span><span class="token operator">=</span>production\nCOPY <span class="token builtin class-name">.</span> <span class="token builtin class-name">.</span>\nCOPY <span class="token parameter variable">--from</span><span class="token operator">=</span>development ./app/dist ./dist\n\nCMD <span class="token punctuation">[</span><span class="token string">"node"</span>, <span class="token string">"dist/main"</span><span class="token punctuation">]</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"И там же скрипт инициализации базы данных: он создаст новую базу и пользователя для неё\nсо всеми привилегиями."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="conf"><pre class="language-conf"><code class="language-conf"><span class="token shebang important">#!/bin/bash</span>\n<span class="token comment"># .docker/init-user-db.sh</span>\n<span class="token builtin class-name">set</span> <span class="token parameter variable">-e</span>\n\npsql <span class="token parameter variable">-v</span> <span class="token assign-left variable">ON_ERROR_STOP</span><span class="token operator">=</span><span class="token number">1</span> <span class="token parameter variable">--username</span> <span class="token string">"<span class="token variable">$POSTGRES_USER</span>"</span> <span class="token parameter variable">--dbname</span> <span class="token string">"<span class="token variable">$POSTGRES_DB</span>"</span> <span class="token operator">&lt;&lt;-</span><span class="token string">EOSQL\n    CREATE USER nestjs;\n    CREATE DATABASE nestjs;\n    GRANT ALL PRIVILEGES ON DATABASE nestjs TO nestjs;\nEOSQL</span></code></pre></div>'}}),"\n",e.createElement(s.h3,{id:"docker-compose",style:{position:"relative"}},e.createElement(s.a,{href:"#docker-compose","aria-label":"docker compose permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"docker-compose"),"\n",e.createElement(s.p,null,"В корне проекта ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose.dev.yml</code>'}}),":"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="yaml"><pre class="language-yaml"><code class="language-yaml"><span class="token comment"># docker-compose.dev.yml</span>\n<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">\'3\'</span>\n\n<span class="token key atrule">services</span><span class="token punctuation">:</span>\n  <span class="token comment"># postgres</span>\n  <span class="token key atrule">db</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>14.1<span class="token punctuation">-</span>alpine\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> postgres\n    <span class="token key atrule">env_file</span><span class="token punctuation">:</span> .env.development <span class="token comment"># какой env-файл использовать</span>\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> ./.docker/init<span class="token punctuation">-</span>user<span class="token punctuation">-</span>db.sh<span class="token punctuation">:</span>/docker<span class="token punctuation">-</span>entrypoint<span class="token punctuation">-</span>initdb.d/init<span class="token punctuation">-</span>user<span class="token punctuation">-</span>db.sh<span class="token punctuation">:</span>ro\n      <span class="token comment"># если нужен дамп реальной базы вместо скрипта указать его</span>\n      <span class="token comment"># - ./.docker/db.sql:/docker-entrypoint-initdb.d/db.sql</span>\n      <span class="token punctuation">-</span> pg_data<span class="token punctuation">:</span>/var/lib/postgresql/data\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">"5432:5432"</span>\n\n  <span class="token comment"># удобный веб-интерфейс для баз данных</span>\n  <span class="token key atrule">adminer</span><span class="token punctuation">:</span>\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> adminer\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> adminer\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">"8080:8080"</span>\n\n  <span class="token comment"># nestjs</span>\n  <span class="token key atrule">nest_api</span><span class="token punctuation">:</span>\n    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> nest_api\n    <span class="token key atrule">image</span><span class="token punctuation">:</span> nest<span class="token punctuation">-</span>api<span class="token punctuation">:</span>1.0.0\n    <span class="token key atrule">build</span><span class="token punctuation">:</span>\n      <span class="token key atrule">context</span><span class="token punctuation">:</span> .              <span class="token comment"># контекст сборки, для нас это корень проекта</span>\n      <span class="token key atrule">target</span><span class="token punctuation">:</span> development     <span class="token comment"># точка из Dockerfile</span>\n      <span class="token key atrule">dockerfile</span><span class="token punctuation">:</span> .docker/Dockerfile\n    <span class="token key atrule">command</span><span class="token punctuation">:</span> npm run start<span class="token punctuation">:</span>dev <span class="token comment"># запуск команды nestjs для разработки</span>\n    <span class="token key atrule">env_file</span><span class="token punctuation">:</span> .env.development\n    <span class="token key atrule">ports</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> <span class="token string">"3000:3000"</span>\n    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n      <span class="token punctuation">-</span> .<span class="token punctuation">:</span>/app\n      <span class="token punctuation">-</span> /app/node_modules\n    <span class="token key atrule">restart</span><span class="token punctuation">:</span> unless<span class="token punctuation">-</span>stopped\n    <span class="token key atrule">depends_on</span><span class="token punctuation">:</span> <span class="token comment"># ждёт запуска базы</span>\n      <span class="token punctuation">-</span> db\n\n<span class="token key atrule">volumes</span><span class="token punctuation">:</span>\n  pg_data<span class="token punctuation">:</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"При желании по аналогии с ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">docker-compose.dev.yml</code>'}})," можно сделать такой же файл конфигурации\nдля боевой среды."),"\n",e.createElement(s.p,null,"Ну, и дабы не копировать ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">node_modules</code>'}})," в контейнер, создадим в корне файл ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">.dockerignore</code>'}}),":"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">node_modules</code></pre></div>'}}),"\n",e.createElement(s.p,null,"Осталось собрать образ для nest и запустить окружение в Docker:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose.dev.yml build\n$ <span class="token function">docker-compose</span> <span class="token parameter variable">-f</span> docker-compose.dev.yml up <span class="token parameter variable">-d</span></code></pre></div>'}}),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1200px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 63.33333333333333%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/46c2917cacc23083184104ff239f3d07/e93cc/nest-build.webp 300w,\n/static/46c2917cacc23083184104ff239f3d07/b0544/nest-build.webp 600w,\n/static/46c2917cacc23083184104ff239f3d07/68fc1/nest-build.webp 1200w,\n/static/46c2917cacc23083184104ff239f3d07/a2303/nest-build.webp 1800w,\n/static/46c2917cacc23083184104ff239f3d07/5a30c/nest-build.webp 1852w"\n              sizes="(max-width: 1200px) 100vw, 1200px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/46c2917cacc23083184104ff239f3d07/73b64/nest-build.jpg 300w,\n/static/46c2917cacc23083184104ff239f3d07/3ad8d/nest-build.jpg 600w,\n/static/46c2917cacc23083184104ff239f3d07/6c738/nest-build.jpg 1200w,\n/static/46c2917cacc23083184104ff239f3d07/8b34c/nest-build.jpg 1800w,\n/static/46c2917cacc23083184104ff239f3d07/5e6e8/nest-build.jpg 1852w"\n            sizes="(max-width: 1200px) 100vw, 1200px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/46c2917cacc23083184104ff239f3d07/6c738/nest-build.jpg"\n            alt="&quot;Build&quot;"\n            title="Nest build"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",e.createElement(s.p,null,"После успешной сборки и запуска, можно пройти по адресу ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">http://localhost:3000/graphql</code>'}}),",\nгде опробовать выполнение созданного нами query-запроса:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1200px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 49.33333333333333%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/e93cc/nest_query.webp 300w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/b0544/nest_query.webp 600w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/68fc1/nest_query.webp 1200w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/a2303/nest_query.webp 1800w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/69b14/nest_query.webp 1824w"\n              sizes="(max-width: 1200px) 100vw, 1200px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/eed55/nest_query.png 300w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/7491f/nest_query.png 600w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/8537d/nest_query.png 1200w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/d2cc9/nest_query.png 1800w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/f5553/nest_query.png 1824w"\n            sizes="(max-width: 1200px) 100vw, 1200px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/8537d/nest_query.png"\n            alt="&quot;GraphQL&quot;"\n            title="Query"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",e.createElement(s.p,null,"Поскольку пользователей в базе нет, ожидаемо увидеть пустой список."))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.MN)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},c=a(7792),l=a(7619);function u(n){var s,a;let{data:{mdx:t},children:p,pageContext:{prev:o,next:u}}=n;const{h1:r,title:i,description:k,image:d,table_of_contents:m}=t.frontmatter;return(0,e.useEffect)((()=>{(0,l.K)()}),[]),e.createElement(e.Fragment,null,e.createElement(c._W,{h1:r,title:i,description:k,image:null===(s=t.frontmatter.image)||void 0===s?void 0:s.publicURL},e.createElement(c.MV,{post:t.frontmatter,imageData:null==d||null===(a=d.childImageSharp)||void 0===a?void 0:a.gatsbyImageData},m?e.createElement(c.G8,{headings:t.tableOfContents}):null,e.createElement("div",{className:"page__content"},p,e.createElement(c.Mf,{prev:o,next:u})),e.createElement(c.QZ,null))))}function r(n){return e.createElement(u,n,e.createElement(o,n))}},8876:function(n,s,a){a.d(s,{MN:function(){return p}});var t=a(4424);const e=t.createContext({});function p(n){const s=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);