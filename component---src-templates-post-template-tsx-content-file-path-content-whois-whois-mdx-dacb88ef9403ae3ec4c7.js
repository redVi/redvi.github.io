"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[4128],{1310:function(e,n,t){t.r(n),t.d(n,{Head:function(){return m.Ss},default:function(){return s}});var l=t(8876),a=t(4424);function r(e){const n=Object.assign({p:"p",em:"em",pre:"pre",code:"code",blockquote:"blockquote",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul",li:"li"},(0,l.MN)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"WHOIS представляет собой сетевой протокол прикладного уровня, базирующийся на\nпротоколе TCP (и использующий порт ",a.createElement(n.em,null,"43"),"). По бо́льшей части применяется для получения\nрегистрационных данных о доменных именах: дате регистрации домена, информации о\nвладельце, регистраторе и прочем."),"\n",a.createElement(n.p,null,"В unix-like системах есть одноимённая утилита, позволяющая быстро получить\nискомые сведения. В частности для пользователей gentoo linux процесс её\nустановки будет выглядеть следующим образом:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ eix whois\n* net-misc/whois\n     Available versions:  5.0.11^t {iconv idn nls}\n     Homepage:            http://www.linux.it/~md/software/\n     Description:         improved Whois Client\n# emerge -pav net-misc/whois\n")),"\n",a.createElement(n.p,null,"Тем, кому любопытно сделать свой вариант клиента whois, посвящается этот пост. Для\nнаписания подобной вещи предлагается использовать python3."),"\n",a.createElement(n.p,null,"Для начала нужно импортировать необходимые модули и сделать проверку установленной\nверсии python, поскольку во второй и третьей версии различаются некоторые типы данных:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport socket, sys\n\n# если версия python ниже 3\n# вывести сообщение и закрыть программу\nif sys.version < '3.0':\n    print(\"You need install python3\")\n    sys.exit()\n")),"\n",a.createElement(n.p,null,"Дальше следует функция, которая будет отправлять запрос на сервер и принимать\nответ. Здесь используется модуль ",a.createElement(n.em,null,"socket"),". Он предоставляет доступ к\nстандартному интерфейсу сокетов BSD (изначально разрабатывался для UNIX)."),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"Модуль ",a.createElement(n.em,null,"socket")," является низкоуровневым и в ряде случаев проще использовать\nфункции из пакета ",a.createElement(n.em,null,"urllib"),"."),"\n"),"\n",a.createElement(n.p,null,"При работе с ",a.createElement(n.em,null,"socket")," часто требуется указать семейство адресов и тип\nсокета. Для нашей небольшой программы важен протокол IPv4 (AF_INET). Типы\nсокетов представлены в таблице:"),"\n",a.createElement(n.table,null,a.createElement(n.thead,null,a.createElement(n.tr,null,a.createElement(n.th,null,"константа"),a.createElement(n.th,null,"описание"))),a.createElement(n.tbody,null,a.createElement(n.tr,null,a.createElement(n.td,null,"SOCK_STREAM"),a.createElement(n.td,null,"поток байтов, обеспечивающий надёжность передачи данных (TCP)")),a.createElement(n.tr,null,a.createElement(n.td,null,"SOCK_DGRAM"),a.createElement(n.td,null,"дейтаграммы (UDP)")),a.createElement(n.tr,null,a.createElement(n.td,null,"SOCK_RAW"),a.createElement(n.td,null,"простой сокет")),a.createElement(n.tr,null,a.createElement(n.td,null,"SOCK_RDM"),a.createElement(n.td,null,"дейтаграммы с надёжной доставкой")))),"\n",a.createElement(n.p,null,"Для интернет-приложений, использующих IPv4, адреса определяются в виде кортежа\n",a.createElement(n.em,null,"(host, port)"),":"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"('www.yandex.ru', 80)\n")),"\n",a.createElement(n.p,null,"В блоке кода, представленном ниже, мы воспользуемся этим, чтобы соединиться с\nсервером. Для создания нового сокета понадобится употребить одну из функций\nмодуля ",a.createElement(n.em,null,"socket")," с таким же названием: ",a.createElement(n.em,null,"socket"),"."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"socket(family, type [, proto])\n")),"\n",a.createElement(n.p,null,"где"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.em,null,"family")," — определяет семейство адресов;"),"\n",a.createElement(n.li,null,a.createElement(n.em,null,"type")," — тип сокета;"),"\n",a.createElement(n.li,null,a.createElement(n.em,null,"proto")," — аргумент с именем протокола (обычно не передаётся)."),"\n"),"\n",a.createElement(n.p,null,"Сокеты представлены экземплярами класса ",a.createElement(n.em,null,"SocketType")," и обладают следующими\nметодами:"),"\n",a.createElement(n.table,null,a.createElement(n.thead,null,a.createElement(n.tr,null,a.createElement(n.th,null,"метод"),a.createElement(n.th,null,"описание"))),a.createElement(n.tbody,null,a.createElement(n.tr,null,a.createElement(n.td,null,"connect"),a.createElement(n.td,null,"устанавливает соединение с удалённым узлом")),a.createElement(n.tr,null,a.createElement(n.td,null,"recv"),a.createElement(n.td,null,"принимает данные из сокета (макс. объём данных определяется аргументом bufsize)")),a.createElement(n.tr,null,a.createElement(n.td,null,"send"),a.createElement(n.td,null,"посылает данные через сетевое соединение, возвращает кол-во отправленных данных")),a.createElement(n.tr,null,a.createElement(n.td,null,"close"),a.createElement(n.td,null,"закрывает соединение")))),"\n",a.createElement(n.p,null,"Исходя из сказанного выше, читателю должен быть понятен следующий блок кода:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"def run_whois(server, query):\n    # создать TCP-socket (IPv4)\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # соединиться с сервером ('host', port)\n    s.connect((server , 43))\n\n    # отправить запрос на сервер\n    # s.send(query + '\\r\\n') # для python2\n    s.send((bytes(query, 'utf-8')) + b'\\r\\n')\n    msg = ''\n    while len(msg) < 10000:\n        # получить данные от сервера\n        # receive_data = s.recv(100) # для python2\n        receive_data = str((s.recv(100)), encoding='utf-8')\n        if (receive_data == ''):\n            break;\n        msg = msg + receive_data\n    return msg\n")),"\n",a.createElement(n.p,null,"Следующая функция позволит получить данные от сервера whois-регистратора и\nобработать их."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"def get_data(domain):    # получить объект(имя домена)\n    # если введено http или www\n    # перед именем домена, убрать их\n    domain = domain.replace('http://', '')\n    domain = domain.replace('www.', '')\n\n    # получить доменную зону\n    ext = domain[-3:].split('.')[-1]\n\n    # обращаться к соответствующему whois-серверу зоны\n    if (ext == 'org'):\n        whois = 'whois.pir.org'\n    elif (ext == 'ru' or ext == 'su'):\n        whois = 'whois.tcinet.ru'\n    else:\n        whois = 'whois.iana.org' # сообщение для иных доменных зон\n\n    # получить ответ от регистратора\n    # (whois-server, имя домена)\n    msg = run_whois(whois, domain)\n\n    lines = msg.splitlines()        # разбиваем текст на сроки\n    for line in lines:              # итерация по строкам\n        if ':' in line:             # если есть знак :\n            words = line.split(':') # разделить по нему строку\n    return msg\n")),"\n",a.createElement(n.p,null,"И последнее: имя домена будет получено из агрумента командной строки при запуске\nпрограммы. Оно передаётся функции ",a.createElement(n.em,null,"get_data"),", и данные выводятся на экран."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},'try:\n    domain_name = sys.argv[1]    # получить доменное имя из аргумента командной строки\n    print(get_data(domain_name)) # передать доменное имя функции get_data\nexcept IndexError:               # если программа запущена без аргумента\n    print("enter domain name as a value!")\n')),"\n",a.createElement(n.p,null,"Данная программка не претендует на многое, но цели своей достигает; заодно\nзнакомит потенциального читателя с частью такой огромной темы как\nработа с сетью и сокетами, а автору служит главным образом примером и\nнапоминанием о различиях в обработке данных в разных версиях python'а."))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.MN)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},m=t(7792),o=t(7619);function u(e){var n,t;let{data:{mdx:l},children:r,pageContext:{prev:c,next:u}}=e;const{h1:s,title:i,description:E,image:d,table_of_contents:p}=l.frontmatter;return(0,a.useEffect)((()=>{(0,o.K)()}),[]),a.createElement(a.Fragment,null,a.createElement(m._W,{h1:s,title:i,description:E,image:null===(n=l.frontmatter.image)||void 0===n?void 0:n.publicURL},a.createElement(m.MV,{post:l.frontmatter,imageData:null==d||null===(t=d.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},p?a.createElement(m.G8,{headings:l.tableOfContents}):null,a.createElement("div",{className:"page__content"},r,a.createElement(m.Mf,{prev:c,next:u})),a.createElement(m.QZ,null))))}function s(e){return a.createElement(u,e,a.createElement(c,e))}},8876:function(e,n,t){t.d(n,{MN:function(){return r}});var l=t(4424);const a=l.createContext({});function r(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);