"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[3328],{5636:function(n,a,s){s.r(a),s.d(a,{Head:function(){return c.Ss},default:function(){return i}});var t=s(8876),e=s(4424),p=s(8860);function l(n){const a=Object.assign({p:"p",a:"a",span:"span",ul:"ul",li:"li",h2:"h2"},(0,t.MN)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"В одной из ",e.createElement(a.a,{href:"/posts/django-first-steps/"},"предыдущих заметок"),",\nнами был написан шаблон для вывода списка публикаций на главной странице.\nСсылка на полный текст публикации имеет вид"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">{% url 'articles:detail' post.id %}</code>"}}),","),"\n",e.createElement(a.p,null,"что позволяет получить определённую страницу по её идентификатору (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">id</code>'}}),"). За отображение страницы ответственность несёт представление ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">articles</code>'}})," из пространства имён (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">namespace</code>'}}),") ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">detail</code>'}}),". В данном ниже примере для разнообразия используем другую модель, а также для упрощения понимания материала откажемся от использования пространств имён: одно приложение — одна модель — один urls.py."),"\n",e.createElement(a.p,null,"И всё бы хорошо, но ссылки подобного вида иногда могут не\nподойти вам. Вот пара простых примеров, иллюстрирующих этот тезис:"),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,"Вам нужно получить статью по slug"),"\n",e.createElement(a.li,null,"Вам нужно отобразить ссылки на предыдущую и следующую статью"),"\n"),"\n",e.createElement(a.p,null,"Что же, разберём указанные примеры по-порядку."),"\n",e.createElement(a.h2,{id:"вид-urlspy",style:{position:"relative"}},e.createElement(a.a,{href:"#%D0%B2%D0%B8%D0%B4-urlspy","aria-label":"вид urlspy permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Вид urls.py"),"\n",e.createElement(a.p,null,"Создание файла ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}}),", отвечающего нашим запросам. Отображено использование\nобобщённых представлений, подробности о которых вы без труда найдёте в документации."),"\n",e.createElement(a.p,null,"У нас имеется представление ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">IndexView</code>'}}),", на которое возложен вывод индексной\nстраницы со списком последних публикаций, а также ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DetailView</code>'}}),", которое выводит\nотдельную запись. В шаблоне к ним можно обращаться как к ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">latest_articles_list</code>'}})," и ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">detail</code>'}}),"\nсоответственно."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># urls.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> patterns<span class="token punctuation">,</span> include<span class="token punctuation">,</span> url\n<span class="token keyword">from</span> <span class="token punctuation">.</span>views <span class="token keyword">import</span> IndexView<span class="token punctuation">,</span> DetailView\n\n\nurlpatterns <span class="token operator">=</span> patterns<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">(</span><span class="token string">r\'^$\'</span><span class="token punctuation">,</span> IndexView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">\'latest_articles_list\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">(</span><span class="token string">r\'^articles/(?P&lt;slug>[-\\w]+)/$\'</span><span class="token punctuation">,</span> DetailView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span>template_name <span class="token operator">=</span> <span class="token string">\'article.html\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">\'detail\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.h2,{id:"обращение-по-первичному-ключу",style:{position:"relative"}},e.createElement(a.a,{href:"#%D0%BE%D0%B1%D1%80%D0%B0%D1%89%D0%B5%D0%BD%D0%B8%D0%B5-%D0%BF%D0%BE-%D0%BF%D0%B5%D1%80%D0%B2%D0%B8%D1%87%D0%BD%D0%BE%D0%BC%D1%83-%D0%BA%D0%BB%D1%8E%D1%87%D1%83","aria-label":"обращение по первичному ключу permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Обращение по первичному ключу"),"\n",e.createElement(a.p,null,"В случае, когда нужно получить объект по ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">slug</code>'}}),", нам важно знать, что любая\nмодель имеет свой первичный ключ (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">primary key</code>'}}),") и его можно переопределить.\nПо-умолчанию первичным ключом является поле ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">id</code>'}}),", генерируемое автоматически.\nТаким образом, мы получаем URL вида:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">http://site.org/articles/1/\nhttp://site.org/articles/2/</code></pre></div>'}}),"\n",e.createElement(a.p,null,"А хотим видеть такие адреса:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">http://site.org/articles/krasivyi-url/\nhttp://site.org/articles/po-poly-slug/</code></pre></div>'}}),"\n",e.createElement(a.p,null,"Самым простым решением является переопределение первичного ключа, но в\nэтом случае вы больше не сможете обращаться к полю модели по ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">id</code>'}}),"."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># models.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models\n\n\n<span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\' Create Post \'\'\'</span>\n    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">\'Title\'</span><span class="token punctuation">)</span>\n    content <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    pub_date <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">\'Create Date\'</span><span class="token punctuation">)</span>\n    update <span class="token operator">=</span> models<span class="token punctuation">.</span>DateField<span class="token punctuation">(</span>auto_now<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">\'Last Update\'</span><span class="token punctuation">)</span>\n    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>to<span class="token operator">=</span>User<span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">\'Author\'</span><span class="token punctuation">)</span>\n    slug <span class="token operator">=</span> models<span class="token punctuation">.</span>SlugField<span class="token punctuation">(</span>primary_key<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>\n    summary <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">,</span> help_text<span class="token operator">=</span><span class="token string">\'Meta Description\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Как мог заметить наблюдательный читатель, мы задали поле ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">slug</code>'}})," со значением ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">primary_key=True</code>'}}),". Предполагается, что в этом поле будет установлен устраивающий автора красивый URL. Теперь следует ссылаться на детальное представление публикации именно по этому полю. Конкретный пример будет приведён чуть ниже."),"\n",e.createElement(p.y,{heading:"Примечание"},e.createElement(a.p,null,"Если при создании представления вы используете обобщённые\nпредставления, вернуть публикацию по полю ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">slug</code>'}}),", не нагромождая ваше\nпредставление и не затрагивая ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">primary key</code>'}}),", также может быть очень легко.\nВ этом вам посодействуют ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DetailView</code>'}})," и ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">get_object_or_404</code>'}}))),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># views.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> get_object_or_404\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>generic<span class="token punctuation">.</span>detail <span class="token keyword">import</span> DetailView\n\n<span class="token keyword">class</span> <span class="token class-name">DetailView</span><span class="token punctuation">(</span>DetailView<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">""" Return detail data """</span>\n    model <span class="token operator">=</span> Article\n    context_object_name <span class="token operator">=</span> <span class="token string">\'article\'</span>\n\n    <span class="token keyword">def</span> <span class="token function">get_object</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> get_object_or_404<span class="token punctuation">(</span>Article<span class="token punctuation">,</span> slug__iexact<span class="token operator">=</span>self<span class="token punctuation">.</span>kwargs<span class="token punctuation">[</span><span class="token string">\'slug\'</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Прежде, чем приступить к написанию шаблонов, решим второй вопрос: о\nполучении абсолютных путей к объекту."),"\n",e.createElement(a.h2,{id:"абсолютные-пути",style:{position:"relative"}},e.createElement(a.a,{href:"#%D0%B0%D0%B1%D1%81%D0%BE%D0%BB%D1%8E%D1%82%D0%BD%D1%8B%D0%B5-%D0%BF%D1%83%D1%82%D0%B8","aria-label":"абсолютные пути permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Абсолютные пути"),"\n",e.createElement(a.p,null,"Итак, для примера мы решили, что будем выводить предыдущую и следующую\nстатью при обращении к статье текущей. Если просто обращаться к статье по\nуказанному ключу, можно поиметь некоторые проблемы. Наш URL имеет относительный\nпуть, поэтому при наведении на любую ссылку внутри поста, которая сформирована\nтакже (то есть с указанием ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">{%raw%}{% url 'view' object.slug %}{%endraw%}</code>"}}),"),\nпервичный ключ выбранной статьи просто будет добавлен к уже имеющемуся адресу. Вот так:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">имеем:\nhttp://site.org/articles/my-article\n\nпри наведении на другую ссылку получим:\nhttp://site.org/articles/my-article/my-next-article</code></pre></div>'}}),"\n",e.createElement(a.p,null,"Поэтому мы добавим к нужной модели спасательный круг в виде метода\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">get_absolute_url</code>'}})," и сразу же выведем в шаблоне именно то, что нужно."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># models.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>urlresolvers <span class="token keyword">import</span> reverse\n\n\n<span class="token keyword">class</span> <span class="token class-name">Article</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">,</span> verbose_name<span class="token operator">=</span><span class="token string">\'Title\'</span><span class="token punctuation">)</span>\n    content <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>\n\n    <span class="token keyword">def</span> <span class="token function">get_absolute_url</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> reverse<span class="token punctuation">(</span><span class="token string">\'detail\'</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>slug<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.h2,{id:"подготовка-шаблонов",style:{position:"relative"}},e.createElement(a.a,{href:"#%D0%BF%D0%BE%D0%B4%D0%B3%D0%BE%D1%82%D0%BE%D0%B2%D0%BA%D0%B0-%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD%D0%BE%D0%B2","aria-label":"подготовка шаблонов permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Подготовка шаблонов"),"\n",e.createElement(a.p,null,"Теперь в шаблонах мы можем ссылаться на статью по её абсолютному адресу,\nиспользуя ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">get_absolute_url</code>'}}),". Примеры:"),"\n",e.createElement(a.p,null,"подобным образом может выглядеть индексная страница со списком последних публикаций"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!--index.html--\x3e</span>\n{% extends "base.html" %}\n\n{% block content %}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>main</span><span class="token punctuation">></span></span>\n        {% for article in latest_articles_list %}\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ article.get_absolute_url }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ article.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n        {% endfor %}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>main</span><span class="token punctuation">></span></span>\n{% endblock content %}</code></pre></div>'}}),"\n",e.createElement(a.p,null,"а на странице детального представления можно добавить ссылки на предыдущий и\nследующий пост"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="html"><pre class="language-html"><code class="language-html"><span class="token comment">&lt;!--article.html--\x3e</span>\n{% extends "base.html" %}\n\n{% block content %}\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ article.get_absolute_url }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>{{ article.title }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n    {{ article.content }}\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>links<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ article.get_next_by_pub_date.get_absolute_url }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>on top<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>{{ article.get_previous_by_pub_date.get_absolute_url }}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Prev<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span>\n{% endblock %}</code></pre></div>'}}),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Model.get_next_by_pub_date</code>'}})," вернёт следующую публикацию, основываясь на дате её создания"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Model.get_previous_by_pub_date</code>'}})," отобразит предыдущую публикацию."),"\n",e.createElement(a.p,null,"Применив к ним метод ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">get_absolute_url</code>'}}),", мы получим искомое решение."))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.MN)(),n.components);return a?e.createElement(a,n,e.createElement(l,n)):l(n)},c=s(7792),u=s(7619);function r(n){var a,s;let{data:{mdx:t},children:p,pageContext:{prev:l,next:o}}=n;const{h1:r,title:i,description:k,image:g,table_of_contents:d}=t.frontmatter;return(0,e.useEffect)((()=>{(0,u.K)()}),[]),e.createElement(e.Fragment,null,e.createElement(c._W,{h1:r,title:i,description:k,image:null===(a=t.frontmatter.image)||void 0===a?void 0:a.publicURL},e.createElement(c.MV,{post:t.frontmatter,imageData:null==g||null===(s=g.childImageSharp)||void 0===s?void 0:s.gatsbyImageData},d?e.createElement(c.G8,{headings:t.tableOfContents}):null,e.createElement("div",{className:"page__content"},p,e.createElement(c.Mf,{prev:l,next:o})),e.createElement(c.QZ,null))))}function i(n){return e.createElement(r,n,e.createElement(o,n))}},8860:function(n,a,s){s.d(a,{y:function(){return t.y}});var t=s(3836)},8876:function(n,a,s){s.d(a,{MN:function(){return p}});var t=s(4424);const e=t.createContext({});function p(n){const a=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);