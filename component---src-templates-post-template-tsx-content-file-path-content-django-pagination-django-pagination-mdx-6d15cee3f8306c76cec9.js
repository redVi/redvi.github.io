"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[5652],{28:function(n,a,s){s.r(a),s.d(a,{Head:function(){return l.Ss},default:function(){return i}});var t=s(8876),e=s(4424);function p(n){const a=Object.assign({p:"p",a:"a",span:"span",h2:"h2"},(0,t.MN)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"Ни один сайт не состоит только лишь из одной страницы.\nБудь то блог, новостной портал или даже домашняя страничка Васи Пупочкина.\nМатериала много, страницы нужно как-то выводить. Вывод всех публикаций на\nодной странице является по сути своей идеей порочной: бесконечно прокручивать\nсписок статей неудобно для пользователя, а про нагрузку на сервер лучше даже\nне вспоминать."),"\n",e.createElement(a.p,null,"Для решения этой задачи в Django есть несколько способов и сегодня\nпредлагается рассмотреть один из них: стандартный пагинатор. Рассмотрим\nпример, где нужно получить список всех публикаций и затем вывести их постранично."),"\n",e.createElement(a.p,null,"В примере используются всё те же модели, что и ",e.createElement(a.a,{href:"/posts/django-first-steps/"},"в предыдущем посте"),".\nВ класс ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Paginator</code>'}})," следует передать список объектов и количество элементов, которые\nнужно отображать на одной странице. Далее используются методы класса для доступа к\nэтим элементам."),"\n",e.createElement(a.h2,{id:"модель-публикации",style:{position:"relative"}},e.createElement(a.a,{href:"#%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C-%D0%BF%D1%83%D0%B1%D0%BB%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B8","aria-label":"модель публикации permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Модель публикации"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># models.py</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">)</span>\n    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    timestamp <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">)</span>\n    meta_keywords <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span>\n    meta_description <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">250</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.h2,{id:"отображение-view",style:{position:"relative"}},e.createElement(a.a,{href:"#%D0%BE%D1%82%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-view","aria-label":"отображение view permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Отображение (View)"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">post_lists</code>'}})," — получаем список всех публикаций, отсортированных по времени создания."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paginator</code>'}})," — передаём классу ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Paginator</code>'}})," наш список, указываем количество\nэлементов на одну страницу"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paginator.page(1)</code>'}})," — возвращает объект ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Page</code>'}})," по переданному индексу\n(начинается с единицы). Вызывает исключение ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">InvalidPage</code>'}}),", если указанная\nстраница не существует."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">paginator.page(paginator.num_pages)</code>'}})," — отобразить общее количество страниц"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># views.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>paginator <span class="token keyword">import</span> Paginator<span class="token punctuation">,</span> PageNotAnInteger<span class="token punctuation">,</span> EmptyPage\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render_to_response\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>template <span class="token keyword">import</span> RequestContext\n<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Post\n\n<span class="token keyword">def</span> <span class="token function">news</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\'Show all news\'\'\'</span>\n    posts_list <span class="token operator">=</span> Post<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">\'-timestamp\'</span><span class="token punctuation">)</span>\n    paginator <span class="token operator">=</span> Paginator<span class="token punctuation">(</span>posts_list<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>\n    page <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">\'page\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">try</span><span class="token punctuation">:</span>\n        posts <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>\n    <span class="token keyword">except</span> PageNotAnInteger<span class="token punctuation">:</span>\n        posts <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n    <span class="token keyword">except</span> EmptyPage<span class="token punctuation">:</span>\n        posts <span class="token operator">=</span> paginator<span class="token punctuation">.</span>page<span class="token punctuation">(</span>paginator<span class="token punctuation">.</span>num_pages<span class="token punctuation">)</span>\n    <span class="token builtin">vars</span> <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>\n        posts<span class="token operator">=</span>posts<span class="token punctuation">,</span>\n        <span class="token punctuation">)</span>\n    <span class="token keyword">return</span> render_to_response<span class="token punctuation">(</span><span class="token string">\'news.html\'</span><span class="token punctuation">,</span> <span class="token builtin">vars</span><span class="token punctuation">,</span> context_instance<span class="token operator">=</span>RequestContext<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.h2,{id:"шаблон",style:{position:"relative"}},e.createElement(a.a,{href:"#%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD","aria-label":"шаблон permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Шаблон"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">for post in posts</code>'}})," — итерация по элементам"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">post.has_previous</code>'}})," — возвращает ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">True</code>'}})," в случае, если предыдущая страница существует"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">post.has_next</code>'}})," — возвращает ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">True</code>'}})," в случае, если следующая страница существует"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">post.number</code>'}})," — выведет номер страницы"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">post.previous_page_number</code>'}})," — вернуть предыдущую страницу"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">post.next_page_number</code>'}})," — вернуть следующую страницу"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="django"><pre class="language-django"><code class="language-django"><span class="token django language-django"><span class="token comment">{# news.html #}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">extends</span> <span class="token string">\'base.html\'</span> <span class="token delimiter punctuation">%}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">title</span> <span class="token delimiter punctuation">%}</span></span>News<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">content</span> <span class="token delimiter punctuation">%}</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">for</span> <span class="token variable">post</span> <span class="token keyword">in</span> <span class="token variable">posts</span> <span class="token delimiter punctuation">%}</span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">url</span> <span class="token string">\'news:one_new\'</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">id</span> <span class="token delimiter punctuation">%}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">title</span><span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n\n            <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">timestamp</span> <span class="token delimiter punctuation">}}</span></span>\n            <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">author</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>\n            <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">body</span><span class="token operator">|</span><span class="token filter function">truncatewords</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token operator">|</span><span class="token filter function">safe</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">url</span> <span class="token string">\'news:one_new\'</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">id</span> <span class="token delimiter punctuation">%}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Читать полностью<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n        <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endfor</span> <span class="token delimiter punctuation">%}</span></span>\n\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>pages<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n\n            <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">if</span> <span class="token variable">posts</span><span class="token punctuation">.</span><span class="token variable">has_previous</span> <span class="token delimiter punctuation">%}</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=<span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">posts</span><span class="token punctuation">.</span><span class="token variable">previous_page_number</span> <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Previous<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n            <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%}</span></span>\n\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>current<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                Page <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">posts</span><span class="token punctuation">.</span><span class="token variable">number</span> <span class="token delimiter punctuation">}}</span></span> of <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">posts</span><span class="token punctuation">.</span><span class="token variable">paginator</span><span class="token punctuation">.</span><span class="token variable">num_pages</span> <span class="token delimiter punctuation">}}</span></span>.\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>\n\n            <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">if</span> <span class="token variable">posts</span><span class="token punctuation">.</span><span class="token variable">has_next</span> <span class="token delimiter punctuation">%}</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>?page=<span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">posts</span><span class="token punctuation">.</span><span class="token variable">next_page_number</span> <span class="token delimiter punctuation">}}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Next<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n            <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endif</span> <span class="token delimiter punctuation">%}</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Страница документации: ",e.createElement(a.a,{href:"https://docs.djangoproject.com/en/dev/topics/pagination/",target:"_blank",rel:"nofollow"},"Pagination")))}var o=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.MN)(),n.components);return a?e.createElement(a,n,e.createElement(p,n)):p(n)},l=s(7792),c=s(7619);function u(n){var a,s;let{data:{mdx:t},children:p,pageContext:{prev:o,next:u}}=n;const{h1:i,title:r,description:k,image:g,table_of_contents:d}=t.frontmatter;return(0,e.useEffect)((()=>{(0,c.K)()}),[]),e.createElement(e.Fragment,null,e.createElement(l._W,{h1:i,title:r,description:k,image:null===(a=t.frontmatter.image)||void 0===a?void 0:a.publicURL},e.createElement(l.MV,{post:t.frontmatter,imageData:null==g||null===(s=g.childImageSharp)||void 0===s?void 0:s.gatsbyImageData},d?e.createElement(l.G8,{headings:t.tableOfContents}):null,e.createElement("div",{className:"page__content"},p,e.createElement(l.Mf,{prev:o,next:u})),e.createElement(l.QZ,null))))}function i(n){return e.createElement(u,n,e.createElement(o,n))}},8876:function(n,a,s){s.d(a,{MN:function(){return p}});var t=s(4424);const e=t.createContext({});function p(n){const a=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);