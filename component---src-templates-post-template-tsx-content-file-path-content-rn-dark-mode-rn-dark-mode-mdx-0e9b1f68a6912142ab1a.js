"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[1988],{1148:function(e,n,t){t.r(n),t.d(n,{Head:function(){return i.Ss},default:function(){return d}});var r=t(8876),a=t(4424),o=t(3616),l=t(8652);function c(e){const n=Object.assign({p:"p",a:"a",pre:"pre",code:"code",h2:"h2",span:"span"},(0,r.MN)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"Не скерет, что начиная с версии 10 для Android и 13 для iOS в этих операционных системах\nпоявился тёмный режим. В React Native взаимодействие с этой штукой строится через\nмодуль ",a.createElement(n.a,{href:"https://reactnative.dev/docs/appearance",target:"_blank",rel:"nofollow"},"Appearance"),"."),"\n",a.createElement(n.p,null,"Без долгих вступлений отправимся в бой. Для начала получение копии React Native и styled-components (по желанию):"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ npx react-native init DarkModeApp\n$ cd DarkModeApp && yarn install\n$ yarn add styled-components\n$ cd ios && pod install && cd ../\n")),"\n",a.createElement(n.p,null,"Структура проекта. Потребуется создать директорию ",a.createElement(n.code,null,"src")," и недостающие файлы в ней. О каждом из них поговорим ниже."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ tree -L 4\n.\n├── android\n├── app.json\n├── babel.config.js\n├── index.js\n├── ios\n├── metro.config.js\n├── package.json\n└── src\n    ├── components\n    │   └── StatusBarComponent.js\n    ├── constants\n    │   └── colors.js\n    ├── providers\n    │   └── ThemeProvider.js\n    └── screens\n        └── WelcomeScreen.js\n")),"\n",a.createElement(n.h2,{id:"константы",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82%D1%8B","aria-label":"константы permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Константы"),"\n",a.createElement(n.p,null,"Указание цветовой палитры для каждой из тем. Dark mode будем проверять на яблочной платформе. Можно свериться с официальным ",a.createElement(n.a,{href:"https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/color/",target:"_blank",rel:"nofollow"},"guideline для iOS"),", если есть желание."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-js"},"// constants/colors.js\nexport const LIGHT_COLORS = {\n  layout: 'rgb(242, 242, 247)',\n  textColor: 'rgb(28, 28, 30)',\n  thumbColor: 'rgb(255, 255, 255)',\n};\n\nexport const DARK_COLORS = {\n  layout: 'rgb(28, 28, 30)',\n  textColor: 'rgb(242, 242, 247)',\n  thumbColor: 'rgb(255, 255, 255)',\n};\n")),"\n",a.createElement(n.h2,{id:"контекст",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%BA%D1%81%D1%82","aria-label":"контекст permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Контекст"),"\n",a.createElement(n.p,null,"Самое простое решение — хранить текущие параметры темы в React Context.\nТаким образом данные хранятся на уровне всего приложения и их не требуется прокидывать\nв каждый компонент: доступ есть у всех компонентов, каким это потребуется."),"\n",a.createElement(n.p,null,"Создание Context и Provider."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-jsx"},"// providers/ThemeProvider.js\nimport React, { useState } from 'react';\nimport { Appearance } from 'react-native';\nimport { DARK_COLORS, LIGHT_COLORS } from '../constants/colors';\n\n// контекст с параметрами по-умолчанию\nexport const ThemeContext = React.createContext({\n  isDark: false,\n  colors: LIGHT_COLORS,\n  setColorScheme: () => {},\n});\n\n// провайдер\nexport const ThemeProvider = ({ children }) => {\n  const colorScheme = Appearance.getColorScheme();\n  // храним флаг isDark\n  const [isDark, setIsDark] = useState(colorScheme === 'dark');\n  const defaultTheme = {\n    isDark,\n    colors: isDark ? DARK_COLORS : LIGHT_COLORS,\n    // будем менять флаг isDark по требованию\n    setColorScheme: (scheme) => {\n      setIsDark(scheme === 'dark');\n    },\n  };\n\n  return (\n    <ThemeContext.Provider value={defaultTheme}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n")),"\n",a.createElement(n.h2,{id:"screen",style:{position:"relative"}},a.createElement(n.a,{href:"#screen","aria-label":"screen permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Screen"),"\n",a.createElement(n.p,null,"Скрин — экран приложения. Как страница в вебе."),"\n",a.createElement(n.p,null,"Получение контекста может отличаться в зависимости от того используете вы\nкомпонент-класс или компонент-функцию. Пожалуй, можно привести оба примера."),"\n",a.createElement(n.p,null,"Для функции легче и короче применить хук ",a.createElement(n.code,null,"useContext"),". Для класса классчиеская передача\nчерез ",a.createElement(n.code,null,"Context.Consumer"),"."),"\n",a.createElement(o.k,{headings:["useContext","Context.Consumer"]},a.createElement(o.s,null,a.createElement(n.pre,null,a.createElement(n.code,{className:"language-jsx"},"// screens/WelcomeScreen.jsx\nimport React, { useContext } from 'react';\nimport { ScrollView, Switch, Text } from 'react-native';\nimport styled from 'styled-components/native';\n\nimport { ThemeContext } from '../providers/ThemeProvider';\nimport { LIGHT_COLORS, DARK_COLORS } from '../constants/colors';\n\nconst Section = styled.View`\n  padding: 30px 16px;\n  background-color: ${(props) =>\n    props.isDark ? DARK_COLORS.layout : LIGHT_COLORS.layout};\n`;\n\nconst SectionText = styled.Text`\n  margin: 12px 0;\n  color: ${(props) =>\n    props.isDark ? DARK_COLORS.textColor : LIGHT_COLORS.textColor};\n`;\n\nexport const WelcomeScreen = () => {\n  // получить контекст\n  const { colors, isDark, setColorScheme } = useContext(ThemeContext);\n  // изменить тему\n  const handleChangeColorTheme = isTrue => setColorScheme(isTrue ? 'dark' : 'light');\n\n  return (\n    <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n      <Section isDark={isDark}>\n        <SectionText isDark={isDark}>\n          {isDark ? 'Dark' : 'Light'} Mode\n        </SectionText>\n        <Switch\n          thumbColor={colors.thumbColor}\n          value={isDark}\n          onValueChange={handleChangeColorTheme} />\n      </Section>\n    </ScrollView>\n  );\n};\n"))),a.createElement(o.s,null,a.createElement(n.pre,null,a.createElement(n.code,{className:"language-jsx"},"// screens/WelcomeScreen.jsx\nimport React from 'react';\nimport { ScrollView, Switch, Text } from 'react-native';\nimport styled from 'styled-components/native';\n\nimport { ThemeContext } from '../providers/ThemeProvider';\nimport { LIGHT_COLORS, DARK_COLORS } from '../constants/colors';\n\nconst Section = styled.View`\n  padding: 30px 16px;\n  background-color: ${(props) =>\n    props.isDark ? DARK_COLORS.layout : LIGHT_COLORS.layout};\n`;\n\nconst SectionText = styled.Text`\n  margin: 12px 0;\n  color: ${(props) =>\n    props.isDark ? DARK_COLORS.textColor : LIGHT_COLORS.textColor};\n`;\n\nexport const WelcomeScreen = () => (\n  <ScrollView contentInsetAdjustmentBehavior=\"automatic\">\n    <ThemeContext.Consumer>\n      {/* получить контекст */}\n      {({ isDark, colors, setColorScheme }) => {\n        // изменить тему\n        const handleChangeColorTheme = isTrue => setColorScheme(isTrue ? 'dark' : 'light');\n\n        return (\n          <Section isDark={isDark}>\n            <SectionText isDark={isDark}>\n              {isDark ? 'Dark' : 'Light'} Mode\n            </SectionText>\n            <Switch\n              thumbColor={colors.thumbColor}\n              value={isDark}\n              onValueChange={handleChangeColorTheme} />\n          </Section>\n        )\n      }}\n    </ThemeContext.Consumer>\n  </ScrollView>\n);\n")))),"\n",a.createElement(n.p,null,"В данном случае ",a.createElement(n.code,null,"styled-components")," делает код чище, а будни радостнее. Всё это благодаря\nконструкции вида",a.createElement("br"),a.createElement(n.code,null,"background-color: ${(props) => props.isDark ? 'gray' : 'white'};"),".",a.createElement("br"),"\nПри изменении темы цвета пересчитаются, компоненты перерендерятся."),"\n",a.createElement(n.p,null,"Но у всего есть своя цена, не увлекайтесь. Для веба при подходе CSS-in-JS можно\nпорекомендовать библиотеку ",a.createElement(n.a,{href:"https://github.com/callstack/linaria",target:"_blank",rel:"nofollow"},"linaria")," или другие\nzero-runtime решения. Увы, на момент написания заметки для RN такой возможности нет."),"\n",a.createElement(n.p,null,"Перерисовка происходит и ",a.createElement(n.a,{href:"https://reactjs.org/docs/context.html#caveats",target:"_blank",rel:"nofollow"},"при использовании контекста"),",\nчто в сейчас нам только на руку. В целом лучше передавать в Provider примитивные типы."),"\n",a.createElement(n.p,null,"Что ж, логика готова. Осталось изменить настройки и не забывать после этого\nперезапускать приложение (достаточно reload, ",a.createElement(n.code,null,"cmd + r"),"). Автоматически при смене времени суток\nмы ничего не пересчитываем."),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 701px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 60.66666666666667%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/315686458d06cd322618087c0855e1cd/e93cc/dev_settings.webp 300w,\n/static/315686458d06cd322618087c0855e1cd/b0544/dev_settings.webp 600w,\n/static/315686458d06cd322618087c0855e1cd/faca0/dev_settings.webp 701w"\n              sizes="(max-width: 701px) 100vw, 701px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/315686458d06cd322618087c0855e1cd/73b64/dev_settings.jpg 300w,\n/static/315686458d06cd322618087c0855e1cd/3ad8d/dev_settings.jpg 600w,\n/static/315686458d06cd322618087c0855e1cd/4d1c7/dev_settings.jpg 701w"\n            sizes="(max-width: 701px) 100vw, 701px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/315686458d06cd322618087c0855e1cd/4d1c7/dev_settings.jpg"\n            alt="ios dev appearance"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",a.createElement(n.h2,{id:"статус-бар",style:{position:"relative"}},a.createElement(n.a,{href:"#%D1%81%D1%82%D0%B0%D1%82%D1%83%D1%81-%D0%B1%D0%B0%D1%80","aria-label":"статус бар permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Статус-бар"),"\n",a.createElement(n.p,null,"После проделанной работы цветовая схема будет меняться. Но есть ещё одна небольшая проблема:\nстатус-бар отсанется неизменным."),"\n",a.createElement(n.p,null,"Создадим компонент с доступом к контексту и по той же логике, что и раньше, будем менять его цвет.\nКстати, для iOS такой возможности не предусмотрено, поэтому придётся делать обёртку над родным ",a.createElement(n.code,null,"StatusBar"),"."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-jsx"},"// components/StatusBarComponent\nimport React, { useContext } from 'react';\nimport { StatusBar, View, StyleSheet } from 'react-native';\nimport { ThemeContext } from '../providers/ThemeProvider';\n\nconst STATUS_BAR_HEIGHT = 50;\n\nexport const StatusBarComponent = () => {\n  const { isDark, colors } = useContext(ThemeContext);\n\n  const styles = StyleSheet.create({\n    statusBar: {\n      backgroundColor: colors.layout,\n      height: STATUS_BAR_HEIGHT,\n    },\n  });\n\n  // задать высоту статус-бара\n  StatusBar.currentHeight = STATUS_BAR_HEIGHT;\n\n  return (\n    <View style={styles.statusBar}>\n      <StatusBar barStyle={isDark ? 'light-content' : 'dark-content'} />\n    </View>\n  );\n};\n")),"\n",a.createElement(n.h2,{id:"собрать-всё-вместе",style:{position:"relative"}},a.createElement(n.a,{href:"#%D1%81%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D1%8C-%D0%B2%D1%81%D1%91-%D0%B2%D0%BC%D0%B5%D1%81%D1%82%D0%B5","aria-label":"собрать всё вместе permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Собрать всё вместе"),"\n",a.createElement(n.p,null,"Направляемся в точку входа приложения и подключаем все компоненты,\nпредварительно обернув их провайдером."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-jsx"},"// index.js\nimport React from 'react';\nimport { AppRegistry, SafeAreaView } from 'react-native';\nimport { name as appName } from './app.json';\n\nimport { ThemeProvider } from './src/providers/ThemeProvider';\nimport { WelcomeScreen } from './src/screens/WelcomeScreen';\nimport { StatusBarComponent } from './src/components/StatusBarComponent';\n\nconst App = () => (\n  <ThemeProvider>\n    <StatusBarComponent />\n    <SafeAreaView>\n      <WelcomeScreen />\n    </SafeAreaView>\n  </ThemeProvider>\n);\n\nAppRegistry.registerComponent(appName, () => App);\n")),"\n",a.createElement(l.E,{src:"/videos/rn_dark_mode.mp4",type:"video/mp4"}))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.MN)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)},i=t(7792),m=t(7619);function p(e){var n,t;let{data:{mdx:r},children:o,pageContext:{prev:l,next:c}}=e;const{h1:s,title:p,description:d,image:h,table_of_contents:u}=r.frontmatter;return(0,a.useEffect)((()=>{(0,m.K)()}),[]),a.createElement(a.Fragment,null,a.createElement(i._W,{h1:s,title:p,description:d,image:null===(n=r.frontmatter.image)||void 0===n?void 0:n.publicURL},a.createElement(i.MV,{post:r.frontmatter,imageData:null==h||null===(t=h.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},u?a.createElement(i.G8,{headings:r.tableOfContents}):null,a.createElement("div",{className:"page__content"},o,a.createElement(i.Mf,{prev:l,next:c})),a.createElement(i.QZ,null))))}function d(e){return a.createElement(p,e,a.createElement(s,e))}},8876:function(e,n,t){t.d(n,{MN:function(){return o}});var r=t(4424);const a=r.createContext({});function o(e){const n=r.useContext(a);return r.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);