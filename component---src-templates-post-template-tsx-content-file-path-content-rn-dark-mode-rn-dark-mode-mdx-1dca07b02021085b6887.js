"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[1988],{1148:function(n,s,a){a.r(s),a.d(s,{Head:function(){return u.Ss},default:function(){return k}});var t=a(8876),p=a(4424),e=a(3616),o=a(8652);function c(n){const s=Object.assign({p:"p",a:"a",span:"span",h2:"h2"},(0,t.MN)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.p,null,"Не скерет, что начиная с версии 10 для Android и 13 для iOS в этих операционных системах\nпоявился тёмный режим. В React Native взаимодействие с этой штукой строится через\nмодуль ",p.createElement(s.a,{href:"https://reactnative.dev/docs/appearance",target:"_blank",rel:"nofollow"},"Appearance"),"."),"\n",p.createElement(s.p,null,"Без долгих вступлений отправимся в бой. Для начала получение копии React Native и styled-components (по желанию):"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ npx react-native init DarkModeApp\n$ <span class="token builtin class-name">cd</span> DarkModeApp <span class="token operator">&amp;&amp;</span> <span class="token function">yarn</span> <span class="token function">install</span>\n$ <span class="token function">yarn</span> <span class="token function">add</span> styled-components\n$ <span class="token builtin class-name">cd</span> ios <span class="token operator">&amp;&amp;</span> pod <span class="token function">install</span> <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/</code></pre></div>'}}),"\n",p.createElement(s.p,null,"Структура проекта. Потребуется создать директорию ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">src</code>'}})," и недостающие файлы в ней. О каждом из них поговорим ниже."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ tree <span class="token parameter variable">-L</span> <span class="token number">4</span>\n<span class="token builtin class-name">.</span>\n├── android\n├── app.json\n├── babel.config.js\n├── index.js\n├── ios\n├── metro.config.js\n├── package.json\n└── src\n    ├── components\n    │   └── StatusBarComponent.js\n    ├── constants\n    │   └── colors.js\n    ├── providers\n    │   └── ThemeProvider.js\n    └── screens\n        └── WelcomeScreen.js</code></pre></div>'}}),"\n",p.createElement(s.h2,{id:"константы",style:{position:"relative"}},p.createElement(s.a,{href:"#%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D0%B0%D0%BD%D1%82%D1%8B","aria-label":"константы permalink",className:"anchor before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Константы"),"\n",p.createElement(s.p,null,"Указание цветовой палитры для каждой из тем. Dark mode будем проверять на яблочной платформе. Можно свериться с официальным ",p.createElement(s.a,{href:"https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/color/",target:"_blank",rel:"nofollow"},"guideline для iOS"),", если есть желание."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// constants/colors.js</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">LIGHT_COLORS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token string">\'rgb(242, 242, 247)\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">textColor</span><span class="token operator">:</span> <span class="token string">\'rgb(28, 28, 30)\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">thumbColor</span><span class="token operator">:</span> <span class="token string">\'rgb(255, 255, 255)\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">DARK_COLORS</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">layout</span><span class="token operator">:</span> <span class="token string">\'rgb(28, 28, 30)\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">textColor</span><span class="token operator">:</span> <span class="token string">\'rgb(242, 242, 247)\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">thumbColor</span><span class="token operator">:</span> <span class="token string">\'rgb(255, 255, 255)\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.h2,{id:"контекст",style:{position:"relative"}},p.createElement(s.a,{href:"#%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%BA%D1%81%D1%82","aria-label":"контекст permalink",className:"anchor before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Контекст"),"\n",p.createElement(s.p,null,"Самое простое решение — хранить текущие параметры темы в React Context.\nТаким образом данные хранятся на уровне всего приложения и их не требуется прокидывать\nв каждый компонент: доступ есть у всех компонентов, каким это потребуется."),"\n",p.createElement(s.p,null,"Создание Context и Provider."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// providers/ThemeProvider.js</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Appearance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">DARK_COLORS</span><span class="token punctuation">,</span> <span class="token constant">LIGHT_COLORS</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../constants/colors\'</span><span class="token punctuation">;</span>\n\n<span class="token comment">// контекст с параметрами по-умолчанию</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">isDark</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">colors</span><span class="token operator">:</span> <span class="token constant">LIGHT_COLORS</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">setColorScheme</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// провайдер</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">ThemeProvider</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> children <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> colorScheme <span class="token operator">=</span> Appearance<span class="token punctuation">.</span><span class="token function">getColorScheme</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// храним флаг isDark</span>\n  <span class="token keyword">const</span> <span class="token punctuation">[</span>isDark<span class="token punctuation">,</span> setIsDark<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>colorScheme <span class="token operator">===</span> <span class="token string">\'dark\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> defaultTheme <span class="token operator">=</span> <span class="token punctuation">{</span>\n    isDark<span class="token punctuation">,</span>\n    <span class="token literal-property property">colors</span><span class="token operator">:</span> isDark <span class="token operator">?</span> <span class="token constant">DARK_COLORS</span> <span class="token operator">:</span> <span class="token constant">LIGHT_COLORS</span><span class="token punctuation">,</span>\n    <span class="token comment">// будем менять флаг isDark по требованию</span>\n    <span class="token function-variable function">setColorScheme</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">scheme</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n      <span class="token function">setIsDark</span><span class="token punctuation">(</span>scheme <span class="token operator">===</span> <span class="token string">\'dark\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>defaultTheme<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>children<span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Provider</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.h2,{id:"screen",style:{position:"relative"}},p.createElement(s.a,{href:"#screen","aria-label":"screen permalink",className:"anchor before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Screen"),"\n",p.createElement(s.p,null,"Скрин — экран приложения. Как страница в вебе."),"\n",p.createElement(s.p,null,"Получение контекста может отличаться в зависимости от того используете вы\nкомпонент-класс или компонент-функцию. Пожалуй, можно привести оба примера."),"\n",p.createElement(s.p,null,"Для функции легче и короче применить хук ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useContext</code>'}}),". Для класса классчиеская передача\nчерез ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Context.Consumer</code>'}}),"."),"\n",p.createElement(e.k,{headings:["useContext","Context.Consumer"]},p.createElement(e.s,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// screens/WelcomeScreen.jsx</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ScrollView<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">\'styled-components/native\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../providers/ThemeProvider\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">LIGHT_COLORS</span><span class="token punctuation">,</span> <span class="token constant">DARK_COLORS</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../constants/colors\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Section <span class="token operator">=</span> styled<span class="token punctuation">.</span>View<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  padding: 30px 16px;\n  background-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    props<span class="token punctuation">.</span>isDark <span class="token operator">?</span> <span class="token constant">DARK_COLORS</span><span class="token punctuation">.</span>layout <span class="token operator">:</span> <span class="token constant">LIGHT_COLORS</span><span class="token punctuation">.</span>layout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> SectionText <span class="token operator">=</span> styled<span class="token punctuation">.</span>Text<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  margin: 12px 0;\n  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    props<span class="token punctuation">.</span>isDark <span class="token operator">?</span> <span class="token constant">DARK_COLORS</span><span class="token punctuation">.</span>textColor <span class="token operator">:</span> <span class="token constant">LIGHT_COLORS</span><span class="token punctuation">.</span>textColor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">WelcomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// получить контекст</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> colors<span class="token punctuation">,</span> isDark<span class="token punctuation">,</span> setColorScheme <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// изменить тему</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleChangeColorTheme</span> <span class="token operator">=</span> <span class="token parameter">isTrue</span> <span class="token operator">=></span> <span class="token function">setColorScheme</span><span class="token punctuation">(</span>isTrue <span class="token operator">?</span> <span class="token string">\'dark\'</span> <span class="token operator">:</span> <span class="token string">\'light\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollView</span></span> <span class="token attr-name">contentInsetAdjustmentBehavior</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>automatic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Section</span></span> <span class="token attr-name">isDark</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isDark<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SectionText</span></span> <span class="token attr-name">isDark</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isDark<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span>isDark <span class="token operator">?</span> <span class="token string">\'Dark\'</span> <span class="token operator">:</span> <span class="token string">\'Light\'</span><span class="token punctuation">}</span><span class="token plain-text"> Mode\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SectionText</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span>\n          <span class="token attr-name">thumbColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>colors<span class="token punctuation">.</span>thumbColor<span class="token punctuation">}</span></span>\n          <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isDark<span class="token punctuation">}</span></span>\n          <span class="token attr-name">onValueChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleChangeColorTheme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Section</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ScrollView</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}})),p.createElement(e.s,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// screens/WelcomeScreen.jsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ScrollView<span class="token punctuation">,</span> Switch<span class="token punctuation">,</span> Text <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">\'styled-components/native\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../providers/ThemeProvider\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> <span class="token constant">LIGHT_COLORS</span><span class="token punctuation">,</span> <span class="token constant">DARK_COLORS</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../constants/colors\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> Section <span class="token operator">=</span> styled<span class="token punctuation">.</span>View<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  padding: 30px 16px;\n  background-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    props<span class="token punctuation">.</span>isDark <span class="token operator">?</span> <span class="token constant">DARK_COLORS</span><span class="token punctuation">.</span>layout <span class="token operator">:</span> <span class="token constant">LIGHT_COLORS</span><span class="token punctuation">.</span>layout<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> SectionText <span class="token operator">=</span> styled<span class="token punctuation">.</span>Text<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\n  margin: 12px 0;\n  color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n    props<span class="token punctuation">.</span>isDark <span class="token operator">?</span> <span class="token constant">DARK_COLORS</span><span class="token punctuation">.</span>textColor <span class="token operator">:</span> <span class="token constant">LIGHT_COLORS</span><span class="token punctuation">.</span>textColor<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;\n</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">WelcomeScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollView</span></span> <span class="token attr-name">contentInsetAdjustmentBehavior</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>automatic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Consumer</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span><span class="token comment">/* получить контекст */</span><span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token punctuation">{</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> isDark<span class="token punctuation">,</span> colors<span class="token punctuation">,</span> setColorScheme <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token comment">// изменить тему</span>\n        <span class="token keyword">const</span> <span class="token function-variable function">handleChangeColorTheme</span> <span class="token operator">=</span> <span class="token parameter">isTrue</span> <span class="token operator">=></span> <span class="token function">setColorScheme</span><span class="token punctuation">(</span>isTrue <span class="token operator">?</span> <span class="token string">\'dark\'</span> <span class="token operator">:</span> <span class="token string">\'light\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Section</span></span> <span class="token attr-name">isDark</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isDark<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SectionText</span></span> <span class="token attr-name">isDark</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isDark<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n              </span><span class="token punctuation">{</span>isDark <span class="token operator">?</span> <span class="token string">\'Dark\'</span> <span class="token operator">:</span> <span class="token string">\'Light\'</span><span class="token punctuation">}</span><span class="token plain-text"> Mode\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SectionText</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Switch</span></span>\n              <span class="token attr-name">thumbColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>colors<span class="token punctuation">.</span>thumbColor<span class="token punctuation">}</span></span>\n              <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isDark<span class="token punctuation">}</span></span>\n              <span class="token attr-name">onValueChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleChangeColorTheme<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Section</span></span><span class="token punctuation">></span></span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Consumer</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ScrollView</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}))),"\n",p.createElement(s.p,null,"В данном случае ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">styled-components</code>'}})," делает код чище, а будни радостнее. Всё это благодаря\nконструкции вида",p.createElement("br"),p.createElement(s.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">background-color: ${(props) => props.isDark ? 'gray' : 'white'};</code>"}}),".",p.createElement("br"),"\nПри изменении темы цвета пересчитаются, компоненты перерендерятся."),"\n",p.createElement(s.p,null,"Но у всего есть своя цена, не увлекайтесь. Для веба при подходе CSS-in-JS можно\nпорекомендовать библиотеку ",p.createElement(s.a,{href:"https://github.com/callstack/linaria",target:"_blank",rel:"nofollow"},"linaria")," или другие\nzero-runtime решения. Увы, на момент написания заметки для RN такой возможности нет."),"\n",p.createElement(s.p,null,"Перерисовка происходит и ",p.createElement(s.a,{href:"https://reactjs.org/docs/context.html#caveats",target:"_blank",rel:"nofollow"},"при использовании контекста"),",\nчто в сейчас нам только на руку. В целом лучше передавать в Provider примитивные типы."),"\n",p.createElement(s.p,null,"Что ж, логика готова. Осталось изменить настройки и не забывать после этого\nперезапускать приложение (достаточно reload, ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">cmd + r</code>'}}),"). Автоматически при смене времени суток\nмы ничего не пересчитываем."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 701px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 60.66666666666667%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/315686458d06cd322618087c0855e1cd/e93cc/dev_settings.webp 300w,\n/static/315686458d06cd322618087c0855e1cd/b0544/dev_settings.webp 600w,\n/static/315686458d06cd322618087c0855e1cd/faca0/dev_settings.webp 701w"\n              sizes="(max-width: 701px) 100vw, 701px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/315686458d06cd322618087c0855e1cd/73b64/dev_settings.jpg 300w,\n/static/315686458d06cd322618087c0855e1cd/3ad8d/dev_settings.jpg 600w,\n/static/315686458d06cd322618087c0855e1cd/4d1c7/dev_settings.jpg 701w"\n            sizes="(max-width: 701px) 100vw, 701px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/315686458d06cd322618087c0855e1cd/4d1c7/dev_settings.jpg"\n            alt="ios dev appearance"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",p.createElement(s.h2,{id:"статус-бар",style:{position:"relative"}},p.createElement(s.a,{href:"#%D1%81%D1%82%D0%B0%D1%82%D1%83%D1%81-%D0%B1%D0%B0%D1%80","aria-label":"статус бар permalink",className:"anchor before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Статус-бар"),"\n",p.createElement(s.p,null,"После проделанной работы цветовая схема будет меняться. Но есть ещё одна небольшая проблема:\nстатус-бар отсанется неизменным."),"\n",p.createElement(s.p,null,"Создадим компонент с доступом к контексту и по той же логике, что и раньше, будем менять его цвет.\nКстати, для iOS такой возможности не предусмотрено, поэтому придётся делать обёртку над родным ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">StatusBar</code>'}}),"."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// components/StatusBarComponent</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StatusBar<span class="token punctuation">,</span> View<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeContext <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../providers/ThemeProvider\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token constant">STATUS_BAR_HEIGHT</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">StatusBarComponent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> isDark<span class="token punctuation">,</span> colors <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token literal-property property">statusBar</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> colors<span class="token punctuation">.</span>layout<span class="token punctuation">,</span>\n      <span class="token literal-property property">height</span><span class="token operator">:</span> <span class="token constant">STATUS_BAR_HEIGHT</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// задать высоту статус-бара</span>\n  StatusBar<span class="token punctuation">.</span>currentHeight <span class="token operator">=</span> <span class="token constant">STATUS_BAR_HEIGHT</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>statusBar<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StatusBar</span></span> <span class="token attr-name">barStyle</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>isDark <span class="token operator">?</span> <span class="token string">\'light-content\'</span> <span class="token operator">:</span> <span class="token string">\'dark-content\'</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(s.h2,{id:"собрать-всё-вместе",style:{position:"relative"}},p.createElement(s.a,{href:"#%D1%81%D0%BE%D0%B1%D1%80%D0%B0%D1%82%D1%8C-%D0%B2%D1%81%D1%91-%D0%B2%D0%BC%D0%B5%D1%81%D1%82%D0%B5","aria-label":"собрать всё вместе permalink",className:"anchor before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Собрать всё вместе"),"\n",p.createElement(s.p,null,"Направляемся в точку входа приложения и подключаем все компоненты,\nпредварительно обернув их провайдером."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// index.js</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> AppRegistry<span class="token punctuation">,</span> SafeAreaView <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> name <span class="token keyword">as</span> appName <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./app.json\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> <span class="token punctuation">{</span> ThemeProvider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./src/providers/ThemeProvider\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> WelcomeScreen <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./src/screens/WelcomeScreen\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StatusBarComponent <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./src/components/StatusBarComponent\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StatusBarComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WelcomeScreen</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeProvider</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nAppRegistry<span class="token punctuation">.</span><span class="token function">registerComponent</span><span class="token punctuation">(</span>appName<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> App<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}),"\n",p.createElement(o.E,{src:"/videos/rn_dark_mode.mp4",type:"video/mp4"}))}var l=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.MN)(),n.components);return s?p.createElement(s,n,p.createElement(c,n)):c(n)},u=a(7792),r=a(7619);function i(n){var s,a;let{data:{mdx:t},children:e,pageContext:{prev:o,next:c}}=n;const{h1:l,title:i,description:k,image:m,table_of_contents:g}=t.frontmatter;return(0,p.useEffect)((()=>{(0,r.K)()}),[]),p.createElement(p.Fragment,null,p.createElement(u._W,{h1:l,title:i,description:k,image:null===(s=t.frontmatter.image)||void 0===s?void 0:s.publicURL},p.createElement(u.MV,{post:t.frontmatter,imageData:null==m||null===(a=m.childImageSharp)||void 0===a?void 0:a.gatsbyImageData},g?p.createElement(u.G8,{headings:t.tableOfContents}):null,p.createElement("div",{className:"page__content"},e,p.createElement(u.Mf,{prev:o,next:c})),p.createElement(u.QZ,null))))}function k(n){return p.createElement(i,n,p.createElement(l,n))}},8876:function(n,s,a){a.d(s,{MN:function(){return e}});var t=a(4424);const p=t.createContext({});function e(n){const s=t.useContext(p);return t.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);