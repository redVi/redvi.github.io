"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[2200],{2944:function(e,n,t){t.r(n),t.d(n,{Head:function(){return l.Ss},default:function(){return p}});var a=t(8876),s=t(4424);function r(e){const n=Object.assign({p:"p",strong:"strong",h2:"h2",a:"a",span:"span",ul:"ul",li:"li",pre:"pre",code:"code",h3:"h3",em:"em"},(0,a.MN)(),e.components);return s.createElement(s.Fragment,null,s.createElement(n.p,null,"Самым популярным серверным решением для приложений на Node.js является Express. Это минималистичный фреймворк,\nсравнимый с Sinatra из мира ruby или Flask из мира python. Но... есть одно «но»: слишком много кода\nприходится писать руками, нет единой продуманной архитектуры."),"\n",s.createElement(n.p,null,"А когда хочется всего этого «из коробки» приходит Nest. По-умолчанию он использует всё тот же Express\nвнутри себя. И, вдохновлённый Angular, даёт сверху много нужных плюшек."),"\n",s.createElement(n.p,null,s.createElement(n.strong,null,"План на сегодня"),": настроить окружение и поднять в docker сам Nestjs + Postgres в качестве базы данных.\nКак, возможно, уже догадался читатель, эта заметка вводная. В дальнейших планах рассказать про работу с TypeORM,\nвалидацию и тестирование. В целом, у Nest отличная документация, поэтому рассмотрен он будет коротко\nи на живых примерах. Для лёгкого старта: чтобы затронуть вещи, которые не слишком подробно раскрыты в официальной доке."),"\n",s.createElement(n.h2,{id:"используемые-технологии",style:{position:"relative"}},s.createElement(n.a,{href:"#%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D1%83%D0%B5%D0%BC%D1%8B%D0%B5-%D1%82%D0%B5%D1%85%D0%BD%D0%BE%D0%BB%D0%BE%D0%B3%D0%B8%D0%B8","aria-label":"используемые технологии permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Используемые технологии"),"\n",s.createElement(n.ul,null,"\n",s.createElement(n.li,null,s.createElement(n.strong,null,"GraphQL")," — синтаксис, который описывает как запрашивать данные. Имеет несколько практических реализаций."),"\n",s.createElement(n.li,null,s.createElement(n.strong,null,"PostgreSQL")," — одна из баз данных. Исходим из предположения, что наши данные будут в основном отдаваться на чтение. Для чтения postgres хороша, но выбирайте из своих нужд."),"\n",s.createElement(n.li,null,s.createElement(n.strong,null,"TypeORM")," — ORM для множества баз данных с поддержкой TypeScript. Это чтобы не писать сырые запросы руками."),"\n",s.createElement(n.li,null,s.createElement(n.strong,null,"Docker")," — программная платформа для быстрой разработки, тестирования и развертывания приложений."),"\n"),"\n",s.createElement(n.h2,{id:"nestjs",style:{position:"relative"}},s.createElement(n.a,{href:"#nestjs","aria-label":"nestjs permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Nestjs"),"\n",s.createElement(n.p,null,"Установка nest и генерация нового приложения:"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-shell"},"$ yarn add global nestjs\n$ nest new nest-api\n$ cd nest-api\n")),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1200px; flex:1;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 68%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/04787c1cfa2aec3c0148427c314cfdce/e93cc/nest-new.webp 300w,\n/static/04787c1cfa2aec3c0148427c314cfdce/b0544/nest-new.webp 600w,\n/static/04787c1cfa2aec3c0148427c314cfdce/68fc1/nest-new.webp 1200w,\n/static/04787c1cfa2aec3c0148427c314cfdce/a8feb/nest-new.webp 1392w"\n              sizes="(max-width: 1200px) 100vw, 1200px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/04787c1cfa2aec3c0148427c314cfdce/73b64/nest-new.jpg 300w,\n/static/04787c1cfa2aec3c0148427c314cfdce/3ad8d/nest-new.jpg 600w,\n/static/04787c1cfa2aec3c0148427c314cfdce/6c738/nest-new.jpg 1200w,\n/static/04787c1cfa2aec3c0148427c314cfdce/fb170/nest-new.jpg 1392w"\n            sizes="(max-width: 1200px) 100vw, 1200px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/04787c1cfa2aec3c0148427c314cfdce/6c738/nest-new.jpg"\n            alt="nest_cli"\n            title="Nest Cli"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",s.createElement(n.p,null,"Установка зависимостей:"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-shell"},"$ yarn add @nestjs/config @nestjs/graphql \\\n  @nestjs/platform-fastify @nestjs/typeorm \\\n  apollo-server-fastify graphql typeorm pg\n")),"\n",s.createElement(n.p,null,"Забрать приложение docker-desktop можно ",s.createElement(n.a,{href:"https://www.docker.com/products/docker-desktop",target:"_blank",rel:"nofollow"},"здесь"),"."),"\n",s.createElement(n.h3,{id:"конфигурация",style:{position:"relative"}},s.createElement(n.a,{href:"#%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F","aria-label":"конфигурация permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Конфигурация"),"\n",s.createElement(n.p,null,"Следуя хорошим практикам, переменные окружения станем брать из ",s.createElement(n.code,null,".env"),"-файла.\nДля этого нужно создать файл конфигурации, который позволит получать эти переменные динамически.\nПлагин ",s.createElement(n.code,null,"ApolloServerPluginLandingPageLocalDefault")," не является обязательным: он предоставляет более\nудобный интерфейс для GraphQL-запросов."),"\n",s.createElement(n.p,null,"Nest позволяет выбрать стиль написания кода: ",s.createElement(n.em,null,"scheme-first")," или ",s.createElement(n.em,null,"code-first"),". В первом случае схема GraphQL\nпишется руками, а типы TypeScript генерируются автоматически. Во втором — наоборот, схему вручную не пишем.\nЗдесь выбран второй вариант. Название файла схемы указывается в конфиге ",s.createElement(n.code,null,"autoSchemaFile"),"."),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-ts"},"// src/config.ts\nimport { join } from 'path';\nimport { ApolloServerPluginLandingPageLocalDefault } from 'apollo-server-core';\n\nexport default (): any => ({\n  envFilePath: `.env.${process.env.MODE}`,\n  database: {\n    type: 'postgres',\n    host: 'postgres', // так будет назван docker-контейнер! при обычном запуске указать 127.0.0.1\n    port: process.env.POSTGRES_PORT,\n    username: process.env.POSTGRES_USER,\n    password: process.env.POSTGRES_PASSWORD,\n    database: process.env.POSTGRES_DB,\n    entities: [join(__dirname, '**', '*.entity.{ts,js}')],\n    migrations: [join(__dirname, '**', '*.migration.{ts,js}')],\n    synchronize: process.env.MODE != 'production',\n  },\n  gql: {\n    playground: false,\n    plugins:\n      process.env.MODE == 'production'\n      ? []\n      : [ApolloServerPluginLandingPageLocalDefault()],\n    autoSchemaFile: 'schema.gql',\n  },\n});\n")),"\n",s.createElement(n.p,null,"В корне проекта создать один или несколько ",s.createElement(n.code,null,".env"),"-файлов с переменными окружения.\nНастраиваем dev-окружение, поэтому для примера приводится файл ",s.createElement(n.code,null,".env.development"),":"),"\n",s.createElement(n.pre,null,s.createElement(n.code,null,"POSTGRES_DB=nestjs\nPOSTGRES_USER=nestjs\nPOSTGRES_PASSWORD=fRzYg8Vq&w8b\nPOSTGRES_PORT=5432\nMODE=development\n")),"\n",s.createElement(n.p,null,"Чтобы Nest читал переменные из env, в ",s.createElement(n.code,null,"src/app.module.ts")," включим глобально ",s.createElement(n.code,null,"ConfigModule")," и передадим\nдля загрузки наш конфиг."),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-ts"},"// src/app.module.ts\nimport { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AppService } from './app.service';\nimport { AppController } from './app.controller';\nimport config from './config';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      isGlobal: true,\n      load: [config],\n    }),\n    TypeOrmModule.forRootAsync({ useFactory: () => config().database }),\n    GraphQLModule.forRootAsync({ useFactory: () => config().gql }),\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n")),"\n",s.createElement(n.p,null,"Наконец, в ",s.createElement(n.code,null,"main.ts")," укажем использование Fastify вместо Express. По словам\nего разработчиков (что подтверждают и ребята из Nest) Fastify гораздо быстрее\nсвоего собрата."),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-ts"},"// src/main.ts\nimport { NestFactory } from '@nestjs/core';\nimport { FastifyAdapter, NestFastifyApplication } from '@nestjs/platform-fastify';\nimport { AppModule } from './app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create<NestFastifyApplication>(\n    AppModule,\n    new FastifyAdapter(),\n  );\n  // nest_api имя контейнера, если его не задать по http://localhost:3000\n  // достучаться к приложению будет нереально\n  await app.listen(3000, 'nest_api');\n}\nbootstrap();\n")),"\n",s.createElement(n.h3,{id:"логика",style:{position:"relative"}},s.createElement(n.a,{href:"#%D0%BB%D0%BE%D0%B3%D0%B8%D0%BA%D0%B0","aria-label":"логика permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Логика"),"\n",s.createElement(n.p,null,"Для GraphQL сгенерируем сущность, называемую в терминологии Nest ресурсом."),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-shell"},"$ nest g resource users\n")),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1200px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 47.66666666666667%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/87df9330d782714a3774e9f9099ca3c1/e93cc/nest-resource.webp 300w,\n/static/87df9330d782714a3774e9f9099ca3c1/b0544/nest-resource.webp 600w,\n/static/87df9330d782714a3774e9f9099ca3c1/68fc1/nest-resource.webp 1200w,\n/static/87df9330d782714a3774e9f9099ca3c1/8838a/nest-resource.webp 1265w"\n              sizes="(max-width: 1200px) 100vw, 1200px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/87df9330d782714a3774e9f9099ca3c1/73b64/nest-resource.jpg 300w,\n/static/87df9330d782714a3774e9f9099ca3c1/3ad8d/nest-resource.jpg 600w,\n/static/87df9330d782714a3774e9f9099ca3c1/6c738/nest-resource.jpg 1200w,\n/static/87df9330d782714a3774e9f9099ca3c1/e9243/nest-resource.jpg 1265w"\n            sizes="(max-width: 1200px) 100vw, 1200px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/87df9330d782714a3774e9f9099ca3c1/6c738/nest-resource.jpg"\n            alt="&quot;Nest resource&quot;"\n            title="nest g resource"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",s.createElement(n.p,null,"Nest автоматически сгенерирует всё необходимое в ",s.createElement(n.code,null,"src/user")," и подключит\nмодуль в начальную точку приложения: ",s.createElement(n.code,null,"src/app.module.ts"),"."),"\n",s.createElement(n.p,null,"Для проверки запросов создадим простой resolver и подключим модель ",s.createElement(n.code,null,"User")," к TypeORM.\nИзменения будут в следующих файлах:"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-ts"},"// src/users/dto/create-user.input.ts\nimport { InputType, Field } from '@nestjs/graphql';\n\n@InputType()\nexport class CreateUserInput {\n  // Field это поле для GraphQL\n  // Если его не поставить, поле name не будет видно на стороне клиента!\n  @Field(() => String)\n  name: string;\n}\n")),"\n",s.createElement(n.p,null,"Модель таблицы базы данных:"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-ts"},"// src/users/entities/user.entity.ts\nimport { ObjectType, Field, Int } from '@nestjs/graphql';\nimport { Column, PrimaryGeneratedColumn, Entity } from 'typeorm';\n\n@ObjectType()\n// users - название таблицы в базе, можно назвать как угодно\n@Entity({ name: 'users' })\nexport class User {\n  @Field(() => Int)\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Field(() => String)\n  @Column()\n  name: string;\n}\n")),"\n",s.createElement(n.p,null,"Модуль со всеми зависимостями ресурса ",s.createElement(n.code,null,"users"),":"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-ts"},"// src/users/users.module.ts\nimport { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { UsersService } from './users.service';\nimport { UsersResolver } from './users.resolver';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UsersResolver, UsersService],\n})\nexport class UsersModule {}\n")),"\n",s.createElement(n.p,null,"Сервис (логика модуля):"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-ts"},"// src/users/users.service.ts\nimport { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\n\n@Injectable()\nexport class UsersService {\n  // получить доступ к методам TypeORM для User\n  constructor(@InjectRepository(User) private readonly repository: Repository<User>) {}\n\n  // найти в базе и вернуть список пользователей\n  async findAll() {\n    return await this.repository.find();\n  }\n}\n")),"\n",s.createElement(n.p,null,"Resolver (примерно как роутер в REST):"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-ts"},"// src/users/users.resolver.ts\nimport { Resolver, Query } from '@nestjs/graphql';\nimport { UsersService } from './users.service';\nimport { User } from './entities/user.entity';\n\n@Resolver(() => User)\nexport class UsersResolver {\n  // доступ к сервису\n  constructor(private readonly usersService: UsersService) {}\n\n  // query-запрос вернёт список сущностей типа User\n  // это для GraphQL на клиенте, примерный аналог GET-запроса\n  @Query(() => [User], { name: 'users' })\n  findAll() {\n    // обращение к методу findAll из сервиса\n    return this.usersService.findAll();\n  }\n}\n")),"\n",s.createElement(n.h2,{id:"docker",style:{position:"relative"}},s.createElement(n.a,{href:"#docker","aria-label":"docker permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Docker"),"\n",s.createElement(n.p,null,"Пришло время упаковать всё в контейнер. Для nest будет ручная сборка через ",s.createElement(n.code,null,"Dockerfile"),",\nостальные образы берутся готовыми из ",s.createElement(n.a,{href:"https://hub.docker.com",target:"_blank",rel:"nofollow"},"Docker Hub"),"."),"\n",s.createElement(n.h3,{id:"dockerfile",style:{position:"relative"}},s.createElement(n.a,{href:"#dockerfile","aria-label":"dockerfile permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Dockerfile"),"\n",s.createElement(n.p,null,"В корне проекта создать новую директорию ",s.createElement(n.code,null,".docker"),", где будут лежать скрипты и файл сборки nest.\nВ ней ",s.createElement(n.code,null,"Dockerfile")," со следующим содержимым:"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-bash"},'# образ для development\nFROM node:16.13.2-alpine AS development\n\n# Создать директорию внутри контейнера\nWORKDIR ./app\n\n# Установить зависимости\nCOPY package*.json ./\nRUN npm i -g @nestjs/cli\nRUN npm install\n\n# Скопировать приложение из текущей директории в WORKDIR-директорию\nCOPY . .\n\n# Скомпилировать приложение\nRUN npm run build\n\n# образ для production по той же схеме\nFROM node:16.13.2-alpine AS production\n\nARG NODE_ENV=production\nENV NODE_ENV=${NODE_ENV}\n\nWORKDIR ./app\n\nCOPY package*.json ./\nRUN npm install --only=production\nCOPY . .\nCOPY --from=development ./app/dist ./dist\n\nCMD ["node", "dist/main"]\n')),"\n",s.createElement(n.p,null,"И там же скрипт инициализации базы данных: он создаст новую базу и пользователя для неё\nсо всеми привилегиями."),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-conf"},'#!/bin/bash\n# .docker/init-user-db.sh\nset -e\n\npsql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname "$POSTGRES_DB" <<-EOSQL\n    CREATE USER nestjs;\n    CREATE DATABASE nestjs;\n    GRANT ALL PRIVILEGES ON DATABASE nestjs TO nestjs;\nEOSQL\n')),"\n",s.createElement(n.h3,{id:"docker-compose",style:{position:"relative"}},s.createElement(n.a,{href:"#docker-compose","aria-label":"docker compose permalink",className:"anchor before"},s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"docker-compose"),"\n",s.createElement(n.p,null,"В корне проекта ",s.createElement(n.code,null,"docker-compose.dev.yml"),":"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-yaml"},'# docker-compose.dev.yml\nversion: \'3\'\n\nservices:\n  # postgres\n  db:\n    image: postgres:14.1-alpine\n    restart: unless-stopped\n    container_name: postgres\n    env_file: .env.development # какой env-файл использовать\n    volumes:\n      - ./.docker/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh:ro\n      # если нужен дамп реальной базы вместо скрипта указать его\n      # - ./.docker/db.sql:/docker-entrypoint-initdb.d/db.sql\n      - pg_data:/var/lib/postgresql/data\n    ports:\n      - "5432:5432"\n\n  # удобный веб-интерфейс для баз данных\n  adminer:\n    image: adminer\n    restart: unless-stopped\n    container_name: adminer\n    ports:\n      - "8080:8080"\n\n  # nestjs\n  nest_api:\n    container_name: nest_api\n    image: nest-api:1.0.0\n    build:\n      context: .              # контекст сборки, для нас это корень проекта\n      target: development     # точка из Dockerfile\n      dockerfile: .docker/Dockerfile\n    command: npm run start:dev # запуск команды nestjs для разработки\n    env_file: .env.development\n    ports:\n      - "3000:3000"\n    volumes:\n      - .:/app\n      - /app/node_modules\n    restart: unless-stopped\n    depends_on: # ждёт запуска базы\n      - db\n\nvolumes:\n  pg_data:\n')),"\n",s.createElement(n.p,null,"При желании по аналогии с ",s.createElement(n.code,null,"docker-compose.dev.yml")," можно сделать такой же файл конфигурации\nдля боевой среды."),"\n",s.createElement(n.p,null,"Ну, и дабы не копировать ",s.createElement(n.code,null,"node_modules")," в контейнер, создадим в корне файл ",s.createElement(n.code,null,".dockerignore"),":"),"\n",s.createElement(n.pre,null,s.createElement(n.code,null,"node_modules\n")),"\n",s.createElement(n.p,null,"Осталось собрать образ для nest и запустить окружение в Docker:"),"\n",s.createElement(n.pre,null,s.createElement(n.code,{className:"language-shell"},"$ docker-compose -f docker-compose.dev.yml build\n$ docker-compose -f docker-compose.dev.yml up -d\n")),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1200px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 63.33333333333333%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/46c2917cacc23083184104ff239f3d07/e93cc/nest-build.webp 300w,\n/static/46c2917cacc23083184104ff239f3d07/b0544/nest-build.webp 600w,\n/static/46c2917cacc23083184104ff239f3d07/68fc1/nest-build.webp 1200w,\n/static/46c2917cacc23083184104ff239f3d07/a2303/nest-build.webp 1800w,\n/static/46c2917cacc23083184104ff239f3d07/5a30c/nest-build.webp 1852w"\n              sizes="(max-width: 1200px) 100vw, 1200px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/46c2917cacc23083184104ff239f3d07/73b64/nest-build.jpg 300w,\n/static/46c2917cacc23083184104ff239f3d07/3ad8d/nest-build.jpg 600w,\n/static/46c2917cacc23083184104ff239f3d07/6c738/nest-build.jpg 1200w,\n/static/46c2917cacc23083184104ff239f3d07/8b34c/nest-build.jpg 1800w,\n/static/46c2917cacc23083184104ff239f3d07/5e6e8/nest-build.jpg 1852w"\n            sizes="(max-width: 1200px) 100vw, 1200px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/46c2917cacc23083184104ff239f3d07/6c738/nest-build.jpg"\n            alt="&quot;Build&quot;"\n            title="Nest build"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",s.createElement(n.p,null,"После успешной сборки и запуска, можно пройти по адресу ",s.createElement(n.code,null,"http://localhost:3000/graphql"),",\nгде опробовать выполнение созданного нами query-запроса:"),"\n",s.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1200px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 49.33333333333333%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/e93cc/nest_query.webp 300w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/b0544/nest_query.webp 600w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/68fc1/nest_query.webp 1200w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/a2303/nest_query.webp 1800w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/69b14/nest_query.webp 1824w"\n              sizes="(max-width: 1200px) 100vw, 1200px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/eed55/nest_query.png 300w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/7491f/nest_query.png 600w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/8537d/nest_query.png 1200w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/d2cc9/nest_query.png 1800w,\n/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/f5553/nest_query.png 1824w"\n            sizes="(max-width: 1200px) 100vw, 1200px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/ec2dc2debbd761de1fbe6ec14b4a7ef3/8537d/nest_query.png"\n            alt="&quot;GraphQL&quot;"\n            title="Query"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",s.createElement(n.p,null,"Поскольку пользователей в базе нет, ожидаемо увидеть пустой список."))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.MN)(),e.components);return n?s.createElement(n,e,s.createElement(r,e)):r(e)},l=t(7792),o=t(7619);function i(e){var n,t;let{data:{mdx:a},children:r,pageContext:{prev:c,next:i}}=e;const{h1:p,title:d,description:m,image:u,table_of_contents:f}=a.frontmatter;return(0,s.useEffect)((()=>{(0,o.K)()}),[]),s.createElement(s.Fragment,null,s.createElement(l._W,{h1:p,title:d,description:m,image:null===(n=a.frontmatter.image)||void 0===n?void 0:n.publicURL},s.createElement(l.MV,{post:a.frontmatter,imageData:null==u||null===(t=u.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},f?s.createElement(l.G8,{headings:a.tableOfContents}):null,s.createElement("div",{className:"page__content"},r,s.createElement(l.Mf,{prev:c,next:i})),s.createElement(l.QZ,null))))}function p(e){return s.createElement(i,e,s.createElement(c,e))}},8876:function(e,n,t){t.d(n,{MN:function(){return r}});var a=t(4424);const s=a.createContext({});function r(e){const n=a.useContext(s);return a.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);