"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[7544],{8828:function(n,s,a){a.r(s),a.d(s,{Head:function(){return c.Ss},default:function(){return r}});var t=a(8876),e=a(4424);function p(n){const s=Object.assign({p:"p",h2:"h2",a:"a",span:"span"},(0,t.MN)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"Пост создан для рассмотрения небольшого примера возможностей языка python. Мы не станем углубляться в сложные темы языка, например, такие как объектно-ориентированное программирование и связанные с ним классы. Да, они являются мощным инструментом для создания сложных приложений, но нам этого пока не требуется."),"\n",e.createElement(s.p,null,"Цель: создать англо-русский, русско-английский словарь с возможностью вносить в него новые, пользовательские значения. Первое, что приходи на ум — словари языка python."),"\n",e.createElement(s.p,null,"Словарь в питоне — неупорядоченная последовательность пар ключ — значение. Что, собственно, и требовалось, верно?"),"\n",e.createElement(s.h2,{id:"пример-первый",style:{position:"relative"}},e.createElement(s.a,{href:"#%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%BF%D0%B5%D1%80%D0%B2%D1%8B%D0%B9","aria-label":"пример первый permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Пример первый"),"\n",e.createElement(s.p,null,"Итак, первый файл должен содержать сам словарь с некоторыми значениями."),"\n",e.createElement(s.p,null,"Создадим его. Назовём ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">words.py</code>'}})),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># words.py</span>\n\nwords<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">\'word\'</span><span class="token punctuation">:</span> <span class="token string">\'мир\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'earth\'</span><span class="token punctuation">:</span><span class="token string">\'земля\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'you\'</span><span class="token punctuation">:</span> <span class="token string">\'ты\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'I\'</span><span class="token punctuation">:</span><span class="token string">\'я\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'We\'</span><span class="token punctuation">:</span><span class="token string">\'мы\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'probably\'</span><span class="token punctuation">:</span><span class="token string">\'вероятно\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'piece\'</span><span class="token punctuation">:</span><span class="token string">\'кусок\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'tired\'</span><span class="token punctuation">:</span><span class="token string">\'усталый\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'should\'</span><span class="token punctuation">:</span><span class="token string">\'должен\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'be able\'</span><span class="token punctuation">:</span><span class="token string">\'быть в состоянии\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'not enough\'</span><span class="token punctuation">:</span><span class="token string">\'не хватает\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'enough\'</span><span class="token punctuation">:</span><span class="token string">\'достаточно\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'should\'</span><span class="token punctuation">:</span><span class="token string">\'должен\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'represent\'</span><span class="token punctuation">:</span><span class="token string">\'представлять\'</span><span class="token punctuation">,</span>\\\n    <span class="token string">\'sequence\'</span><span class="token punctuation">:</span><span class="token string">\'последовательность\'</span><span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"И так далее."),"\n",e.createElement(s.p,null,"Теперь нужно как-то спросить у пользователя, перевод какого именно слова он хотел бы найти и вывести значение на экран. Кроме того, не стоит забывать, что наш словарь работает в двух направлениях: он должен не только переводить с английского на русский, но и наоборот!"),"\n",e.createElement(s.p,null,"Создадим стартовый файл с функциями, запускающими в зависимости от предпочтений пользователя тот или иной вариант перевода."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># mydictionary.py</span>\n\n<span class="token comment">#!/usr/bin/env python</span>\n<span class="token comment"># -*- coding:utf-8 -*-</span>\n<span class="token keyword">from</span> words <span class="token keyword">import</span> words\n\n<span class="token keyword">def</span> <span class="token function">eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    eng_words<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> words<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    find_word<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Enter word \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>eng_words<span class="token punctuation">.</span>get<span class="token punctuation">(</span>find_word<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'No such key\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">rus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    key<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Введите слово \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span> <span class="token punctuation">(</span>words<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">\'Искомое слово не найдено\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    x<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Найти перевод английского слова? \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token string">\'y\'</span><span class="token punctuation">:</span>\n        rus<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">elif</span> x <span class="token operator">==</span> <span class="token string">\'n\'</span><span class="token punctuation">:</span>\n        eng<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Увидимся позже\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Отлично! Разберём построчно:"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">from words import words</code>'}})," — импортируем из файла words.py сам словарь — ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">words</code>'}})),"\n",e.createElement(s.p,null,"Пишем две функции: ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">eng</code>'}})," и ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rus</code>'}})," без параметров."),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">eng_words=dict([[v, k] for k,v in words.items()])</code>'}}),' — это словарь "наоборот" для перевода русских слов на английские, теперь ключи стали значениями, а значения — ключами!'),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">find_word=input('Enter word ' '')</code>"}})," - просим пользователя ввести искомое слово"),"\n",e.createElement(s.p,null,e.createElement(s.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">print(eng_words.get(find_word) or print('No such key'))</code>"}})," — выводим на экран ответ с помощью функции ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">print</code>'}}),", получаем значение (",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">get</code>'}}),"). В противном случае, отвечаем, что не смогли отыскать нужное слово."),"\n",e.createElement(s.p,null,"Функция ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rus()</code>'}})," работает так же, но без инвертирования словаря."),"\n",e.createElement(s.p,null,'Вы уже догадались: наш словарь "наоборот" нужен для того, чтобы не приходилось писать два словаря — мы просто меняем ключи и значения местами.'),"\n",e.createElement(s.p,null,"Попробуйте запустить ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">mydictionary.py</code>'}})," и насладитесь результатом."),"\n",e.createElement(s.p,null,"Что сейчас делает наша программа?"),"\n",e.createElement(s.p,null,"Спрашивает искомое слово, выводит ответ. Но осталось ощущение, что всё слишком просто и чего-то не хватает. Давайте немного усложним задачу: создадим базу данных для словаря и дадим пользователю возможность добавлять свои значения."),"\n",e.createElement(s.h2,{id:"пример-второй",style:{position:"relative"}},e.createElement(s.a,{href:"#%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80-%D0%B2%D1%82%D0%BE%D1%80%D0%BE%D0%B9","aria-label":"пример второй permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Пример второй"),"\n",e.createElement(s.p,null,"Создание базы данных. Файл ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">words_db.py</code>'}})),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># words_db.py</span>\n\n<span class="token comment">#!/usr/bin/env python</span>\n<span class="token comment"># -*- coding:utf-8 -*-</span>\n<span class="token keyword">import</span> shelve\ndb <span class="token operator">=</span> shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">\'db_file\'</span><span class="token punctuation">)</span>\ndb<span class="token punctuation">[</span><span class="token string">\'earth\'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">\'земля\'</span>\ndb<span class="token punctuation">[</span><span class="token string">\'word\'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">\'слово\'</span>\ndb<span class="token punctuation">[</span><span class="token string">\'catch\'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">\'ловить\'</span>\ndb<span class="token punctuation">[</span><span class="token string">\'find\'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">\'искать\'</span>\ndb<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"База данных создаётся при помощи модуля ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">shelve</code>'}}),", импортируем его. Далее укажем входной файл: ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">db_file</code>'}}),", он открывается, в него записываются данные — теперь именно это наш словарь. Файл ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">words.py</code>'}}),", используемый в первом примере, нам больше не нужен."),"\n",e.createElement(s.p,null,"После записи значений, базу данных нужно закрыть — ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">db.close()</code>'}}),". Создайте нашу базу данных — ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">db_file</code>'}}),":"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ python words_db.py</code></pre></div>'}}),"\n",e.createElement(s.p,null,"Восстановление базы данных из файла ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">db_file</code>'}})),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># dump_words_db.py</span>\n\n<span class="token comment">#!/usr/bin/env python</span>\n<span class="token comment"># -*- coding:utf-8 -*-</span>\n<span class="token keyword">import</span> shelve\ndb<span class="token operator">=</span>shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">\'db_file\'</span><span class="token punctuation">)</span>\n<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'Yes\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Мы больше не используем просто словарь, значит и наш главный файл, запускающий функции, должен измениться. Напишем его:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># start_programm.py</span>\n\n<span class="token comment">#!/usr/bin/env python</span>\n<span class="token comment"># -*- coding:utf-8 -*-</span>\n<span class="token keyword">import</span> shelve\ndb<span class="token operator">=</span>shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">\'db_file\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    eng_words<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> db<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    find_word<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Enter word \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>eng_words<span class="token punctuation">.</span>get<span class="token punctuation">(</span>find_word<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'No such key\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">rus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    key<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Введите слово \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span> <span class="token punctuation">(</span>db<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token string">\'Искомое слово не найдено\'</span><span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">newRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    newkey<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Ввести новое слово \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    newvalue<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Ввести перевод \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    db<span class="token punctuation">[</span>newkey<span class="token punctuation">]</span> <span class="token operator">=</span> newvalue\n    db<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    start<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Найти английский перевод русского слова? введите "y" или "n" \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> start <span class="token operator">==</span> <span class="token string">\'y\'</span><span class="token punctuation">:</span>\n        eng<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">elif</span> start <span class="token operator">==</span> <span class="token string">\'n\'</span><span class="token punctuation">:</span>\n        rus<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">elif</span> start <span class="token operator">==</span> <span class="token string">\'u\'</span><span class="token punctuation">:</span>\n        newRecord<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'До встречи\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Рассмотрим подробнее"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">import</span> shelve\ndb<span class="token operator">=</span>shelve<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">\'db_file\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Мы импортировали модуль ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">shelve</code>'}})," и открыли нашу базу данных, содержащую словарь"),"\n",e.createElement(s.p,null,"Далее создали функцию, которая будет искать в файле ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">db_file</code>'}})," значение ключа. В случае с функцией ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">eng()</code>'}})," — значения в словаре инвертируются."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">eng</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    eng_words<span class="token operator">=</span><span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span>v<span class="token punctuation">,</span> k<span class="token punctuation">]</span> <span class="token keyword">for</span> k<span class="token punctuation">,</span>v <span class="token keyword">in</span> db<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n    find_word<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Enter word \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>eng_words<span class="token punctuation">.</span>get<span class="token punctuation">(</span>find_word<span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'No such key\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Кроме того, нужно дать пользователю внести свои значения - дополнить словарь, если он не нашёл в нём перевода нужного слова."),"\n",e.createElement(s.p,null,"За это отвечает функция ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">newRecord()</code>'}}),", которая предлагает ввести новые ключ и значение, а затем записывает их в базу данных и обновляет её."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">newRecord</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    newkey<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Ввести новое слово \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    newvalue<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Ввести перевод \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    db<span class="token punctuation">[</span>newkey<span class="token punctuation">]</span> <span class="token operator">=</span> newvalue\n    db<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    db<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Что означает последняя запись? Она работает, когда запускается программа и предлагает различные варианты. Если пользователь ввёл в ответ ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">'y'</code>"}})," — ищет перевод русского слова на английский, если ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">'n'</code>"}})," — ищет перевод английского слова на русский, если ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:"<code class=\"language-text\">'u'</code>"}})," (update) — позволяет внести свои значения."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">\'__main__\'</span><span class="token punctuation">:</span>\n    start<span class="token operator">=</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">\'Найти английский перевод русского слова? введите "y" или "n" \'</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">if</span> start <span class="token operator">==</span> <span class="token string">\'y\'</span><span class="token punctuation">:</span>\n        eng<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">elif</span> start <span class="token operator">==</span> <span class="token string">\'n\'</span><span class="token punctuation">:</span>\n        rus<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">elif</span> start <span class="token operator">==</span> <span class="token string">\'u\'</span><span class="token punctuation">:</span>\n        newRecord<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">\'До встречи\'</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Наш словарь отрабатывает один раз и программа закрывается. Можно спрашивать о действиях снова и снова, для этого достаточно заключить инструкции в цикл ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">while</code>'}}),'. Можно добавить графическое представление программы или "веб-морду". Но это уже совсем другая история и для примера простой программы она не подойдёт.'))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.MN)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},c=a(7792),l=a(7619);function u(n){var s,a;let{data:{mdx:t},children:p,pageContext:{prev:o,next:u}}=n;const{h1:r,title:i,description:k,image:d,table_of_contents:g}=t.frontmatter;return(0,e.useEffect)((()=>{(0,l.K)()}),[]),e.createElement(e.Fragment,null,e.createElement(c._W,{h1:r,title:i,description:k,image:null===(s=t.frontmatter.image)||void 0===s?void 0:s.publicURL},e.createElement(c.MV,{post:t.frontmatter,imageData:null==d||null===(a=d.childImageSharp)||void 0===a?void 0:a.gatsbyImageData},g?e.createElement(c.G8,{headings:t.tableOfContents}):null,e.createElement("div",{className:"page__content"},p,e.createElement(c.Mf,{prev:o,next:u})),e.createElement(c.QZ,null))))}function r(n){return e.createElement(u,n,e.createElement(o,n))}},8876:function(n,s,a){a.d(s,{MN:function(){return p}});var t=a(4424);const e=t.createContext({});function p(n){const s=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);