"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[2268],{4256:function(n,a,s){s.r(a),s.d(a,{Head:function(){return l.Ss},default:function(){return r}});var e=s(8876),t=s(4424);function p(n){const a=Object.assign({p:"p",span:"span",h2:"h2",a:"a"},(0,e.MN)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"Сниппетом называют небольшой блок, фрагмент кода, предназначенный для повторного\nиспользования. Современные текстовые редакторы зачастую содержат сниппеты для\nразных задач и языков программирования."),"\n",t.createElement(a.p,null,"Например, в LaTeX это такие конструкции как"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tex"><pre class="language-tex"><code class="language-tex"><span class="token function selector">\\begin</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span>\n<span class="token function selector">\\end</span><span class="token punctuation">{</span><span class="token keyword">document</span><span class="token punctuation">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"С подобными кусочками кода в emacs тоже не бывает проблем. Однако, что если вам\nне хочется при создании нового документа заполнять его\nстандартным содержимым? Не весть как интересно наполнять стартовые файлы LaTeX\nили HTML, не правда ли?"),"\n",t.createElement(a.p,null,"Для такого случая можно заранее подготовить необходимые файлы-сниппеты, а при создании\nнового документа просто вставлять их содержимое в буфер текстового редактора. И\nздесь не обойтись без написания какой-нибудь полезной функции на emacs lisp."),"\n",t.createElement(a.p,null,"Рассмотрим несколько несложных примеров."),"\n",t.createElement(a.h2,{id:"вставка-текста-прямо-из-функции",style:{position:"relative"}},t.createElement(a.a,{href:"#%D0%B2%D1%81%D1%82%D0%B0%D0%B2%D0%BA%D0%B0-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0-%D0%BF%D1%80%D1%8F%D0%BC%D0%BE-%D0%B8%D0%B7-%D1%84%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D0%B8","aria-label":"вставка текста прямо из функции permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Вставка текста прямо из функции"),"\n",t.createElement(a.p,null,"В случае постоянного использования одного и того же языка программирования\nзаготовочные файлы иметь вовсе не обязательно: можно получить нужную\nпоследовательность символов непосредственно из функции."),"\n",t.createElement(a.p,null,"Для этой нехитрой задачи воспользуемся командой вставки текста ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">insert</code>'}}),". В\nдвойных кавычках укажем нужный фрагмент кода.\nНапример:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lisp"><pre class="language-lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">newpy</span> <span class="token punctuation">(</span><span class="token arguments"></span><span class="token punctuation">)</span></span> <span class="token comment">; определить функцию newpy</span>\n  <span class="token string">"Create new python document"</span> <span class="token comment">; комментарий</span>\n  <span class="token punctuation">(</span><span class="token interactive keyword">interactive</span><span class="token punctuation">)</span> <span class="token comment">; работать интерактивно</span>\n  <span class="token comment">; вставить строки</span>\n  <span class="token punctuation">(</span><span class="token car">insert</span> <span class="token string">"#!/usr/bin/env python # -*<span class="token argument">-</span> coding: utf-8 -*-"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Теперь при нажатии ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">M-x</code>'}})," (после рестарта emacs) можно смело вводить имя только\nчто созданной функции и наблюдать, как указанный текст будет вставлен в текущем\nбуфере на той строке, где стоит курсор."),"\n",t.createElement(a.p,null,"Если читатель относит себя к любителям горячих сочетаний клавиш, он может также\nопределить заветную комбинацию для быстрого вызова функции:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lisp"><pre class="language-lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">global-set-key</span> <span class="token punctuation">(</span><span class="token car">kbd</span> <span class="token string">"C-c s"</span><span class="token punctuation">)</span> <span class="token quoted-symbol variable symbol">\'newpy</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"получение-текста-из-файла",style:{position:"relative"}},t.createElement(a.a,{href:"#%D0%BF%D0%BE%D0%BB%D1%83%D1%87%D0%B5%D0%BD%D0%B8%D0%B5-%D1%82%D0%B5%D0%BA%D1%81%D1%82%D0%B0-%D0%B8%D0%B7-%D1%84%D0%B0%D0%B9%D0%BB%D0%B0","aria-label":"получение текста из файла permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Получение текста из файла"),"\n",t.createElement(a.p,null,"Обратимся к иному методу получения данных: вставке из определённого\nфайла."),"\n",t.createElement(a.p,null,"Создадим функцию ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">newtex</code>'}}),", которая будет забирать данные из указанного файла при\nпомощи ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">insert-file-contents</code>'}}),". При необходимости строки будут разделены."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lisp"><pre class="language-lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token car">defun</span> newtex<span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token string">"Get data from the file ex.tex"</span>\n  <span class="token punctuation">(</span><span class="token interactive keyword">interactive</span><span class="token punctuation">)</span>\n    <span class="token comment">; вставить данные из файла ex.tex</span>\n    <span class="token punctuation">(</span><span class="token car">insert-file-contents</span> <span class="token string">"~/ex.tex"</span><span class="token punctuation">)</span>\n    <span class="token comment">; разделить строки</span>\n    <span class="token punctuation">(</span><span class="token car">split-string</span> <span class="token punctuation">(</span><span class="token car">buffer-string</span><span class="token punctuation">)</span> <span class="token string">"\\n"</span> <span class="token boolean">t</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Разделять строки совершенно необязательно: ведь заранее заготовленный сниппет уже\nприведён к соответствующему виду. Определить комбинацию клавиш можно так же, как\nэто уже было показано ранее."),"\n",t.createElement(a.p,null,"Теперь предлагается немного усовершенствовать функцию, дабы иметь возможность вставлять\nсодержимое из разных файлов в зависимости от переданного функции аргумента."),"\n",t.createElement(a.p,null,"В следующем примере даётся функция ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">snip</code>'}}),", которая принимает аргумент\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ext</code>'}}),". Она взаимодействует с пользователем, получает от него имя расширения\nфайла (аргумент) и открывает соответствующий ему файл. Для выбора файла\nиспользуется конструкция ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">if</code>'}}),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="lisp"><pre class="language-lisp"><code class="language-lisp"><span class="token punctuation">(</span><span class="token defun"><span class="token keyword">defun</span> <span class="token function">snip</span> <span class="token punctuation">(</span><span class="token arguments"><span class="token argument variable">ext</span></span><span class="token punctuation">)</span></span> <span class="token comment">; ожидает аргумента ext</span>\n  <span class="token string">"Get data from the file."</span>\n  <span class="token punctuation">(</span><span class="token interactive keyword">interactive</span> <span class="token string">"sExtension: "</span><span class="token punctuation">)</span> <span class="token comment">; приглашение для ввода строки</span>\n  <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token car">equal</span> ext <span class="token string">"html"</span><span class="token punctuation">)</span> <span class="token comment">; проверить на равенство</span>\n      <span class="token punctuation">(</span><span class="token car">insert-file-contents</span> <span class="token string">"~/ex.tex"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token car">equal</span> ext <span class="token string">"py"</span><span class="token punctuation">)</span>\n      <span class="token punctuation">(</span><span class="token car">insert-file-contents</span> <span class="token string">"~/ex.py"</span><span class="token punctuation">)</span>\n  <span class="token punctuation">)</span>\n  <span class="token comment">; если аргумента нет</span>\n  <span class="token punctuation">(</span><span class="token keyword">if</span> <span class="token boolean">nil</span> <span class="token punctuation">(</span><span class="token keyword">message</span> <span class="token string">"argument is nil"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Так, в несколько строчек кода вместилась весьма полезная функция, способная\nсделать работу с emacs ещё чуточку продуктивнее. Можно ли использовать для сегодняшней\nцели сторонние «фичи» emacs автору неведомо. Но нужны ли они, если и\nтак всё просто?"))}var c=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.MN)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},l=s(7792),o=s(7619);function u(n){var a,s;let{data:{mdx:e},children:p,pageContext:{prev:c,next:u}}=n;const{h1:r,title:i,description:k,image:g,table_of_contents:m}=e.frontmatter;return(0,t.useEffect)((()=>{(0,o.K)()}),[]),t.createElement(t.Fragment,null,t.createElement(l._W,{h1:r,title:i,description:k,image:null===(a=e.frontmatter.image)||void 0===a?void 0:a.publicURL},t.createElement(l.MV,{post:e.frontmatter,imageData:null==g||null===(s=g.childImageSharp)||void 0===s?void 0:s.gatsbyImageData},m?t.createElement(l.G8,{headings:e.tableOfContents}):null,t.createElement("div",{className:"page__content"},p,t.createElement(l.Mf,{prev:c,next:u})),t.createElement(l.QZ,null))))}function r(n){return t.createElement(u,n,t.createElement(c,n))}},8876:function(n,a,s){s.d(a,{MN:function(){return p}});var e=s(4424);const t=e.createContext({});function p(n){const a=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);