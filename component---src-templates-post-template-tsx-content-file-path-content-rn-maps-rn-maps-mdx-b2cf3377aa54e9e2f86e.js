"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[2792],{9408:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.Ss},default:function(){return p}});var a=t(8876),r=t(4424),l=t(3616);function i(e){const n=Object.assign({p:"p",strong:"strong",code:"code",pre:"pre",h2:"h2",a:"a",span:"span",ul:"ul",li:"li"},(0,a.MN)(),e.components);return r.createElement(r.Fragment,null,r.createElement(n.p,null,"Поговорим о том как можно использовать карты в приложении на RN бесплатно. О том какой ещё может быть структура\nкаталогов. Как можно сделать универсальный контейнер для компонентов. Чем могут быть полезны селекторы."),"\n",r.createElement(n.p,null,r.createElement(n.strong,null,"Структура каталогов"),". Как вариант - каждая фича (feature) в отдельной директории, чтобы не искать размазанные\nпо всему проекту файлы. Общие для всех только методы API. В нашем примере это директория ",r.createElement(n.code,null,"map"),"."),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-bash"},"$ tree src\nsrc\n├── modules\n│   └── map\n│       ├── MapContainer.tsx\n│       ├── MapScreen.tsx\n│       ├── MapView.tsx\n│       ├── types.ts\n│       ├── selectors.ts\n│       └── store.ts\n├── services\n│   └── api\n│       └── maps.ts\n└── store\n    └── index.ts\n")),"\n",r.createElement(n.p,null,"При использовании TypeScript сразу заведём типы данных в ",r.createElement(n.code,null,"types.ts"),":"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-ts"},"export interface IMarker {\n  i: number\n  latitude: number\n  longitude: number\n  active?: boolean\n  visited?: boolean\n}\n\nexport interface IRegion {\n  latitude: number\n  longitude: number\n  latitudeDelta: number\n  longitudeDelta: number\n}\n")),"\n",r.createElement(n.h2,{id:"вывод-карты",style:{position:"relative"}},r.createElement(n.a,{href:"#%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4-%D0%BA%D0%B0%D1%80%D1%82%D1%8B","aria-label":"вывод карты permalink",className:"anchor before"},r.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Вывод карты"),"\n",r.createElement(n.p,null,"Не стану углубляться в ",r.createElement(n.a,{href:"/posts/rn-toolkit/"},"настройку хранилища"),", подробный рассказ об этом уже был.\nВ исходной точке подключим само хранилище (store) и экран приложения с картой."),"\n",r.createElement(l.k,{headings:["App.tsx","MapScreen.tsx","MapContainer.tsx","MapView.tsx"]},r.createElement(l.s,null,r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"// App.tsx\nimport React from 'react'\nimport { Provider } from 'react-redux'\nimport { store } from './src/store'\nimport MapScreen from './src/modules/map/MapScreen'\n\nconst App = () => (\n  <Provider store={store}>\n    <MapScreen />\n  </Provider>\n)\n\nexport default App\n"))),r.createElement(l.s,null,r.createElement(n.p,null,"Экран может быть скомпонован из множества элементов и контейнеров как страница на вебе.\nВ данном случае используется лишь один контейнер с картой."),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"// MapScreen.tsx\nimport React from 'react'\nimport MapContainer from './MapContainer'\nimport MapView from './MapView'\n\nconst MapScreen = () => (\n  <MapContainer>\n    <MapView />\n  </MapContainer>\n)\n\nexport default MapScreen\n"))),r.createElement(l.s,null,r.createElement(n.p,null,"А вот и первый лайфхак. Если есть необходимость использовать универсальный\nконтейнер без привязки к конкретным компонентам (не наш случай, но всё же),\nможно опираться на ",r.createElement(n.a,{href:"/posts/react-render-props/"},"render-props")," или вообще\nсклонировать компонент, который будет передан контейнеру."),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"// MapContainer.tsx\nimport React, { ReactElement } from 'react'\n\ntype Props = {\n  children: ReactElement\n}\n\nconst MapContainer = ({ children }: Props) =>\n  <>{React.cloneElement(children, {})}</>\n\nexport default MapContainer\n"))),r.createElement(l.s,null,r.createElement(n.p,null,"Ставим библиотеку ",r.createElement(n.code,null,"react-native-maps"),":"),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-bash"},"$ yarn add react-native-maps; cd ios; pod install; cd ../\n")),r.createElement(n.ul,null,"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"initialRegion")," — координаты при инициализации карты"),"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"urlTemplate")," — для простейших нужд бесплатна карта OpenStreet"),"\n",r.createElement(n.li,null,r.createElement(n.strong,null,"tracksViewChanges")," — должен ли маркер отслеживать изменения, для лучшей производительности можно отключить"),"\n"),r.createElement(n.p,null,"Остальное должно быть понятно из кода. И пока обойдёмся тестовыми данными, чтобы скорее увидеть результат."),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"// MapView.tsx\nimport React from 'react'\nimport { StyleSheet, Dimensions } from 'react-native'\nimport Map, { UrlTile, Marker } from 'react-native-maps'\nimport { IRegion, IMarker } from './types'\n\nconst SCREEN_HEIGHT = Dimensions.get('window').height\nconst urlTemplate = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'\nconst REGION: IRegion = {\n  latitude: 59.9342802,\n  longitude: 30.3350986,\n  latitudeDelta: 0.5,\n  longitudeDelta: 0.5,\n}\nconst MARKERS: IMarker[] = [\n  {\n    i: 1421059,\n    latitude: 59.903967999999999,\n    longitude: 30.519534,\n  },\n  {\n    i: 1007126,\n    latitude: 59.930376000000003,\n    longitude: 30.353428999999998,\n  },\n  {\n    i: 1332648,\n    latitude: 59.839900999999998,\n    longitude: 30.350867000000001,\n  },\n]\n\nconst MapView = () => (\n  <Map initialRegion={REGION} style={styles.map}>\n    <UrlTile urlTemplate={urlTemplate} maximumZ={10} flipY={false} />\n    {MARKERS.map((marker: IMarker) => (\n      <Marker\n        key={`${marker.i}-${marker.active}`}\n        identifier={`${marker.i}`}\n        coordinate={{ latitude: marker.latitude, longitude: marker.longitude }}\n        tracksViewChanges={false}\n      />\n    ))}\n  </Map>\n)\n\nconst styles = StyleSheet.create({\n  map: {\n    width: '100%',\n    height: SCREEN_HEIGHT,\n  },\n})\n\nexport default MapView\n")))),"\n",r.createElement(n.p,null,"Смотрим\n",r.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1073px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 61.66666666666666%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/1453761a840ddb19bdf409bcb6e7b0a1/e93cc/rn-openstreet-map.webp 300w,\n/static/1453761a840ddb19bdf409bcb6e7b0a1/b0544/rn-openstreet-map.webp 600w,\n/static/1453761a840ddb19bdf409bcb6e7b0a1/81982/rn-openstreet-map.webp 1073w"\n              sizes="(max-width: 1073px) 100vw, 1073px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/1453761a840ddb19bdf409bcb6e7b0a1/eed55/rn-openstreet-map.png 300w,\n/static/1453761a840ddb19bdf409bcb6e7b0a1/7491f/rn-openstreet-map.png 600w,\n/static/1453761a840ddb19bdf409bcb6e7b0a1/ff858/rn-openstreet-map.png 1073w"\n            sizes="(max-width: 1073px) 100vw, 1073px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/1453761a840ddb19bdf409bcb6e7b0a1/ff858/rn-openstreet-map.png"\n            alt="RN OpenStreet Map"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\nПо поводу английского языка можно не волноваться — всегда будет\nвыбран язык, установленный в системе."),"\n",r.createElement(n.h2,{id:"смена-маркеров-при-прокрутке-карты",style:{position:"relative"}},r.createElement(n.a,{href:"#%D1%81%D0%BC%D0%B5%D0%BD%D0%B0-%D0%BC%D0%B0%D1%80%D0%BA%D0%B5%D1%80%D0%BE%D0%B2-%D0%BF%D1%80%D0%B8-%D0%BF%D1%80%D0%BE%D0%BA%D1%80%D1%83%D1%82%D0%BA%D0%B5-%D0%BA%D0%B0%D1%80%D1%82%D1%8B","aria-label":"смена маркеров при прокрутке карты permalink",className:"anchor before"},r.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Смена маркеров при прокрутке карты"),"\n",r.createElement(n.p,null,"Теперь представим, что у нас есть API, где при смене региона мы получаем новые данные.\nА вот если просто сдвигать область на карте, данные не меняются: API отдаёт весь внушительный\nсписок маркеров, что у него есть. Выводить сразу все маркеры нельзя — скажется\nна производетельности. В этом случае нас выручат селекторы."),"\n",r.createElement(l.k,{headings:["selectors.ts","store.ts","MapContainer.tsx","MapView.tsx"]},r.createElement(l.s,null,r.createElement(n.p,null,"Для рассчёта ближайших маркеров понадобится библиотека: например, ",r.createElement(n.code,null,"geolib"),"."),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-ts"},"// selectors.ts\nimport { createSelector } from 'reselect'\nimport { orderByDistance } from 'geolib'\nimport { RootState } from '../../store'\n\nconst MARKERS_LENGTH = 10\n\nconst stateSelector = (state: RootState) => state.maps\n// маркеры\nexport const mapEntitiesSelector = createSelector(stateSelector, item => item.mapEntities)\n// регион\nexport const mapRegionSelector = createSelector(stateSelector, item => item.region)\n// отслеживание процесса загрузки данных\nexport const mapLoadingSelector = createSelector(stateSelector, item => item.loading)\n\n// рассчёт ближайших маркеров на карте, отдавать 10 штук\n// при изменении региона или маркеров пересчитывается автоматически\nexport const mapMarkersSelector = createSelector(\n  [mapEntitiesSelector, mapRegionSelector],\n  (data, region) => {\n    if (Object.keys(region).length) {\n      return orderByDistance(region, data).slice(0, MARKERS_LENGTH)\n    }\n\n    return data.slice(0, MARKERS_LENGTH)\n  },\n)\n"))),r.createElement(l.s,null,r.createElement(n.pre,null,r.createElement(n.code,{className:"language-ts"},"// store.ts\nimport { createAsyncThunk, createSlice, isRejected } from '@reduxjs/toolkit'\nimport { getMapEntities } from '../../services/api/maps'\nimport { IMarker, IRegion } from './types'\n\nexport const fetchMapEntities = createAsyncThunk(\n  'maps/GET_MARKERS',\n  async () => await getMapEntities(),\n)\n\nconst LT_DEFAULT = 59.9342802\nconst LG_DEFAULT = 30.3350986\nconst REGION_DEFAULT = {\n  latitude: LT_DEFAULT,\n  longitude: LG_DEFAULT,\n  latitudeDelta: 0.1,\n  longitudeDelta: 0.1,\n}\n\nexport interface IState {\n  loading: boolean\n  region: IRegion\n  mapEntities: IMarker[]\n}\n\nconst initialState: IState = {\n  loading: false,\n  region: REGION_DEFAULT,\n  mapEntities: [],\n}\n\nconst mapsSlice = createSlice({\n  name: 'maps',\n  initialState,\n  reducers: {\n    // смена локации\n    changeRegion(state, action) {\n      state.region = action.payload\n    },\n  },\n  extraReducers: builder => {\n    builder\n      // загрузка данных\n      .addCase(fetchMapEntities.pending, state => {\n        state.loading = true\n      })\n      // получение данных\n      .addCase(fetchMapEntities.fulfilled, (state, action) => {\n        state.mapEntities = action.payload\n        state.loading = false\n      })\n      .addMatcher(isRejected, state => {\n        state.loading = false\n      })\n  },\n})\n\nexport default mapsSlice\n"))),r.createElement(l.s,null,r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"// MapContainer\nimport React, { useEffect, ReactElement, useCallback } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport mapsSlice, { fetchMapEntities } from './store'\nimport { mapLoadingSelector, mapMarkersSelector, mapRegionSelector } from './selectors'\nimport { IRegion } from './types'\n\nconst { changeRegion } = mapsSlice.actions\n\ntype Props = {\n  children: ReactElement\n}\n\nconst MapContainer = ({ children }: Props) => {\n  // забираем данные из хранилища\n  const dispatch = useDispatch()\n  const markers = useSelector(mapMarkersSelector)\n  const region = useSelector(mapRegionSelector)\n  const isLoading = useSelector(mapLoadingSelector)\n\n  const handleGetMapEntities = useCallback(\n    async () => await dispatch(fetchMapEntities()),\n    [dispatch],\n  )\n\n  // получить от карты точное местоположение и сохранить его\n  const onRegionChangeComplete = (coordinate: IRegion) => {\n    dispatch(changeRegion(coordinate))\n  }\n\n  /*\n    при посещении экрана дёргаем API один раз\n    можно проверять есть ли уже данные\n    или получать новые данные при смене локации\n    это остаётся на усмотрение читателя\n  */\n  useEffect(() => {\n    handleGetMapEntities()\n  }, [handleGetMapEntities])\n\n  // передать данные в дочерний компонент\n  const CloneChildren = React.cloneElement(children, {\n    markers,\n    region,\n    isLoading,\n    onRegionChangeComplete,\n  })\n\n  return <>{CloneChildren}</>\n}\n\nexport default MapContainer\n"))),r.createElement(l.s,null,r.createElement(n.p,null,"Теперь ",r.createElement(n.code,null,"MapView")," получает данные из контейнера и код компонента немного изменится\n(не буду приводить код полностью, не забудьте импортировать все компоненты из ",r.createElement(n.code,null,"react-native"),")."),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},'// MapView.tsx\ninterface Props {\n  markers: IMarker[]\n  region: IRegion\n  isLoading: boolean\n  onRegionChangeComplete: (region: IRegion) => void\n}\n\nconst MapView = ({\n  markers,\n  region,\n  isLoading,\n  onRegionChangeComplete,\n}: Props) => {\n  if (isLoading) {\n    return <ActivityIndicator size="large" />\n  }\n\n  return (\n    <Map\n      initialRegion={region}\n      style={styles.map}\n      onRegionChangeComplete={onRegionChangeComplete}\n      moveOnMarkerPress={false}\n      removeClippedSubviews>\n      <UrlTile urlTemplate={urlTemplate} maximumZ={10} flipY={false} />\n      {markers.map((marker: IMarker) => (\n        <Marker\n          key={`${marker.i}-${marker.active}`}\n          identifier={`${marker.i}`}\n          coordinate={{ latitude: marker.latitude, longitude: marker.longitude }}\n          tracksViewChanges={false}\n        />\n      ))}\n    </Map>\n  )\n}\n')))),"\n",r.createElement(n.p,null,"Для того, чтобы уменьшить время отклика и повысить производительность при перерисовке\nмаркеров, поставьте библиотеку ",r.createElement(n.code,null,"throttle-debounce"),". Код в ",r.createElement(n.code,null,"MapContainer"),"\nизменится таким образом:"),"\n",r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"// MapContainer.tsx\nimport { debounce } from 'throttle-debounce'\n// ...\n\nconst onRegionChangeComplete = debounce(500, (coordinate: IRegion) => {\n  dispatch(changeRegion(coordinate))\n})\n")),"\n",r.createElement(n.h2,{id:"состояние-маркеров",style:{position:"relative"}},r.createElement(n.a,{href:"#%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D0%B5-%D0%BC%D0%B0%D1%80%D0%BA%D0%B5%D1%80%D0%BE%D0%B2","aria-label":"состояние маркеров permalink",className:"anchor before"},r.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Состояние маркеров"),"\n",r.createElement(n.p,null,"Не упомнишь какие из маркеров были нажаты. Здорово было бы отражать их состояние: обычный,\nактивный или уже просмотренный. Как может выглядеть реализация?"),"\n",r.createElement(l.k,{headings:["MapContainer.tsx","MapView.tsx","store.ts"]},r.createElement(l.s,null,r.createElement(n.p,null,"Нам нужен новый экшен ",r.createElement(n.code,null,"setMarkerAction")," для манипулирования состоянием маркера.\nИмпортируем его из группы экшенов и отдадим дочернему компоненту."),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"// MapContainer.tsx\nimport mapsSlice, { fetchMapEntities } from './store'\nconst { changeRegion, setMarkerAction } = mapsSlice.actions\n\nconst MapContainer = ({ children }: Props) => {\n  // ...\n  const toggleMarker = (id: number | undefined) => {\n    dispatch(setMarkerAction({ id }))\n  }\n  // ...\n  const CloneChildren = React.cloneElement(children, {\n    markers,\n    region,\n    isLoading,\n    onRegionChangeComplete,\n    toggleMarker,\n  })\n}\n"))),r.createElement(l.s,null,r.createElement(n.p,null,"В дочернем компоненте определим цвета для разных состояний маркеров,\nа также разрешим нажимать маркер."),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-tsx"},"// MapView.tsx\n// ...\ninterface Props {\n  markers: IMarker[]\n  region: IRegion\n  isLoading: boolean\n  onRegionChangeComplete: (region: IRegion) => void\n  toggleMarker: (id: number) => void\n}\n\nconst switchColor = (item: IMarker) => {\n  if (item.active) return '#009a00'\n  if (item.visited) return '#adbce6'\n  return '#ff0040'\n}\n\nconst MapView = ({\n  markers,\n  region,\n  onRegionChangeComplete,\n  toggleMarker,\n  isLoading\n}: Props) => {\n  if (isLoading) {\n    return <ActivityIndicator size=\"large\" />\n  }\n\n  return (\n    <Map\n      initialRegion={region}\n      style={styles.map}\n      onRegionChangeComplete={onRegionChangeComplete}\n      moveOnMarkerPress={false}\n      removeClippedSubviews>\n      <UrlTile urlTemplate={urlTemplate} maximumZ={10} flipY={false} />\n      {markers.map((marker: IMarker) => {\n        const { latitude, longitude, i, active } = marker\n        const handlePress = () => {\n          toggleMarker(i)\n        }\n        const color = switchColor(marker)\n\n        return (\n          <Marker\n            key={`${i}-${active}`}\n            identifier={`${i}`}\n            coordinate={{ latitude, longitude }}\n            tracksViewChanges={false}\n            onPress={handlePress}\n            pinColor={color}\n          />\n        )\n      })}\n    </Map>\n  )\n}\n// ...\n"))),r.createElement(l.s,null,r.createElement(n.p,null,"Наконец, добавим редьюсер, содержащий логику смены состояния.\nРаботать это будет ровно до момента новой загрузки данных с сервера."),r.createElement(n.pre,null,r.createElement(n.code,{className:"language-ts"},"// store.ts\nexport interface IState {\n  // ...\n  lastActiveMarkerId: number\n}\n\nconst initialState: IState = {\n  // ...\n  lastActiveMarkerId: -1,\n}\n\nconst mapsSlice = createSlice({\n  // ...\n  reducers: {\n    setMarkerAction(state, action) {\n      const { id = -1 } = action.payload\n      // поиск индекса по id\n      const getMarkerIndex = (Id: number | undefined) =>\n        state.mapEntities.findIndex(marker => marker.i === Id)\n      let lastIndex = getMarkerIndex(state.lastActiveMarkerId)\n      const currentIndex = getMarkerIndex(id)\n\n      if (lastIndex !== -1) {\n        /* снять active с предыдущего маркера */\n        state.mapEntities[lastIndex].active = false\n        state.mapEntities[lastIndex].visited = true\n      }\n\n      // если передан id\n      if (id && currentIndex !== -1) {\n        state.lastActiveMarkerId = id\n        /* установить active текущему маркеру */\n        state.mapEntities[currentIndex].active = true\n        state.mapEntities[currentIndex].visited = false\n      }\n    }\n  }\n})\n")))),"\n",r.createElement(n.p,null,"Теперь маркеры меняют цвет в зависимости от того было по ним нажатие или нет."),"\n",r.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1071px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 48.33333333333333%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/788494078fd2c0006f0742a3db5d453a/e93cc/rn-markers.webp 300w,\n/static/788494078fd2c0006f0742a3db5d453a/b0544/rn-markers.webp 600w,\n/static/788494078fd2c0006f0742a3db5d453a/c84b4/rn-markers.webp 1071w"\n              sizes="(max-width: 1071px) 100vw, 1071px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/788494078fd2c0006f0742a3db5d453a/eed55/rn-markers.png 300w,\n/static/788494078fd2c0006f0742a3db5d453a/7491f/rn-markers.png 600w,\n/static/788494078fd2c0006f0742a3db5d453a/a29f5/rn-markers.png 1071w"\n            sizes="(max-width: 1071px) 100vw, 1071px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/788494078fd2c0006f0742a3db5d453a/a29f5/rn-markers.png"\n            alt="Maps Markers"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.MN)(),e.components);return n?r.createElement(n,e,r.createElement(i,e)):i(e)},o=t(7792),c=t(7619);function m(e){var n,t;let{data:{mdx:a},children:l,pageContext:{prev:i,next:s}}=e;const{h1:m,title:p,description:d,image:g,table_of_contents:u}=a.frontmatter;return(0,r.useEffect)((()=>{(0,c.K)()}),[]),r.createElement(r.Fragment,null,r.createElement(o._W,{h1:m,title:p,description:d,image:null===(n=a.frontmatter.image)||void 0===n?void 0:n.publicURL},r.createElement(o.MV,{post:a.frontmatter,imageData:null==g||null===(t=g.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},u?r.createElement(o.G8,{headings:a.tableOfContents}):null,r.createElement("div",{className:"page__content"},l,r.createElement(o.Mf,{prev:i,next:s})),r.createElement(o.QZ,null))))}function p(e){return r.createElement(m,e,r.createElement(s,e))}},8876:function(e,n,t){t.d(n,{MN:function(){return l}});var a=t(4424);const r=a.createContext({});function l(e){const n=a.useContext(r);return a.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);