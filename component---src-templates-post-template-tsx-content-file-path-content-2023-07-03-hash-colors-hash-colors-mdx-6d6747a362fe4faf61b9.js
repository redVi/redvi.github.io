"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[2312],{6320:function(n,s,a){a.r(s),a.d(s,{Head:function(){return l.Ss},default:function(){return r}});var t=a(8876),p=a(4424),o=a(3616);function e(n){const s=Object.assign({p:"p",span:"span"},(0,t.MN)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.p,null,"Задача: если не задано изображение, выводить первую букву имени и цвет для аватара. Примерно как\nв telegram или google. Палитра цветов задана. Чем меньше в ней цветов, тем больше их совпадений.\nКак вариант, можно генерировать цвета в ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">hsl</code>'}}),", управляя насыщенностью - то же самое, только тонко\nпалитрой управлять не получится, зато и коллизий меньше."),"\n",p.createElement(s.p,null,"Цвет не должен меняться рандомно, поэтому потребуется механизм «запоминания». Для этого будем получать простенький хэш из имени пользователя. А уже из него добывать цвет."),"\n",p.createElement(o.k,{headings:["palette.ts","getColorFromPalette.ts","Avatar.tsx"]},p.createElement(o.s,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// Палитра цветов</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> palette <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">\'#F79898\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#92D8FF\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#AFEE88\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#FCDA5D\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#8482FF\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#FF8946\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#B490FF\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#F6D86D\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#B8EB29\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#FF4B6C\'</span><span class="token punctuation">,</span>\n  <span class="token string">\'#80BDFF\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></div>'}})),p.createElement(o.s,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// Получаем значение из имени пользователя</span>\n<span class="token keyword">const</span> getHashOfString <span class="token operator">=</span> <span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    hash <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hash <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">-</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  hash <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> hash<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Приводим его к нужному диапазону</span>\n<span class="token keyword">const</span> normalizeHash <span class="token operator">=</span> <span class="token punctuation">(</span>hash<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> min<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> max<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=></span>\n  Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span>hash <span class="token operator">%</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> min<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Вынимаем из палитры один из цветов</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getColorFromPalette</span> <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> palette<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n  palette<span class="token punctuation">[</span><span class="token function">normalizeHash</span><span class="token punctuation">(</span><span class="token function">getHashOfString</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> palette<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span></code></pre></div>'}})),p.createElement(o.s,null,p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> memo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Image<span class="token punctuation">,</span> Text<span class="token punctuation">,</span> View<span class="token punctuation">,</span> StyleSheet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getColorFromPalette <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./getColorFromPalette\'</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> palette <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./palette\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">interface</span> <span class="token class-name">IAvatar</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  sizes<span class="token operator">?</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    width<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n    height<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n  radius<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>\n  source<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>\n  extraStyles<span class="token operator">?</span><span class="token operator">:</span> object<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  image<span class="token operator">:</span> <span class="token punctuation">{</span>\n    resizeMode<span class="token operator">:</span> <span class="token string">\'cover\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  avatar<span class="token operator">:</span> <span class="token punctuation">{</span>\n    backgroundColor<span class="token operator">:</span> <span class="token string">\'#FD6B6F\'</span><span class="token punctuation">,</span>\n    alignItems<span class="token operator">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n    justifyContent<span class="token operator">:</span> <span class="token string">\'center\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  text<span class="token operator">:</span> <span class="token punctuation">{</span>\n    color<span class="token operator">:</span> <span class="token string">\'white\'</span><span class="token punctuation">,</span>\n    fontWeight<span class="token operator">:</span> <span class="token string">\'bold\'</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">/* Принимает в качестве аргументов:\n  source - адрес изображения\n  sizes  - размеры аватара\n  radius - радиус углов\n  name   - имя пользователя\n  extraStyles - возможность внешней стилизации\n*/</span>\n<span class="token keyword">const</span> Avatar<span class="token operator">:</span> React<span class="token punctuation">.</span><span class="token constant">FC</span><span class="token operator">&lt;</span>IAvatar<span class="token operator">></span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  source <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n  sizes <span class="token operator">=</span> <span class="token punctuation">{</span> width<span class="token operator">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span> height<span class="token operator">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  radius <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>\n  name <span class="token operator">=</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n  extraStyles <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> userName <span class="token operator">=</span> name <span class="token operator">?</span> name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">?.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">\'A\'</span><span class="token punctuation">;</span>\n  <span class="token comment">// размер шрифта зависит от размера аватара</span>\n  <span class="token keyword">const</span> textSize <span class="token operator">=</span> sizes <span class="token operator">&amp;&amp;</span> sizes<span class="token punctuation">.</span>height <span class="token operator">?</span> sizes<span class="token punctuation">.</span>height <span class="token operator">/</span> <span class="token number">1.5</span> <span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> source <span class="token operator">?</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Image</span></span>\n      <span class="token attr-name">source</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">uri</span><span class="token operator">:</span> source <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>image<span class="token punctuation">,</span> sizes<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> radius <span class="token punctuation">}</span><span class="token punctuation">,</span> extraStyles<span class="token punctuation">]</span><span class="token punctuation">}</span></span>\n    <span class="token punctuation">/></span></span>\n  <span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span>\n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>\n        styles<span class="token punctuation">.</span>avatar<span class="token punctuation">,</span>\n        sizes<span class="token punctuation">,</span>\n        <span class="token punctuation">{</span>\n          <span class="token literal-property property">borderRadius</span><span class="token operator">:</span> radius<span class="token punctuation">,</span>\n          <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token function">getColorFromPalette</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> palette<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token string">\'#FD6B6F\'</span><span class="token punctuation">,</span>\n        <span class="token punctuation">}</span><span class="token punctuation">,</span>\n        extraStyles<span class="token punctuation">,</span>\n      <span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>text<span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token literal-property property">fontSize</span><span class="token operator">:</span> textSize <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token punctuation">{</span>userName<span class="token punctuation">}</span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\nAvatar<span class="token punctuation">.</span>displayName <span class="token operator">=</span> <span class="token string">\'Avatar\'</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">memo</span><span class="token punctuation">(</span>Avatar<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></div>'}}))),"\n",p.createElement(s.p,null,"Код компонента написан для React Native, но изменить его несложно."))}var c=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.MN)(),n.components);return s?p.createElement(s,n,p.createElement(e,n)):e(n)},l=a(7792),u=a(7619);function k(n){var s,a;let{data:{mdx:t},children:o,pageContext:{prev:e,next:c}}=n;const{h1:k,title:r,description:i,image:m,table_of_contents:g}=t.frontmatter;return(0,p.useEffect)((()=>{(0,u.K)()}),[]),p.createElement(p.Fragment,null,p.createElement(l._W,{h1:k,title:r,description:i,image:null===(s=t.frontmatter.image)||void 0===s?void 0:s.publicURL},p.createElement(l.MV,{post:t.frontmatter,imageData:null==m||null===(a=m.childImageSharp)||void 0===a?void 0:a.gatsbyImageData},g?p.createElement(l.G8,{headings:t.tableOfContents}):null,p.createElement("div",{className:"page__content"},o,p.createElement(l.Mf,{prev:e,next:c})),p.createElement(l.QZ,null))))}function r(n){return p.createElement(k,n,p.createElement(c,n))}},8876:function(n,s,a){a.d(s,{MN:function(){return o}});var t=a(4424);const p=t.createContext({});function o(n){const s=t.useContext(p);return t.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);