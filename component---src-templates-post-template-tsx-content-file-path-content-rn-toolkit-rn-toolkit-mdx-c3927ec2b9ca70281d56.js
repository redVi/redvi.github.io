"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[828],{9264:function(n,s,a){a.r(s),a.d(s,{Head:function(){return l.Ss},default:function(){return r}});var t=a(8876),p=a(4424),e=a(8860);function o(n){const s=Object.assign({p:"p",ul:"ul",li:"li",strong:"strong",span:"span",h2:"h2",a:"a"},(0,t.MN)(),n.components);return p.createElement(p.Fragment,null,p.createElement(s.p,null,"О том как использовать стейт-менеджер для хранения состояния в приложении и как\nхранить данные между его перезапусками."),"\n",p.createElement(s.p,null,"На самом деле также как на вебе за исключением одного нюанса — в React Native\nиспользуется AsyncStorage в качестве хранилища постоянных данных (между перезапуском)."),"\n",p.createElement(s.p,null,"Сегодняшние гости:"),"\n",p.createElement(s.ul,null,"\n",p.createElement(s.li,null,p.createElement(s.strong,null,"Immer"),": иммутабельность без боли"),"\n",p.createElement(s.li,null,p.createElement(s.strong,null,"AsyncStorage"),": аналог LocalStorage на вебе"),"\n",p.createElement(s.li,null,p.createElement(s.strong,null,"Redux Toolkit"),": все часто используемые пакеты redux в одном месте"),"\n",p.createElement(s.li,null,p.createElement(s.strong,null,"TypeScript"),": типизация для удобства поиска и отладки"),"\n"),"\n",p.createElement(s.p,null,"Redux Toolkit уже использует immer, поэтому отдельно его ставить не придётся.\nВсё, что необходимо установить одной командой:"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">yarn</span> <span class="token function">add</span> @react-native-async-storage/async-storage <span class="token punctuation">\\</span>\n@reduxjs/toolkit react-redux redux redux-persist</code></pre></div>'}}),"\n",p.createElement(s.p,null,"Структура приложения, если решите поэкспериментировать:"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="text"><pre class="language-text"><code class="language-text">.\n├── android\n├── ios\n├── src\n│   ├── screens\n│   │   └── PostsScreen.tsx\n│   ├── services\n│   │   └── api\n│   │       ├── fetch.ts\n│   │       └── posts.ts\n│   └── store\n│       ├── blog.ts\n│       └── index.ts\n├── App.tsx\n└── index.js</code></pre></div>'}}),"\n",p.createElement(s.h2,{id:"api",style:{position:"relative"}},p.createElement(s.a,{href:"#api","aria-label":"api permalink",className:"anchor before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"API"),"\n",p.createElement(s.p,null,"React Native поддерживает такие библиотеки как ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">axios</code>'}}),", но в этой заметке\nпопробуем обойтись стандартным ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fetch</code>'}}),", доступным всегда. Чтобы было удобнее\nим пользоваться, создадим для него небольшую обёртку с реализацией\nтипичных методов."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// services/api/fetch.ts</span>\n<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">http</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> config<span class="token operator">:</span> RequestInit<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> request <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> config<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>response<span class="token punctuation">.</span>ok<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// для примера просто текст, при желании доработать и возвращать ответ сервера</span>\n    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>statusText<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// во избежание ошибки вернуть пустой объект если нет тела</span>\n  <span class="token keyword">return</span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// get-запрос</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> config<span class="token operator">?</span><span class="token operator">:</span> RequestInit<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token punctuation">{</span> method<span class="token operator">:</span> <span class="token string">\'get\'</span><span class="token punctuation">,</span> <span class="token operator">...</span>config <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">http</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> init<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// post-запрос</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">post</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> config<span class="token operator">?</span><span class="token operator">:</span> RequestInit<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token punctuation">{</span> method<span class="token operator">:</span> <span class="token string">\'post\'</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>config <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">http</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> init<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// и put-запрос</span>\n<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token generic-function"><span class="token function">put</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token punctuation">,</span> <span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>path<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span> config<span class="token operator">?</span><span class="token operator">:</span> RequestInit<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> init <span class="token operator">=</span> <span class="token punctuation">{</span> method<span class="token operator">:</span> <span class="token string">\'put\'</span><span class="token punctuation">,</span> body<span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>config <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> <span class="token keyword">await</span> <span class="token generic-function"><span class="token function">http</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token constant">U</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> init<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"Теперь напишем один из запросов с использванием этой обёртки. Не вдаваясь глубоко\nв детали, без учёта типов ошибок для TS:"),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// services/api/posts.ts</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> fetch <span class="token keyword">from</span> <span class="token string">\'./fetch\'</span>\n\n<span class="token comment">// структура JSON-ответа: что ожидаем получить</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">ResponseBodyPostById</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">number</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span>\n  body<span class="token operator">:</span> <span class="token builtin">string</span>\n  userId<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// передавать id, получать ответ типа ResponseBodyPostById</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">getPostById</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">await</span> fetch\n    <span class="token punctuation">.</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span>ResponseBodyPostById<span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://jsonplaceholder.typicode.com/posts/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.h2,{id:"storage",style:{position:"relative"}},p.createElement(s.a,{href:"#storage","aria-label":"storage permalink",className:"anchor before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Storage"),"\n",p.createElement(s.p,null,"Одна из возможных частей хранилища: записи блога. Функция ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">createSlice</code>'}})," помогает\nне допускать бойлерплейта, который обязательно появится в коде при использовании\n«голого» redux."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// store/blog.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createAsyncThunk<span class="token punctuation">,</span> createSlice<span class="token punctuation">,</span> isRejected <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@reduxjs/toolkit\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getPostById <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../services/api/posts\'</span>\n\n<span class="token comment">// какие поля содержит тело поста</span>\n<span class="token keyword">interface</span> <span class="token class-name">IPost</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token builtin">number</span>\n  title<span class="token operator">:</span> <span class="token builtin">string</span>\n  body<span class="token operator">:</span> <span class="token builtin">string</span>\n  userId<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// структура хранилища для блога: список постов</span>\n<span class="token keyword">interface</span> <span class="token class-name">IState</span> <span class="token punctuation">{</span>\n  posts<span class="token operator">:</span> IPost<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  loading<span class="token operator">:</span> Boolean\n<span class="token punctuation">}</span>\n\n<span class="token comment">// тип для redux-thunk</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IThunkConfig</span> <span class="token punctuation">{</span>\n  state<span class="token operator">:</span> IState\n<span class="token punctuation">}</span>\n\n<span class="token comment">// инициализация хранилища по-умолчанию</span>\n<span class="token keyword">const</span> initialState<span class="token operator">:</span> IState <span class="token operator">=</span> <span class="token punctuation">{</span>\n  posts<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// асинхронный метод thunk</span>\n<span class="token comment">// дёргает getPostById и получает ответ</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> fetchPostById <span class="token operator">=</span> <span class="token function">createAsyncThunk</span><span class="token punctuation">(</span>\n  <span class="token string">\'blog/post\'</span><span class="token punctuation">,</span>\n  <span class="token keyword">async</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">getPostById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n\n<span class="token comment">// создать часть хранилища</span>\n<span class="token keyword">const</span> blogSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'blog\'</span><span class="token punctuation">,</span> <span class="token comment">// название</span>\n  initialState<span class="token punctuation">,</span> <span class="token comment">// начальное состояние</span>\n  reducers<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// обычные методы</span>\n  <span class="token comment">// асинхронные методы</span>\n  <span class="token function-variable function">extraReducers</span><span class="token operator">:</span> builder <span class="token operator">=></span> <span class="token punctuation">{</span>\n    builder\n      <span class="token comment">// активировать статус loading при отправке запроса</span>\n      <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>fetchPostById<span class="token punctuation">.</span>pending<span class="token punctuation">,</span> state <span class="token operator">=></span> <span class="token punctuation">{</span>\n        state<span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token comment">// что делать при успешном разрешении промиса</span>\n      <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>fetchPostById<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        state<span class="token punctuation">.</span>posts<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>action<span class="token punctuation">.</span>payload<span class="token punctuation">)</span>\n        state<span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token comment">// что делать при ошибке</span>\n      <span class="token punctuation">.</span><span class="token function">addMatcher</span><span class="token punctuation">(</span>isRejected<span class="token punctuation">,</span> state <span class="token operator">=></span> <span class="token punctuation">{</span>\n        state<span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token comment">// что делать по-умолчанию</span>\n      <span class="token punctuation">.</span><span class="token function">addDefaultCase</span><span class="token punctuation">(</span>state <span class="token operator">=></span> state<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> blogSlice</code></pre></div>'}}),"\n",p.createElement(s.p,null,"Осталось настроить связку Redux + AsyncStorage."),"\n",p.createElement(e.y,null,p.createElement(s.p,null,"Для приложения на React Native следует использовать AsyncStorage.\nДля веба импортировать и использовать ",p.createElement("code",null,"storage"),":\n",p.createElement("br"),p.createElement("code",null,"import storage from 'redux-persist/lib/storage'")," ")),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// store/index.ts</span>\n<span class="token keyword">import</span> AsyncStorage <span class="token keyword">from</span> <span class="token string">\'@react-native-async-storage/async-storage\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@reduxjs/toolkit\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  persistReducer<span class="token punctuation">,</span>\n  persistStore<span class="token punctuation">,</span>\n  <span class="token constant">FLUSH</span><span class="token punctuation">,</span>\n  <span class="token constant">PAUSE</span><span class="token punctuation">,</span>\n  <span class="token constant">PERSIST</span><span class="token punctuation">,</span>\n  <span class="token constant">PURGE</span><span class="token punctuation">,</span>\n  <span class="token constant">REGISTER</span><span class="token punctuation">,</span>\n  <span class="token constant">REHYDRATE</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-persist\'</span>\n<span class="token keyword">import</span> blogSlice <span class="token keyword">from</span> <span class="token string">\'./blog\'</span>\n\n<span class="token comment">// объединение всех частей хранилища</span>\n<span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span> blog<span class="token operator">:</span> blogSlice<span class="token punctuation">.</span>reducer <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// конфигурация для redux-persist</span>\n<span class="token keyword">const</span> persistConfig <span class="token operator">=</span> <span class="token punctuation">{</span>\n  key<span class="token operator">:</span> <span class="token string">\'App\'</span><span class="token punctuation">,</span>\n  version<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  storage<span class="token operator">:</span> AsyncStorage<span class="token punctuation">,</span> <span class="token comment">// только для React Native</span>\n  whitelist<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">\'blog\'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>   <span class="token comment">// белый список: какую часть store хранить</span>\n  <span class="token comment">// blacklist: [\'blog\'],</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> persistedReducer <span class="token operator">=</span> <span class="token function">persistReducer</span><span class="token punctuation">(</span>persistConfig<span class="token punctuation">,</span> rootReducer<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  reducer<span class="token operator">:</span> persistedReducer<span class="token punctuation">,</span>\n  <span class="token function-variable function">middleware</span><span class="token operator">:</span> getDefaultMiddleware <span class="token operator">=></span> <span class="token punctuation">[</span>\n    <span class="token operator">...</span><span class="token function">getDefaultMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n      serializableCheck<span class="token operator">:</span> <span class="token punctuation">{</span>\n        ignoredActions<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token constant">FLUSH</span><span class="token punctuation">,</span> <span class="token constant">PAUSE</span><span class="token punctuation">,</span> <span class="token constant">PERSIST</span><span class="token punctuation">,</span> <span class="token constant">PURGE</span><span class="token punctuation">,</span> <span class="token constant">REGISTER</span><span class="token punctuation">,</span> <span class="token constant">REHYDRATE</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">,</span>\n  devTools<span class="token operator">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">NODE_ENV</span> <span class="token operator">!==</span> <span class="token string">\'production\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> persistor <span class="token operator">=</span> <span class="token function">persistStore</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"Для типизации (и удобного автокомплита) redux-хуков придётся\nлибо каждый раз указывать тип, либо ",p.createElement(s.a,{href:"https://redux.js.org/usage/usage-with-typescript#define-root-state-and-dispatch-types",target:"_blank",rel:"nofollow"},"единожды прописать типы"),"\nв кастомных функциях ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useAppDispatch/useAppSelector</code>'}})," и пользоваться ими."),"\n",p.createElement(s.p,null,"Выглядит так себе, но есть лайфхак: декларация модуля ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">react-redux</code>'}}),". Стейт по-умолчанию\nдолжен наследовать наш собственный рутовый стейт."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// store/index.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> persistor <span class="token operator">=</span> <span class="token function">persistStore</span><span class="token punctuation">(</span>store<span class="token punctuation">)</span>\n\n<span class="token comment">// в конец добавить всего пару строк: тип стейта</span>\n<span class="token keyword">export</span> <span class="token keyword">type</span> <span class="token class-name">RootState</span> <span class="token operator">=</span> ReturnType<span class="token operator">&lt;</span><span class="token keyword">typeof</span> store<span class="token punctuation">.</span>getState<span class="token operator">></span>\n\n<span class="token comment">// и декларацию модуля</span>\n<span class="token keyword">declare</span> <span class="token keyword">module</span> <span class="token string">\'react-redux\'</span> <span class="token punctuation">{</span>\n  <span class="token keyword">interface</span> <span class="token class-name">DefaultRootState</span> <span class="token keyword">extends</span> <span class="token class-name">RootState</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(s.p,null,"В этом случае всё тоже работает как ожидается и без кастомных хуков."),"\n",p.createElement(s.h2,{id:"screen",style:{position:"relative"}},p.createElement(s.a,{href:"#screen","aria-label":"screen permalink",className:"anchor before"},p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Screen"),"\n",p.createElement(s.p,null,"Всё готово. Получим ответ от API и выведем первый пост. Для упрощения селекторы\nпишу прямо в теле скрина, но в реальности лучше выносить их отдельно."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// screens/PostsScreen.tsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Text<span class="token punctuation">,</span> TouchableOpacity<span class="token punctuation">,</span> View <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch<span class="token punctuation">,</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> fetchPostById <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../store/blog\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">PostsScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// получить из хранилища необходимые данные</span>\n  <span class="token keyword">const</span> posts <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>state <span class="token operator">=></span> state<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>posts<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>state <span class="token operator">=></span> state<span class="token punctuation">.</span>blog<span class="token punctuation">.</span>loading<span class="token punctuation">)</span>\n\n  <span class="token comment">// дёрнуть fetchPostById</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">loadPosts</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchPostById</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">// пока промис не разрешился выводить прелоадер</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ActivityIndicator</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>large<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">TouchableOpacity</span></span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>loadPosts<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">Take a post</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">TouchableOpacity</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>posts<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">{</span> title<span class="token punctuation">,</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">fontWeight</span><span class="token operator">:</span> <span class="token string">\'bold\'</span> <span class="token punctuation">}</span><span class="token punctuation">}</span></span> <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>id<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Text</span></span><span class="token punctuation">></span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">View</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> PostsScreen</code></pre></div>'}}),"\n",p.createElement(s.p,null,"А в точке входа приложения (что это будет за точка и где зависит от навигации, если она используется)\nподключить сконфигурированные ранее ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">store</code>'}})," (хранение в приложении) и ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">persistor</code>'}})," (хранение между сессиями)."),"\n",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// App.tsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> SafeAreaView<span class="token punctuation">,</span> ScrollView<span class="token punctuation">,</span> StatusBar <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> PersistGate <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-persist/integration/react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> store<span class="token punctuation">,</span> persistor <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./src/store\'</span>\n<span class="token keyword">import</span> PostsScreen <span class="token keyword">from</span> <span class="token string">\'./src/screens/PostsScreen\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ScrollView</span></span> <span class="token attr-name">contentInsetAdjustmentBehavior</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>automatic<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PersistGate</span></span> <span class="token attr-name">persistor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>persistor<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n          </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">PostsScreen</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">PersistGate</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ScrollView</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">SafeAreaView</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre></div>'}}),"\n",p.createElement(s.p,null,"Теперь части хранилища, добавленные в ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">whitelist</code>'}}),", будут обрабатываться ",p.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">redux-persist</code>'}}),"\nи оставаться в приложении так долго как это будет нужно. Остальное как обычно в redux."))}var c=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.MN)(),n.components);return s?p.createElement(s,n,p.createElement(o,n)):o(n)},l=a(7792),u=a(7619);function k(n){var s,a;let{data:{mdx:t},children:e,pageContext:{prev:o,next:c}}=n;const{h1:k,title:r,description:i,image:d,table_of_contents:g}=t.frontmatter;return(0,p.useEffect)((()=>{(0,u.K)()}),[]),p.createElement(p.Fragment,null,p.createElement(l._W,{h1:k,title:r,description:i,image:null===(s=t.frontmatter.image)||void 0===s?void 0:s.publicURL},p.createElement(l.MV,{post:t.frontmatter,imageData:null==d||null===(a=d.childImageSharp)||void 0===a?void 0:a.gatsbyImageData},g?p.createElement(l.G8,{headings:t.tableOfContents}):null,p.createElement("div",{className:"page__content"},e,p.createElement(l.Mf,{prev:o,next:c})),p.createElement(l.QZ,null))))}function r(n){return p.createElement(k,n,p.createElement(c,n))}},8860:function(n,s,a){a.d(s,{y:function(){return t.y}});var t=a(3836)},8876:function(n,s,a){a.d(s,{MN:function(){return e}});var t=a(4424);const p=t.createContext({});function e(n){const s=t.useContext(p);return t.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);