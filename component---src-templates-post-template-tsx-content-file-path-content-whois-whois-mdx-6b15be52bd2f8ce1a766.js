"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[4128],{1310:function(n,s,a){a.r(s),a.d(s,{Head:function(){return l.Ss},default:function(){return r}});var t=a(8876),e=a(4424);function p(n){const s=Object.assign({p:"p",em:"em",span:"span",blockquote:"blockquote",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",ul:"ul",li:"li"},(0,t.MN)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"WHOIS представляет собой сетевой протокол прикладного уровня, базирующийся на\nпротоколе TCP (и использующий порт ",e.createElement(s.em,null,"43"),"). По бо́льшей части применяется для получения\nрегистрационных данных о доменных именах: дате регистрации домена, информации о\nвладельце, регистраторе и прочем."),"\n",e.createElement(s.p,null,"В unix-like системах есть одноимённая утилита, позволяющая быстро получить\nискомые сведения. В частности для пользователей gentoo linux процесс её\nустановки будет выглядеть следующим образом:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ eix whois\n* net-misc/whois\n     Available versions:  <span class="token number">5.0</span>.11^t <span class="token punctuation">{</span>iconv idn nls<span class="token punctuation">}</span>\n     Homepage:            http://www.linux.it/~md/software/\n     Description:         improved Whois Client\n<span class="token comment"># emerge -pav net-misc/whois</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Тем, кому любопытно сделать свой вариант клиента whois, посвящается этот пост. Для\nнаписания подобной вещи предлагается использовать python3."),"\n",e.createElement(s.p,null,"Для начала нужно импортировать необходимые модули и сделать проверку установленной\nверсии python, поскольку во второй и третьей версии различаются некоторые типы данных:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment">#!/usr/bin/env python</span>\n<span class="token comment"># -*- coding: utf-8 -*-</span>\n\n<span class="token keyword">import</span> socket<span class="token punctuation">,</span> sys\n\n<span class="token comment"># если версия python ниже 3</span>\n<span class="token comment"># вывести сообщение и закрыть программу</span>\n<span class="token keyword">if</span> sys<span class="token punctuation">.</span>version <span class="token operator">&lt;</span> <span class="token string">\'3.0\'</span><span class="token punctuation">:</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"You need install python3"</span><span class="token punctuation">)</span>\n    sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Дальше следует функция, которая будет отправлять запрос на сервер и принимать\nответ. Здесь используется модуль ",e.createElement(s.em,null,"socket"),". Он предоставляет доступ к\nстандартному интерфейсу сокетов BSD (изначально разрабатывался для UNIX)."),"\n",e.createElement(s.blockquote,null,"\n",e.createElement(s.p,null,"Модуль ",e.createElement(s.em,null,"socket")," является низкоуровневым и в ряде случаев проще использовать\nфункции из пакета ",e.createElement(s.em,null,"urllib"),"."),"\n"),"\n",e.createElement(s.p,null,"При работе с ",e.createElement(s.em,null,"socket")," часто требуется указать семейство адресов и тип\nсокета. Для нашей небольшой программы важен протокол IPv4 (AF_INET). Типы\nсокетов представлены в таблице:"),"\n",e.createElement(s.table,null,e.createElement(s.thead,null,e.createElement(s.tr,null,e.createElement(s.th,null,"константа"),e.createElement(s.th,null,"описание"))),e.createElement(s.tbody,null,e.createElement(s.tr,null,e.createElement(s.td,null,"SOCK_STREAM"),e.createElement(s.td,null,"поток байтов, обеспечивающий надёжность передачи данных (TCP)")),e.createElement(s.tr,null,e.createElement(s.td,null,"SOCK_DGRAM"),e.createElement(s.td,null,"дейтаграммы (UDP)")),e.createElement(s.tr,null,e.createElement(s.td,null,"SOCK_RAW"),e.createElement(s.td,null,"простой сокет")),e.createElement(s.tr,null,e.createElement(s.td,null,"SOCK_RDM"),e.createElement(s.td,null,"дейтаграммы с надёжной доставкой")))),"\n",e.createElement(s.p,null,"Для интернет-приложений, использующих IPv4, адреса определяются в виде кортежа\n",e.createElement(s.em,null,"(host, port)"),":"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token punctuation">(</span><span class="token string">\'www.yandex.ru\'</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"В блоке кода, представленном ниже, мы воспользуемся этим, чтобы соединиться с\nсервером. Для создания нового сокета понадобится употребить одну из функций\nмодуля ",e.createElement(s.em,null,"socket")," с таким же названием: ",e.createElement(s.em,null,"socket"),"."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python">socket<span class="token punctuation">(</span>family<span class="token punctuation">,</span> <span class="token builtin">type</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> proto<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"где"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.em,null,"family")," — определяет семейство адресов;"),"\n",e.createElement(s.li,null,e.createElement(s.em,null,"type")," — тип сокета;"),"\n",e.createElement(s.li,null,e.createElement(s.em,null,"proto")," — аргумент с именем протокола (обычно не передаётся)."),"\n"),"\n",e.createElement(s.p,null,"Сокеты представлены экземплярами класса ",e.createElement(s.em,null,"SocketType")," и обладают следующими\nметодами:"),"\n",e.createElement(s.table,null,e.createElement(s.thead,null,e.createElement(s.tr,null,e.createElement(s.th,null,"метод"),e.createElement(s.th,null,"описание"))),e.createElement(s.tbody,null,e.createElement(s.tr,null,e.createElement(s.td,null,"connect"),e.createElement(s.td,null,"устанавливает соединение с удалённым узлом")),e.createElement(s.tr,null,e.createElement(s.td,null,"recv"),e.createElement(s.td,null,"принимает данные из сокета (макс. объём данных определяется аргументом bufsize)")),e.createElement(s.tr,null,e.createElement(s.td,null,"send"),e.createElement(s.td,null,"посылает данные через сетевое соединение, возвращает кол-во отправленных данных")),e.createElement(s.tr,null,e.createElement(s.td,null,"close"),e.createElement(s.td,null,"закрывает соединение")))),"\n",e.createElement(s.p,null,"Исходя из сказанного выше, читателю должен быть понятен следующий блок кода:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">run_whois</span><span class="token punctuation">(</span>server<span class="token punctuation">,</span> query<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># создать TCP-socket (IPv4)</span>\n    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>\n    <span class="token comment"># соединиться с сервером (\'host\', port)</span>\n    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>server <span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># отправить запрос на сервер</span>\n    <span class="token comment"># s.send(query + \'\\r\\n\') # для python2</span>\n    s<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> <span class="token string">\'utf-8\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b\'\\r\\n\'</span><span class="token punctuation">)</span>\n    msg <span class="token operator">=</span> <span class="token string">\'\'</span>\n    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">:</span>\n        <span class="token comment"># получить данные от сервера</span>\n        <span class="token comment"># receive_data = s.recv(100) # для python2</span>\n        receive_data <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">\'utf-8\'</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>receive_data <span class="token operator">==</span> <span class="token string">\'\'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">break</span><span class="token punctuation">;</span>\n        msg <span class="token operator">=</span> msg <span class="token operator">+</span> receive_data\n    <span class="token keyword">return</span> msg</code></pre></div>'}}),"\n",e.createElement(s.p,null,"Следующая функция позволит получить данные от сервера whois-регистратора и\nобработать их."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>domain<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># получить объект(имя домена)</span>\n    <span class="token comment"># если введено http или www</span>\n    <span class="token comment"># перед именем домена, убрать их</span>\n    domain <span class="token operator">=</span> domain<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">\'http://\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n    domain <span class="token operator">=</span> domain<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">\'www.\'</span><span class="token punctuation">,</span> <span class="token string">\'\'</span><span class="token punctuation">)</span>\n\n    <span class="token comment"># получить доменную зону</span>\n    ext <span class="token operator">=</span> domain<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">\'.\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>\n\n    <span class="token comment"># обращаться к соответствующему whois-серверу зоны</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>ext <span class="token operator">==</span> <span class="token string">\'org\'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        whois <span class="token operator">=</span> <span class="token string">\'whois.pir.org\'</span>\n    <span class="token keyword">elif</span> <span class="token punctuation">(</span>ext <span class="token operator">==</span> <span class="token string">\'ru\'</span> <span class="token keyword">or</span> ext <span class="token operator">==</span> <span class="token string">\'su\'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        whois <span class="token operator">=</span> <span class="token string">\'whois.tcinet.ru\'</span>\n    <span class="token keyword">else</span><span class="token punctuation">:</span>\n        whois <span class="token operator">=</span> <span class="token string">\'whois.iana.org\'</span> <span class="token comment"># сообщение для иных доменных зон</span>\n\n    <span class="token comment"># получить ответ от регистратора</span>\n    <span class="token comment"># (whois-server, имя домена)</span>\n    msg <span class="token operator">=</span> run_whois<span class="token punctuation">(</span>whois<span class="token punctuation">,</span> domain<span class="token punctuation">)</span>\n\n    lines <span class="token operator">=</span> msg<span class="token punctuation">.</span>splitlines<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># разбиваем текст на сроки</span>\n    <span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>              <span class="token comment"># итерация по строкам</span>\n        <span class="token keyword">if</span> <span class="token string">\':\'</span> <span class="token keyword">in</span> line<span class="token punctuation">:</span>             <span class="token comment"># если есть знак :</span>\n            words <span class="token operator">=</span> line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">\':\'</span><span class="token punctuation">)</span> <span class="token comment"># разделить по нему строку</span>\n    <span class="token keyword">return</span> msg</code></pre></div>'}}),"\n",e.createElement(s.p,null,"И последнее: имя домена будет получено из агрумента командной строки при запуске\nпрограммы. Оно передаётся функции ",e.createElement(s.em,null,"get_data"),", и данные выводятся на экран."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>\n    domain_name <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># получить доменное имя из аргумента командной строки</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>get_data<span class="token punctuation">(</span>domain_name<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># передать доменное имя функции get_data</span>\n<span class="token keyword">except</span> IndexError<span class="token punctuation">:</span>               <span class="token comment"># если программа запущена без аргумента</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"enter domain name as a value!"</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Данная программка не претендует на многое, но цели своей достигает; заодно\nзнакомит потенциального читателя с частью такой огромной темы как\nработа с сетью и сокетами, а автору служит главным образом примером и\nнапоминанием о различиях в обработке данных в разных версиях python'а."))}var o=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.MN)(),n.components);return s?e.createElement(s,n,e.createElement(p,n)):p(n)},l=a(7792),c=a(7619);function u(n){var s,a;let{data:{mdx:t},children:p,pageContext:{prev:o,next:u}}=n;const{h1:r,title:i,description:k,image:m,table_of_contents:d}=t.frontmatter;return(0,e.useEffect)((()=>{(0,c.K)()}),[]),e.createElement(e.Fragment,null,e.createElement(l._W,{h1:r,title:i,description:k,image:null===(s=t.frontmatter.image)||void 0===s?void 0:s.publicURL},e.createElement(l.MV,{post:t.frontmatter,imageData:null==m||null===(a=m.childImageSharp)||void 0===a?void 0:a.gatsbyImageData},d?e.createElement(l.G8,{headings:t.tableOfContents}):null,e.createElement("div",{className:"page__content"},p,e.createElement(l.Mf,{prev:o,next:u})),e.createElement(l.QZ,null))))}function r(n){return e.createElement(u,n,e.createElement(o,n))}},8876:function(n,s,a){a.d(s,{MN:function(){return p}});var t=a(4424);const e=t.createContext({});function p(n){const s=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);