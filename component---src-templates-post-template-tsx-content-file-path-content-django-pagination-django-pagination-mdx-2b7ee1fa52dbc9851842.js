"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[5652],{28:function(e,n,t){t.r(n),t.d(n,{Head:function(){return s.Ss},default:function(){return p}});var a=t(8876),l=t(4424);function r(e){const n=Object.assign({p:"p",a:"a",code:"code",h2:"h2",span:"span",pre:"pre"},(0,a.MN)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"Ни один сайт не состоит только лишь из одной страницы.\nБудь то блог, новостной портал или даже домашняя страничка Васи Пупочкина.\nМатериала много, страницы нужно как-то выводить. Вывод всех публикаций на\nодной странице является по сути своей идеей порочной: бесконечно прокручивать\nсписок статей неудобно для пользователя, а про нагрузку на сервер лучше даже\nне вспоминать."),"\n",l.createElement(n.p,null,"Для решения этой задачи в Django есть несколько способов и сегодня\nпредлагается рассмотреть один из них: стандартный пагинатор. Рассмотрим\nпример, где нужно получить список всех публикаций и затем вывести их постранично."),"\n",l.createElement(n.p,null,"В примере используются всё те же модели, что и ",l.createElement(n.a,{href:"/posts/django-first-steps/"},"в предыдущем посте"),".\nВ класс ",l.createElement(n.code,null,"Paginator")," следует передать список объектов и количество элементов, которые\nнужно отображать на одной странице. Далее используются методы класса для доступа к\nэтим элементам."),"\n",l.createElement(n.h2,{id:"модель-публикации",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D1%8C-%D0%BF%D1%83%D0%B1%D0%BB%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B8","aria-label":"модель публикации permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Модель публикации"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-python"},"# models.py\n\nclass Post(models.Model):\n    title = models.CharField(max_length=150)\n    body = models.TextField()\n    timestamp = models.DateTimeField()\n    author = models.ForeignKey(User)\n    meta_keywords = models.CharField(blank=True, max_length=200)\n    meta_description = models.TextField(blank=True, max_length=250)\n")),"\n",l.createElement(n.h2,{id:"отображение-view",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%BE%D1%82%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-view","aria-label":"отображение view permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Отображение (View)"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"post_lists")," — получаем список всех публикаций, отсортированных по времени создания."),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"paginator")," — передаём классу ",l.createElement(n.code,null,"Paginator")," наш список, указываем количество\nэлементов на одну страницу"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"paginator.page(1)")," — возвращает объект ",l.createElement(n.code,null,"Page")," по переданному индексу\n(начинается с единицы). Вызывает исключение ",l.createElement(n.code,null,"InvalidPage"),", если указанная\nстраница не существует."),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"paginator.page(paginator.num_pages)")," — отобразить общее количество страниц"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-python"},"# views.py\n\nfrom django.core.paginator import Paginator, PageNotAnInteger, EmptyPage\nfrom django.shortcuts import render_to_response\nfrom django.template import RequestContext\nfrom .models import Post\n\ndef news(request):\n    '''Show all news'''\n    posts_list = Post.objects.all().order_by('-timestamp')\n    paginator = Paginator(posts_list, 8)\n    page = request.GET.get('page')\n    try:\n        posts = paginator.page(page)\n    except PageNotAnInteger:\n        posts = paginator.page(1)\n    except EmptyPage:\n        posts = paginator.page(paginator.num_pages)\n    vars = dict(\n        posts=posts,\n        )\n    return render_to_response('news.html', vars, context_instance=RequestContext(request))\n")),"\n",l.createElement(n.h2,{id:"шаблон",style:{position:"relative"}},l.createElement(n.a,{href:"#%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD","aria-label":"шаблон permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Шаблон"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"for post in posts")," — итерация по элементам"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"post.has_previous")," — возвращает ",l.createElement(n.code,null,"True")," в случае, если предыдущая страница существует"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"post.has_next")," — возвращает ",l.createElement(n.code,null,"True")," в случае, если следующая страница существует"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"post.number")," — выведет номер страницы"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"post.previous_page_number")," — вернуть предыдущую страницу"),"\n",l.createElement(n.p,null,l.createElement(n.code,null,"post.next_page_number")," — вернуть следующую страницу"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-django"},'{# news.html #}\n\n{% extends \'base.html\' %}\n\n{% block title %}News{% endblock %}\n\n{% block content %}\n    <div id="post">\n        {% for post in posts %}\n            <ul>\n                <li><a href="{% url \'news:one_new\' post.id %}">{{ post.title}}</a></li>\n            </ul>\n\n            {{ post.timestamp }}\n            {{ post.author }}<br />\n            {{ post.body|truncatewords:80|safe }}<br />\n            <a href="{% url \'news:one_new\' post.id %}">Читать полностью</a>\n        {% endfor %}\n\n        <div id="pages" align="center">\n\n            {% if posts.has_previous %}\n                <a href="?page={{ posts.previous_page_number }}">Previous</a>\n            {% endif %}\n\n            <span class="current">\n                Page {{ posts.number }} of {{ posts.paginator.num_pages }}.\n            </span>\n\n            {% if posts.has_next %}\n                <a href="?page={{ posts.next_page_number }}">Next</a>\n            {% endif %}\n        </div>\n    </div>\n{% endblock %}\n')),"\n",l.createElement(n.p,null,"Страница документации: ",l.createElement(n.a,{href:"https://docs.djangoproject.com/en/dev/topics/pagination/",target:"_blank",rel:"nofollow"},"Pagination")))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.MN)(),e.components);return n?l.createElement(n,e,l.createElement(r,e)):r(e)},s=t(7792),c=t(7619);function i(e){var n,t;let{data:{mdx:a},children:r,pageContext:{prev:o,next:i}}=e;const{h1:p,title:m,description:u,image:d,table_of_contents:g}=a.frontmatter;return(0,l.useEffect)((()=>{(0,c.K)()}),[]),l.createElement(l.Fragment,null,l.createElement(s._W,{h1:p,title:m,description:u,image:null===(n=a.frontmatter.image)||void 0===n?void 0:n.publicURL},l.createElement(s.MV,{post:a.frontmatter,imageData:null==d||null===(t=d.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},g?l.createElement(s.G8,{headings:a.tableOfContents}):null,l.createElement("div",{className:"page__content"},r,l.createElement(s.Mf,{prev:o,next:i})),l.createElement(s.QZ,null))))}function p(e){return l.createElement(i,e,l.createElement(o,e))}},8876:function(e,n,t){t.d(n,{MN:function(){return r}});var a=t(4424);const l=a.createContext({});function r(e){const n=a.useContext(l);return a.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);