"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[4100],{6732:function(e,n,t){t.r(n),t.d(n,{Head:function(){return c.Ss},default:function(){return i}});var a=t(8876),l=t(4424);function r(e){const n=Object.assign({p:"p",h2:"h2",a:"a",span:"span",code:"code",pre:"pre",h3:"h3"},(0,a.MN)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"На выходных захотелось поэкспериментировать с блогом. Возможности vuepress исследованы.\nДуша просит новизны. Под руку попался gatsby. Ну, что ж, попробуем сделать мультиязычный сайт\nи поиграть с graphql, который поставляется как вариант по-умолчанию для передачи данных."),"\n",l.createElement(n.h2,{id:"установка",style:{position:"relative"}},l.createElement(n.a,{href:"#%D1%83%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BA%D0%B0","aria-label":"установка permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Установка"),"\n",l.createElement(n.p,null,"Любимый для подобных вещей ",l.createElement(n.code,null,"npx")," спешит на помощь. Выбираем минимальный starter-шаблон, чтобы\nвсё сделать по-своему с нуля. Используемая версия gatsby: 4."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell"},"$ npx gatsby new gatsby-blog https://github.com/gatsbyjs/gatsby-starter-hello-world\n$ cd gatsby-blog\n$ npm run develop\n")),"\n",l.createElement(n.p,null,"Файловая структура представлена ниже. Можно не воспроизводить её как есть, она лишь иллюстрирует\nоткуда берутся те или иные файлы и помогает ориентироваться в дальнейших кусках кода."),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,".\n├── content\n│   ├── en\n│   │   └── frontend\n│   └── ru\n│       ├── frontend\n│       └── backend\n├── gatsby-browser.js\n├── gatsby-config.js\n├── gatsby-node.js\n├── gatsby-ssr.js\n├── src\n│   ├── assets\n│   │   ├── images\n│   │   │   └── great.jpg\n│   │   └── styles\n│   │       └── base.css\n│   ├── components\n│   │   ├── layout.js\n│   │   └── theme-switcher.js\n│   ├── pages\n│   │   ├── 404.js\n│   │   └── index.js\n│   ├── templates\n│   │   └── post-template.js\n│   └── translations\n│       ├── en.json\n│       ├── ru.json\n│       └── index.js\n└── static\n    ├── favicon.ico\n    ├── sitemap.xml\n    └── robots.txt\n")),"\n",l.createElement(n.p,null,"Из названий, в общем-то, всё понятно. Единственное, что стоило бы уточнить: данные\nбудут представлять собой ",l.createElement(n.a,{href:"https://daringfireball.net/projects/markdown/",target:"_blank",rel:"nofollow"},"markdown-файлы"),".\nЭто наша база данных. Типичная для генератора статики, но не являющаяся единственным вариантом\nв случае с gatsby."),"\n",l.createElement(n.h2,{id:"graphql",style:{position:"relative"}},l.createElement(n.a,{href:"#graphql","aria-label":"graphql permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Graphql"),"\n",l.createElement(n.p,null,"После получения копии gatsby, можно сразу же запустить его в режиме разработки и поиграть\nс graphql. Чтобы получить что-то полезное, сначала надо это полезное написать. Хотя бы\nзадать глобальные данные для сайта. Сделать это можно в ",l.createElement(n.code,null,"gatsby-config.js"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-config.js\nmodule.exports = {\n  siteMetadata: {\n    title: "Great gatsby multi-language blog",\n  },\n}\n')),"\n",l.createElement(n.p,null,"Открыть браузер по адресу ",l.createElement(n.a,{href:"http://localhost:8000/___graphql",target:"_blank",rel:"nofollow"},"http://localhost:8000/___graphql")," и написать запрос:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-graphql"},"{\n  site {\n    siteMetadata {\n      title\n    }\n  }\n}\n")),"\n",l.createElement(n.p,null,"В файле конфигурации можно прописать названия и пути к каким-либо страницам и вывести\nдинамическое меню. Только помните: если запросы используются в компоненте, получайте их\nчерез ",l.createElement(n.code,null,"useStaticQuery"),". Но обо всём по порядку."),"\n",l.createElement(n.p,null,"Надеюсь, вы получили в ответ свой заголовок. Пора отправляться дальше."),"\n",l.createElement(n.h2,{id:"контент",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%BA%D0%BE%D0%BD%D1%82%D0%B5%D0%BD%D1%82","aria-label":"контент permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Контент"),"\n",l.createElement(n.p,null,"Главная вещь, ради которой мы тут собрались: данные. Этот раздел самый большой,\nпоэтому приготовьте чаю."),"\n",l.createElement(n.h3,{id:"данные",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%B4%D0%B0%D0%BD%D0%BD%D1%8B%D0%B5","aria-label":"данные permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Данные"),"\n",l.createElement(n.p,null,"Перво-наперво пишем заметочку. Лучше несколько."),"\n",l.createElement(n.p,null,"По ",l.createElement(n.code,null,"slug")," определим путь к заметке. ",l.createElement(n.code,null,"Category")," для тех, кто хочет разбивать страницы по категориям.\nКонечно, дата, в формате год-месяц-день. Остальное должно быть понятно."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-markdown"},"\x3c!--content/ru/frontend/gatsby/gatsby.mdx--\x3e\n---\nh1: Заголовок поста\ntitle: Title для браузера\ndescription: Описание для поисковых роботов\ndate: 2020-04-06\ncategory: frontend\nslug: gatsby\n---\n\nМой контент\n![alt](./tree.jpg)\n")),"\n",l.createElement(n.p,null,"Структура директории в формате ",l.createElement(n.code,null,"локаль -> категория -> запись"),":"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,".\n├── content\n│   ├── en\n│   │   └── frontend\n│   └── ru\n│       ├── frontend\n│       │   ├── gatsby\n│       │   │   ├── gatsby.jpg\n│       │   │   └── gatsby.mdx\n")),"\n",l.createElement(n.h3,{id:"инструменты",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%B8%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D1%8B","aria-label":"инструменты permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Инструменты"),"\n",l.createElement(n.p,null,"Установка пакетов для работы с форматом mdx (в отличие от обычного markdown эта штука позволит\nиспользовать компоненты прямо в md-файлах. Ну не круто ли?)."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell"},"$ npm i gatsby-plugin-mdx @mdx-js/mdx @mdx-js/react\n")),"\n",l.createElement(n.p,null,"Пакет «расшаривания» директории, где лежит контент, чтобы его содержимое\nбыло видно в graphql."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell"},"$ npm i gatsby-source-filesystem\n")),"\n",l.createElement(n.p,null,"И пакеты, позволяющие запросто подключать картинки и хранить их не где-то в ",l.createElement(n.code,null,"static"),",\nа рядом с файлом-заметкой."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell"},"$ npm i gatsby-plugin-sharp gatsby-remark-images\n")),"\n",l.createElement(n.p,null,"Скормим их в файлу конфигурации:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    "gatsby-plugin-sharp",\n    {\n      resolve: "gatsby-source-filesystem",\n      options: {\n        name: "content",\n        // шарить директорию content\n        path: `${__dirname}/content/`,\n      },\n    },\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        extensions: [`.mdx`, `.md`],\n        gatsbyRemarkPlugins: [\n          {\n            resolve: `gatsby-remark-images`,\n            options: {\n              maxWidth: 1200,\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n')),"\n",l.createElement(n.p,null,"Данные подготовлены, пакеты установлены. Дальше следует выяснить как работает механизм\nпередачи данных. Для каждого markdown-файла создаётся страница (",l.createElement(n.code,null,"gatsby-node.js"),").\nСтраница должна иметь шаблон (",l.createElement(n.code,null,"post-template.js"),"). В шаблоне можно вывести что угодно."),"\n",l.createElement(n.p,null,"Поехали."),"\n",l.createElement(n.h3,{id:"создание-страниц",style:{position:"relative"}},l.createElement(n.a,{href:"#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D1%81%D1%82%D1%80%D0%B0%D0%BD%D0%B8%D1%86","aria-label":"создание страниц permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Создание страниц"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-node.js\nconst path = require("path")\n\n// createPages даёт доступ к graphql и некоторым методам gatsby (actions)\nexports.createPages = async ({ actions, graphql }) => {\n  const { createPage } = actions\n\n  // получить все markdown-записи\n  const {\n    data: {\n      allMdx: { edges: posts },\n    },\n  } = await graphql(`\n    {\n      allMdx {\n        edges {\n          node {\n            frontmatter {\n              slug\n              category\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  // для каждой записи создать страницу\n  posts.forEach(({ node }) => {\n    const { slug, category } = node.frontmatter\n    return createPage({\n      // путь к странице\n      path: `${category}/${slug}`,\n      // шаблон страницы\n      component: require.resolve("./src/templates/post-template.js"),\n      // контекст, который попадёт в шаблон\n      // может быть использован для дальнейших манипуляций с данными\n      context: { slug },\n    })\n  })\n}\n')),"\n",l.createElement(n.h3,{id:"шаблон",style:{position:"relative"}},l.createElement(n.a,{href:"#%D1%88%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD","aria-label":"шаблон permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Шаблон"),"\n",l.createElement(n.p,null,"В шаблоне запрашиваем любые данные."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// src/templates/post-template.js\n\nimport React from "react"\nimport { graphql } from "gatsby"\nimport { MDXRenderer } from "gatsby-plugin-mdx"\n\n// динамический slug берётся из переданного на этапе создания страниц контекста\nexport const query = graphql`\n  query getPost($slug: String!) {\n    mdx(frontmatter: { slug: { eq: $slug } }) {\n      body\n      frontmatter {\n        h1\n        slug\n      }\n    }\n  }\n`\n// Отобразить контент помогает MDXRenderer\nexport default function PostTemplate({ data }) {\n  const { h1 } = data.mdx.frontmatter\n  const { body } = data.mdx\n\n  return (\n    <main>\n      <h1>{h1}</h1>\n      <MDXRenderer>{body}</MDXRenderer>\n    </main>\n  )\n}\n')),"\n",l.createElement(n.p,null,"Всё! Новую запись можно увидеть по адресу ",l.createElement(n.code,null,"http://localhost:8000/frontend/gatsby/"),".\nЭто был самый трудоёмкий этап. Дальше можно вывести все записи на главной и перейти к пунктам\nболее простым и не менее полезным."),"\n",l.createElement(n.p,null,"Записи на главной:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// pages/index.js\nimport React from "react"\nimport { graphql, useStaticQuery, Link } from "gatsby"\n\n// получить все записи, отсортированные по дате\nconst getPosts = graphql`\n  query allPosts {\n    allMdx(sort: { frontmatter: {date: DESC} }) {\n      edges {\n        node {\n          frontmatter {\n            h1\n            slug\n            category\n            date(formatString: "MMMM Do, YYYY")\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default function HomePage() {\n  const response = useStaticQuery(getPosts)\n  const posts = response.allMdx.edges\n\n  return (\n    <main>\n      <h1>Posts</h1>\n      <ul>\n        {posts.map(({ node: { frontmatter: post } }, index) => (\n          <li key={index}>\n            <span>{post.date}</span><br/>\n            <Link to={`${post.category}/${post.slug}/`}>{post.h1}</Link>\n          </li>\n        ))}\n      </ul>\n    </main>\n  )\n}\n')),"\n",l.createElement(n.p,null,"Объект ",l.createElement(n.code,null,"posts")," можно фильтровать и сортировать как захочется прямо здесь. На производительность\nэто не повлияет. После сборки останется статичная страница с преобразованными заранее данными."),"\n",l.createElement(n.h2,{id:"мультиязычность-и-seo",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%BC%D1%83%D0%BB%D1%8C%D1%82%D0%B8%D1%8F%D0%B7%D1%8B%D1%87%D0%BD%D0%BE%D1%81%D1%82%D1%8C-%D0%B8-seo","aria-label":"мультиязычность и seo permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Мультиязычность и SEO"),"\n",l.createElement(n.p,null,"На мой взгляд хорошим подспорьем для переводов в обычных javascript-файлах,\nтаких как страницы (pages), может быть пакет ",l.createElement(n.code,null,"react-intl"),". Однако, есть одна проблема:\nдля gatsby его метод ",l.createElement(n.code,null,"injectIntl")," работать не будет: не предусмотрен для использования\nв этом окружении. Но не беда, есть обёртка над ",l.createElement(n.code,null,"react-intl"),", её и установим."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell"},"$ npm i gatsby-plugin-intl\n")),"\n",l.createElement(n.p,null,"Файл конфигурации принимает следующий вид:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-config.js\nmodule.exports = {\n  // ...\n  plugins: [\n    // ...\n    {\n      resolve: "gatsby-plugin-intl",\n      options: {\n        path: `${__dirname}/src/translations`,\n        languages: ["en", "ru"],\n        defaultLanguage: "ru",\n        // автоматически перенаправлять на `/ru` или `/en` когда человек на главной `/`\n        // имейте ввиду: у Google Chrome всегда стоит `en-US`! экспериментируйте\n        redirect: false,\n      },\n    },\n  ],\n}\n')),"\n",l.createElement(n.p,null,"Создайте файлы с языковыми переводами, если не сделали этого раньше."),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,"src\n└── translations\n    ├── en.json\n    ├── ru.json\n    └── index.js\n")),"\n",l.createElement(n.p,null,"Переводы не должны иметь вложенность. Только flat. Это ограничение ",l.createElement(n.code,null,"react-intl"),".\nОно, конечно, обходится, но не станем заострять на этом внимание сейчас."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-json"},'// src/translations/en.json\n{\n  "home.h1": "Hello, welcome {user}",\n  "home.title": "Home title",\n  "home.description": "Home description"\n}\n')),"\n",l.createElement(n.p,null,"Предпочитаю брать их все из одного места. Так удобнее."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// src/translations/index.js\nimport locale_en from "./en.json"\nimport locale_ru from "./ru.json"\n\nexport default {\n  en: locale_en,\n  ru: locale_ru,\n}\n')),"\n",l.createElement(n.p,null,"В markdown-файлы добавить информацию о языке, это очень важные данные!"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-markdown"},"\x3c!--content/ru/frontend/gatsby/gatsby.mdx--\x3e\n---\nh1: Заголовок поста\nlang: ru\n\n\x3c!--content/en/frontend/gatsby/gatsby.mdx--\x3e\n---\nh1: Post heading\nlang: en\n")),"\n",l.createElement(n.p,null,"Поскольку контентные страницы создаём самостоятельно, передавать контекст тоже надо самостоятельно."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-node.js\nexports.createPages = async ({ actions, graphql }) => {\n  // запрос тот же, только lang добавить\n  // ...\n  frontmatter {\n    lang\n    slug\n    category\n  }\n  // ...\n\n  // создать отдельные страницы для разных языков\n  posts.forEach(({ node }) => {\n    const { lang, slug, category } = node.frontmatter\n    return createPage({\n      path: `${lang}/${category}/${slug}`,\n      component: require.resolve("./src/templates/post-template.js"),\n      context: { lang, slug },\n    })\n  })\n}\n')),"\n",l.createElement(n.p,null,"И ",l.createElement(n.code,null,"lang")," в шаблон, конечно, прокинуть. Надо же теперь распределять весь контент\nпо языковой принадлежности! Заодно правильно отформатируем даты для текущего языка."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// src/templates/post-template.js\nexport const query = graphql`\n  query getPost($slug: String!, $lang: String!) {\n    mdx(frontmatter: { slug: { eq: $slug }, lang: { eq: $lang } }) {\n      body\n      frontmatter {\n        h1\n        date(formatString: "MMMM Do, YYYY", locale: $lang)\n      }\n    }\n  }\n`\n')),"\n",l.createElement(n.p,null,"Страницы в ",l.createElement(n.code,null,"page")," после установки плагина обзавелись новой переменной контекста — ",l.createElement(n.code,null,"language"),".\nТеперь для каждой из них можно получить язык, установленный в браузере посетителя.\nФильтровать по этому признаку записи или добавлять seo-заголовки. Попробуем."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},"// src/pages/index.js\n// ... добавить в запрос lang\nfrontmatter {\n  lang\n  h1\n  slug\n  category\n}\n// ...\n\nexport default function HomePage({ pageContext: { language } }) {\n  const response = useStaticQuery(getPosts)\n  // только записи с актуальной локалью\n  const posts = response.allMdx.edges.filter(\n    post => post.node.frontmatter.lang === language\n  )\n\n  return (\n    <main>\n      <ul>\n        {posts.map(({ node: { frontmatter: post } }, index) => (\n          <li key={index}>\n            <Link to={`/${post.lang}/${post.category}/${post.slug}/`}>\n              {post.h1}\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </main>\n  )\n}\n")),"\n",l.createElement(n.p,null,"Осталось разобраться с локализацией самих js-страниц. На сцену снова выходит ",l.createElement(n.code,null,"react-intl"),"."),"\n",l.createElement(n.p,null,"Конечно, захочется правильно устанавливать html-атрибут ",l.createElement(n.code,null,"lang")," и писать в ",l.createElement(n.code,null,"head")," всякие\nкрасивые мета-данные для поисковых роботов. В этом поможет ",l.createElement(n.code,null,"layout.js"),", куда будем складывать всё\nэто добро. Ставим ",l.createElement(n.code,null,"react-helmet")," и ",l.createElement(n.code,null,"gatsby-plugin-react-helmet"),":"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell"},"$ npm i react-helmet gatsby-plugin-react-helmet\n")),"\n",l.createElement(n.p,null,"В ",l.createElement(n.code,null,"gatsby.config.js")," добавляем последний. Так мета-теги будут учитываться при генерации статики."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},"// gatsby.config.js\nplugins: [\n  'gatsby-plugin-react-helmet',\n]\n")),"\n",l.createElement(n.p,null,"Чтобы не страдать с импортом относительных путей, докрутим webpack."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-node.js\nexports.onCreateWebpackConfig = ({ actions }) => {\n  actions.setWebpackConfig({\n    resolve: {\n      modules: [path.resolve(__dirname, "src"), "node_modules"],\n    },\n  })\n}\n')),"\n",l.createElement(n.p,null,"Дописываем в ",l.createElement(n.code,null,"gatsby-config.js")," глобальные title и description. Или не дописываем, а передаём\nс конкретной страницы. Тогда и graphql-запрос не нужен. В общем, идём делать SEO."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// components/layout.js\nimport React from "react"\nimport { Helmet } from "react-helmet"\nimport { useStaticQuery, graphql } from "gatsby"\n\nexport default function Layout({\n  lang = "ru",\n  title = "",\n  description = "",\n  children,\n}) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n          }\n        }\n      }\n    `\n  )\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <>\n      <Helmet\n        htmlAttributes={{ lang }}\n        title={title}\n        titleTemplate={`%s | ${site.siteMetadata.title}`}\n        meta={[\n          // по желанию добавить Open Graph для социальных сетей\n          { name: "description", content: metaDescription },\n        ]}\n      />\n      <main>{children}</main>\n    </>\n  )\n}\n')),"\n",l.createElement(n.p,null,"Допустим, ",l.createElement(n.code,null,"pages/index.js")," пуст (если нет, создаём любой другой, к примеру ",l.createElement(n.code,null,"about.js"),")."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// pages/index.js\nimport React from "react"\nimport {\n  useIntl,\n  FormattedDate,\n  FormattedMessage,\n  FormattedNumber,\n} from "gatsby-plugin-intl"\nimport Layout from "components/layout"\n\n// получить language из контекста и вывести:\n// правильно отформатированные дату, число и валюту, да просто переменную в тексте\n// красота!\nexport default function HomePage({ pageContext: { language } }) {\n  const intl = useIntl()\n\n  return (\n    <Layout\n      lang={language}\n      title={intl.formatMessage({ id: "home.title" })}\n      description={intl.formatMessage({ id: "home.description" })}\n    >\n      <p>\n        <FormattedDate value={new Date()} /><br />\n        <FormattedNumber value={12000} style="currency" currency="USD" /><br />\n        <FormattedMessage id="home.h1" values={{ user: "Jack" }} />\n      </p>\n    </Layout>\n  )\n}\n')),"\n",l.createElement(n.p,null,"На этом вопросы мультиязычности и SEO считаю закрытыми."),"\n",l.createElement(n.h2,{id:"gatsby-ssr",style:{position:"relative"}},l.createElement(n.a,{href:"#gatsby-ssr","aria-label":"gatsby ssr permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"gatsby-ssr"),"\n",l.createElement(n.p,null,"Надо бы затронуть и этот файл тоже. Но для чего? Gatsby встраивает инлайновые стили на страницу.\nНе всем это придётся по вкусу по той причине, что такие стили по-умолчанию не кэшируются.\nЭто поведение меняется здесь. На любителя."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-ssr.js\nexport const onPreRenderHTML = ({ getHeadComponents, replaceHeadComponents }) => {\n  // для разработки оставить inline css\n  if (process.env.NODE_ENV !== "production") return\n\n  const headComponents = getHeadComponents()\n\n  headComponents.forEach(el => {\n    // для итоговой сборки сделать отдельный css-файл\n    if (el.type === "style") {\n      el.type = "link"\n      el.props["href"] = el.props["data-href"]\n      el.props["rel"] = "stylesheet"\n      el.props["type"] = "text/css"\n\n      delete el.props["data-href"]\n      delete el.props["dangerouslySetInnerHTML"]\n    }\n  })\n\n  replaceHeadComponents(headComponents)\n}\n')),"\n",l.createElement(n.h2,{id:"webpack",style:{position:"relative"}},l.createElement(n.a,{href:"#webpack","aria-label":"webpack permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Webpack"),"\n",l.createElement(n.p,null,"Небольшой пример тюнинга конфигурации webpack был рассмотрен в предыдущем разделе."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-node.js\nexports.onCreateWebpackConfig = ({ getConfig, actions, plugins }) => {\n  actions.setWebpackConfig({\n    // отключить  source-map в итоговой сборке\n    devtool: getConfig().mode === "production" ? false : "source-map",\n    resolve: {\n      modules: [path.resolve(__dirname, "src"), "node_modules"],\n    },\n    // по желанию вырубить react-dev-tools\n    plugins: [\n      plugins.define({\n        \'__REACT_DEVTOOLS_GLOBAL_HOOK__\': `({ isDisabled: true })`\n      })\n    ],\n  })\n}\n')),"\n",l.createElement(n.p,null,"Здесь упомяну лишь о том, как ставить свои плагины. На самом деле нет ничего проще.\nСтавим что хотим + обязательно ",l.createElement(n.code,null,"babel-preset-gatsby"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell"},"$ npm i --save-dev babel-preset-gatsby @babel/plugin-proposal-optional-chaining\n")),"\n",l.createElement(n.p,null,"Создаём свой ",l.createElement(n.code,null,".babelrc")," в корне проекта."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-json"},'{\n  "plugins": [\n    "@babel/plugin-proposal-optional-chaining"\n  ],\n  "presets": [\n    [\n      "babel-preset-gatsby",\n      {\n        "targets": {\n          "browsers": [\n            ">0.5%",\n            "not dead"\n          ]\n        }\n      }\n    ]\n  ]\n}\n')),"\n",l.createElement(n.p,null,"Всё. Уже можно использовать ",l.createElement(n.code,null,"plugin-proposal-optional-chaining"),"."),"\n",l.createElement(n.h2,{id:"картинки-вне-static",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%BA%D0%B0%D1%80%D1%82%D0%B8%D0%BD%D0%BA%D0%B8-%D0%B2%D0%BD%D0%B5-static","aria-label":"картинки вне static permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Картинки вне static"),"\n",l.createElement(n.p,null,"Импорт картинок, лежащих не глобально в ",l.createElement(n.code,null,"static"),", а где-нибудь в ",l.createElement(n.code,null,"src/assets"),", можно произвести\nследующим образом:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// src/pages/index.js\nimport React from "react"\nimport image from "assets/images/great.jpg"\n\nexport default function HomePage() {\n  return (\n    <main>\n      <img src={image} alt="Great Gatsby" width={375} height="auto" />\n    </main>\n  )\n}\n')),"\n",l.createElement(n.h2,{id:"dark-mode",style:{position:"relative"}},l.createElement(n.a,{href:"#dark-mode","aria-label":"dark mode permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Dark mode"),"\n",l.createElement(n.p,null,"В мобильных приложениях появился dark mode. Осмелюсь доложить, штука неплохая. Вечерами спасает глаза.\nТе, кто хочет завести себе PWA и быть ближе к нативным мобильным, явно захотят и эту фичу.\nЧто ж, сделаем!"),"\n",l.createElement(n.p,null,"Я опишу сложный вариант, чтобы продемонстрировать работу с ",l.createElement(n.code,null,"gatsby-browser.js"),".\nМожно проще: менять класс у ",l.createElement(n.code,null,"html")," или ",l.createElement(n.code,null,"body")," (рабоать это будет, конечно, до перезагрузки страницы)."),"\n",l.createElement(n.p,null,"Понадобятся стили, общие для всех страниц для объявления в них css-переменных. В примере\nдинамически меняться будут только фон и текст страницы."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-css"},'/* assets/styles/base.css */\n:root {\n  --textColor: #3f3f3f;\n  --bgColor: #fafafa;\n}\n\n[data-theme="dark"] {\n  --textColor: #d9d7e0;\n  --bgColor: #232129;\n}\n\nbody {\n  background-color: var(--bgColor);\n  color: var(--textColor);\n}\n')),"\n",l.createElement(n.p,null,"Идём на сторону клиента. Код в ",l.createElement(n.code,null,"onClientEntry")," отрабатывает только один раз когда посетитель зашёл\nна страницу."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-browser.js\n// подключаем глобальные стили\nrequire("./src/assets/styles/base.css")\n\nexports.onClientEntry = () => {\n  enableTheme()\n}\n\n// Если тема не установлена, применить тему по-умолчанию.\n// Если установлена пользователем, сохранить его выбор в localStorage,\n// чтобы не заставлять человека выбирать её снова и снова при переходе на другие страницы\nfunction enableTheme() {\n  const root = document.getElementsByTagName("body")[0]\n  try {\n    const uiTheme = localStorage.getItem("theme-ui-color-mode")\n    const theme = uiTheme ? uiTheme : "light"\n    // выставить data-атрибут темы для элемента body\n    root.setAttribute("data-theme", theme)\n  } catch (error) {\n    console.error(\'localStorage error\', error);\n  }\n}\n')),"\n",l.createElement(n.p,null,"Неплохо бы сделать переключатель, чтобы пользователь сам мог менять оформление."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// src/components/theme-switcher.js\nimport React from "react"\n\nconst onThemeToggle = () => {\n  // получить тему из data-theme\n  const root = document.getElementsByTagName("body")[0]\n  const theme = root.getAttribute("data-theme")\n\n  // изменить атрибут\n  // если была светлая тема, поставить тёмную и наоборот\n  const uiTheme = theme === "dark" ? "light" : "dark"\n\n  try {\n    root.setAttribute("data-theme", uiTheme)\n    // запомнить выбор\n    localStorage.setItem("theme-ui-color-mode", uiTheme)\n  } catch (error) {\n    return false\n  }\n}\n\nexport default function ThemeSwitcher() {\n  return (\n    <button onClick={onThemeToggle} type="button">\n      Change Theme\n    </button>\n  )\n}\n')),"\n",l.createElement(n.p,null,"Ну, и подключить компонент-switcher куда-нибудь на страницу или в другой компонент:\nв шапку сайта, например."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// src/pages/index.js\nimport React from "react"\nimport Layout from "components/layout"\nimport ThemeSwitcher from "components/theme-switcher"\n\nexport default function HomePage({ pageContext: { language } }) {\n  return (\n    <Layout lang={language}>\n      <ThemeSwitcher />\n      <h1>Home</h1>\n    </Layout>\n  )\n}\n')),"\n",l.createElement(n.p,null,"Проверяем, кликаем."),"\n",l.createElement(n.p,null,"Если хочется менять тему в зависимости от времени суток, лучший вариант ",l.createElement(n.a,{href:"https://developer.mozilla.org/ru/docs/Web/CSS/@media/prefers-color-scheme",target:"_blank",rel:"nofollow"},"prefers-color-scheme"),". Тогда приведённый выше код даже писать\nне придётся."),"\n",l.createElement(n.h2,{id:"подсветка-кода",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%BF%D0%BE%D0%B4%D1%81%D0%B2%D0%B5%D1%82%D0%BA%D0%B0-%D0%BA%D0%BE%D0%B4%D0%B0","aria-label":"подсветка кода permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Подсветка кода"),"\n",l.createElement(n.p,null,"Когда вы пишете в своих заметках тонны кода как это делаю я, подсветка жизненно необходима.\nДля gatsby есть два варианта: prism.js или highlight.js. Возьмём первый."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell"},"$ npm i prismjs gatsby-remark-prismjs\n")),"\n",l.createElement(n.p,null,"Настроек у пакета достаточно. Не вижу смысла описывать их все здесь, лучше увидеть\n",l.createElement(n.a,{href:"https://www.gatsbyjs.com/packages/gatsby-remark-prismjs/",target:"_blank",rel:"nofollow"},"полную картину"),"."),"\n",l.createElement(n.p,null,"Ограничимся минимумом. Надо сказать ",l.createElement(n.code,null,"gatsby-plugin-mdx"),", чтобы он применил ",l.createElement(n.code,null,"prism.js"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-config.js\nmodule.exports = {\n  plugins: [\n    // ...\n    {\n      resolve: `gatsby-plugin-mdx`,\n      options: {\n        gatsbyRemarkPlugins: [\n          {\n            resolve: `gatsby-remark-prismjs`,\n            options: {\n              classPrefix: "language-",\n              inlineCodeMarker: null,\n            },\n          },\n        ],\n      },\n    },\n  ],\n}\n')),"\n",l.createElement(n.p,null,"Не забыть подключить стили подсветки. Можно глобально, а можно только на страницах записей."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'// gatsby-browser.js\nrequire("prismjs/themes/prism-solarizedlight.css")\n')),"\n",l.createElement(n.p,null,"И посмотреть-таки, что получилось."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-markdown"},"\x3c!--content/ru/frontend/gatsby/gatsby.mdx--\x3e\nКусок кода css.\n\n```css\n.gatsby-highlight {\n  background-color: #fdf6e3;\n  border-radius: 0.3em;\n}\n```\n")),"\n",l.createElement(n.h2,{id:"комментарии",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%BA%D0%BE%D0%BC%D0%BC%D0%B5%D0%BD%D1%82%D0%B0%D1%80%D0%B8%D0%B8","aria-label":"комментарии permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Комментарии"),"\n",l.createElement(n.p,null,"Редкий блог обходится без комментариев. Здесь у каждого свои предпочтения, начиная от\nвыбора самой системы комментирования, и заканчивая реализацией её подключения. Мне интересно\nповедение, когда комментарии показываются только если посетитель сам захотел их увидеть.\nСледовательно, до этого момента (а он может не наступить никогда), я не хочу грузить какие-то\nсторонние скрипты."),"\n",l.createElement(n.p,null,"Реализация именно такого поведения и представлена ниже. Из всего многообразия похожих скриптовых\nсистем используем disqus."),"\n",l.createElement(n.p,null,"Код disqus."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// src/components/disqus.js\nconst DISQUS_ID = "xxxxx.disqus.com" // ваш идентификатор\n\nexport const runDisqus = () => (function () {\n  const page = window.document;\n  const dscript = page.createElement("script");\n  dscript.src = `//${DISQUS_ID}/embed.js`;\n  dscript.setAttribute("data-timestamp", +new Date());\n  (page.head || page.body).appendChild(dscript);\n})();\n\n')),"\n",l.createElement(n.p,null,"Компонент комментариев."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// src/components/comments.js\nimport React, { useState, useEffect } from "react"\nimport { runDisqus } from "./disqus"\n\nconst Comments = () => {\n  // Если юзер тыкнул по кнопке (isThreadOpened = true),\n  // динамически подключаем скрипт disqus\n  const [isThreadOpened, setIsThreadOpened] = useState(false)\n\n  const handleOpenThread = () => {\n    setIsThreadOpened(true)\n    if (typeof window !== "undefined") { runDisqus() }\n  }\n\n  // переход с Link не перезагружает страницу полностью\n  // поэтому выполняем DISQUS.reset, чтобы корректно обновлять\n  // комментарии на странице\n  useEffect(() => {\n    if (window.DISQUS) {\n      window.DISQUS.reset()\n    }\n  }, [])\n\n  // показать кнопку, если комментарии ещё не открывали\n  return (\n    <div className="comments">\n      {!isThreadOpened && (\n        <button onClick={handleOpenThread}>\n          Show comments\n        </button>\n      )}\n      <div id="disqus_thread" />\n    </div>\n  )\n}\n\nexport default Comments\n')),"\n",l.createElement(n.p,null,"Подключаем компонент на страницы записей."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// src/templates/post-template.js\nimport React from "react"\nimport { graphql } from "gatsby"\nimport { MDXRenderer } from "gatsby-plugin-mdx"\nimport Comments from "components/comments"\n\nexport default function PostTemplate({ data }) {\n  const { h1 } = data.mdx.frontmatter\n  const { body } = data.mdx\n\n  return (\n    <main>\n      <h1>{h1}</h1>\n      <MDXRenderer>{body}</MDXRenderer>\n      <Comments />\n    </main>\n  )\n}\n// ...\n')),"\n",l.createElement(n.p,null,"Ещё вариант: подключать скрипт когда скролл доходит до конца страницы,\nчтобы ленивцы не напрягали палец нажатием на кнопку."),"\n",l.createElement(n.h2,{id:"mdx",style:{position:"relative"}},l.createElement(n.a,{href:"#mdx","aria-label":"mdx permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"MDX"),"\n",l.createElement(n.p,null,"Plugin MDX — это в первую очередь доступ к множеству пакетов. Для gatsby они\nподключаются в двух вариациях: как адаптированный gatsby-пакет или как родной пакет\n",l.createElement(n.a,{href:"https://github.com/remarkjs/remark",target:"_blank",rel:"nofollow"},"remark"),"."),"\n",l.createElement(n.p,null,"Выглядит это так:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-js"},'module.exports = {\n  plugins: [\n    {\n      resolve: "gatsby-plugin-mdx",\n      options: {\n        extensions: [".mdx", ".md"],\n        // родные плагины remark\n        remarkPlugins: [\n          // ставит внешним ссылкам атрибуты rel="nofollow, noopener, noreferrer"\n          // открывает их в новой вкладке\n          require("remark-external-links"),\n        ],\n        // адаптированные плагины\n        gatsbyRemarkPlugins: [\n          "gatsby-remark-images",\n          "gatsby-remark-prismjs",\n        ],\n      },\n    },\n  ],\n}\n')),"\n",l.createElement(n.p,null,"А самое вкусное то, что можно импортировать компоненты прямо в markdown-файлы. Это позволит сделать\nпочти всё, что угодно. Вывод красивых табличек-предупреждений, нормальные вкладки с табами.\nВозможно, даже галерею изображений."),"\n",l.createElement(n.p,null,"Самый простой случай — предупреждения. Делаем."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-css"},"/* components/tip/tip.module.css */\n/* стиль с именем с module.css это css-модуль */\n.tip {\n  padding: 2rem;\n  color: white;\n}\n.heading { font-weight: bold; }\n.warning { background-color: coral; }\n.danger { background-color: crimson; }\n")),"\n",l.createElement(n.p,null,"Сам компонент:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-jsx"},'// components/tip/index.js\nimport React from "react"\nimport * as styles from "./tip.module.css"\n\nexport default function Tip ({ type, heading, children }) {\n  return (\n    <div className={[styles.tip, styles[type]].join(\' \')}>\n      <p className={styles.heading}>{heading}</p>\n      {children}\n    </div>\n  )\n}\n')),"\n",l.createElement(n.p,null,"Использование в mdx-файле:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-markdown"},'import Tip from "components/tip"\n\n<Tip heading="Danger!" type="danger">\nMy danger text\n</Tip>\n')),"\n",l.createElement(n.h2,{id:"публикация",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%BF%D1%83%D0%B1%D0%BB%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D1%8F","aria-label":"публикация permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Публикация"),"\n",l.createElement(n.p,null,"Вариантов много. Рассмотрим деплой на github pages."),"\n",l.createElement(n.p,null,"От знакомства с vuepress у меня остался прекрасный маленький скрипт, который я оставлю здесь,\nпотому как он универсален."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-bash"},"#!/usr/bin/env sh\n\n# abort on errors\nset -e\n\n# build and navigate into the build output directory\nnpm run build && cd public\n\n# if you are deploying to a custom domain\necho 'blogname.com' > CNAME\n\ngit init\ngit add -A\ngit commit -m 'deploy'\n\n# git push -f git@github.com:<имя_юзера>/<имя_репозитория>.git <имя_ветки>\ngit push -f git@github.com:jack/jack.github.io.git master:gh-pages\n")),"\n",l.createElement(n.h2,{id:"послесловие",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D1%81%D0%BB%D0%BE%D0%B2%D0%B8%D0%B5","aria-label":"послесловие permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Послесловие"),"\n",l.createElement(n.p,null,"В статье осталось много неосвящённых моментов: как поднять PWA (точно надо?), можно ли брать gatsby\nкогда нужно сотворить Headless CMS + статику (можно), обязательно ли использовать graphql (нет)."),"\n",l.createElement(n.p,null,"Ответы есть в ",l.createElement(n.a,{href:"https://www.gatsbyjs.com",target:"_blank",rel:"nofollow"},"официальной документации"),".\nОна очень хороша для глубокого погружения."),"\n",l.createElement(n.p,null,"С чем сравнивать gatsby когда стоишь перед выбором? Зависит от потребностей."),"\n",l.createElement(n.p,null,"На первой ступени стоят генераторы статики."),"\n",l.createElement(n.p,null,"Тот же vuepress был создан в первую очередь для написания документации. И с этой задачей\nон справляется на 100% без ручного вмешательства. Его можно сравнить с octopress или jekyll.\nВернее, из него можно сделать octopress (и даже лучше)."),"\n",l.createElement(n.p,null,"Вторая ступень... не знаю как обозначить эти фреймворки. Gatsby и его молодой аналог\nна Vue — Gridsome. Они предоставляют больше возможностей: обращение к серверу или напрямую\nк базе данных, или использование классики в виде локально хранящихся markdown-файлов."),"\n",l.createElement(n.p,null,"Третья ступень: Next.js/Nuxt.js. Это если нужен server side rendering «из коробки»,\nно одной лишь статикой не обойтись. В основном это приложения с множеством страниц, когда интерфейс\nподстраивается под каждого пользователя индивидуально."),"\n",l.createElement(n.p,null,"Про мир Angular сказать не могу, но явно у них есть свои решения."),"\n",l.createElement(n.p,null,"В любом случае смотреть надо на наличие хорошей документации, поддержки сообщества и того,\nсколько средств вливается в инструмент. У gatsby в этом плане на текущий момент всё очень неплохо."),"\n",l.createElement(n.p,null,"У меня остались хорошие впечатления. И я, пожалуй, перееду на gatsby когда надумаю\nв следующий раз делать глобальный редизайн."))}var s=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.MN)(),e.components);return n?l.createElement(n,e,l.createElement(r,e)):r(e)},c=t(7792),o=t(7619);function m(e){var n,t;let{data:{mdx:a},children:r,pageContext:{prev:s,next:m}}=e;const{h1:i,title:p,description:u,image:g,table_of_contents:d}=a.frontmatter;return(0,l.useEffect)((()=>{(0,o.K)()}),[]),l.createElement(l.Fragment,null,l.createElement(c._W,{h1:i,title:p,description:u,image:null===(n=a.frontmatter.image)||void 0===n?void 0:n.publicURL},l.createElement(c.MV,{post:a.frontmatter,imageData:null==g||null===(t=g.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},d?l.createElement(c.G8,{headings:a.tableOfContents}):null,l.createElement("div",{className:"page__content"},r,l.createElement(c.Mf,{prev:s,next:m})),l.createElement(c.QZ,null))))}function i(e){return l.createElement(m,e,l.createElement(s,e))}},8876:function(e,n,t){t.d(n,{MN:function(){return r}});var a=t(4424);const l=a.createContext({});function r(e){const n=a.useContext(l);return a.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);