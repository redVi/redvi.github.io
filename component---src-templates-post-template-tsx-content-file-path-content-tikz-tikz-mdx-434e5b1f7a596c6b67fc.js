"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[6332],{9640:function(e,n,t){t.r(n),t.d(n,{Head:function(){return s.Ss},default:function(){return d}});var a=t(8876),l=t(4424),i=t(8860);function c(e){const n=Object.assign({p:"p",ol:"ol",li:"li",a:"a",strong:"strong",h2:"h2",span:"span",code:"code",pre:"pre",ul:"ul",em:"em"},(0,a.MN)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"В современном мире нельзя представить человека, который не работает с какими\nбы то ни было данными. Прежде всего под данными здесь будет подразумеваться\nинформация. При работе с информацией зачастую встаёт сразу две проблемы:"),"\n",l.createElement(n.ol,null,"\n",l.createElement(n.li,null,"Информации слишком много. Найти можно всё. Трудно выбрать действительно\nполезные материалы."),"\n",l.createElement(n.li,null,"Информацию приходится как-то структурировать, дабы получить не отрывочную, но\nцелостную картину изучаемой области."),"\n"),"\n",l.createElement(n.p,null,"И если с первой проблемой справляться остаётся лишь методом перебора, то во\nвтором случае можно прибегнуть к маленькой хитрости и обратиться к\n",l.createElement(n.a,{href:"/posts/texreview/"},"LaTeX"),", чем и займёмся."),"\n",l.createElement(n.p,null,"Не секрет, что для работы с графикой в LaTeX принято использовать замечательный\nпакет, имя которому ",l.createElement(n.strong,null,"TikZ"),". В сегодняшнем примере постараюсь коротко объяснить как\nс его помощью можно составлять такую распространённую ныне вещь как\nмайнд-карта, создавать деревья и цепочки."),"\n",l.createElement(n.h2,{id:"mind-map",style:{position:"relative"}},l.createElement(n.a,{href:"#mind-map","aria-label":"mind map permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Mind map"),"\n",l.createElement(n.p,null,"Красивых примеров майнд-карт в сети предостаточно. Дабы не\nвыдумывать свой велосипед, предлагается взять за основу отличную карту господина ",l.createElement(n.a,{href:"http://www.texample.net/tikz/examples/computer-science-mindmap/",target:"_blank",rel:"nofollow"},"Till\nTantau"),",\nдобавить один уровень вложенности, выровнять блоки и включить информацию о временах глагола английского\nязыка. Разумеется, не глаголами едиными жив человек, и читатель спокойно может\nвидоизменить карту под свои нужды."),"\n",l.createElement(n.p,null,"Итоговый вариант должен быть похожим на часть изображения ниже:"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1024px; flex:1;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 96.33333333333334%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/ee69e255fdfafc447392f677dc75e0c3/e93cc/tikz1.webp 300w,\n/static/ee69e255fdfafc447392f677dc75e0c3/b0544/tikz1.webp 600w,\n/static/ee69e255fdfafc447392f677dc75e0c3/53334/tikz1.webp 1024w"\n              sizes="(max-width: 1024px) 100vw, 1024px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/ee69e255fdfafc447392f677dc75e0c3/73b64/tikz1.jpg 300w,\n/static/ee69e255fdfafc447392f677dc75e0c3/3ad8d/tikz1.jpg 600w,\n/static/ee69e255fdfafc447392f677dc75e0c3/c3413/tikz1.jpg 1024w"\n            sizes="(max-width: 1024px) 100vw, 1024px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/ee69e255fdfafc447392f677dc75e0c3/c3413/tikz1.jpg"\n            alt="MindMap"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",l.createElement(i.y,null,l.createElement(n.p,null,"Вместо LaTeX можно опробовать программу FreeMind, это дело вкуса.")),"\n",l.createElement(n.p,null,"Для наглядности (дабы сразу можно было видеть результат сделанных правок) в\nLinux можно использовать услуги редактора Gummi, а пользователям Emacs\nоткрыть предпросмотр командой ",l.createElement(n.code,null,"C-c C-v"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-tex"},"\\documentclass[a4paper]{article} % размер, класс документа\n\\usepackage[russian]{babel} % поддержка кириллицы\n\\usepackage[utf8]{inputenc} % кодировка UTF-8\n\\usepackage{tikz} % подключить пакет TikZ\n\\usetikzlibrary{mindmap,trees} % библиотеки TikZ\n\\usepackage{verbatim} % нужен, если включать блок comment\n\n\\begin{document} % начало документа\n\\pagestyle{empty} % не нумеровать страницы\n\n\\begin{comment} % комментарий\n:Title: Времена английских глаголов\n:Tags: Mindmap\n:Author: me\n\\end{comment} % конец комментария\n\n\\begin{tikzpicture} % начало блока TikZ\n  \\path[mindmap,\n  % положение узлов 1 уровня относительно друг друга\n  level 1 concept/.append style={level distance=120,sibling angle=150},\n  grow cyclic,\n  % цвет основного блока и текста\n  concept color=black!90,text=white]\n    node[concept] {VERBS} % первичный/корневой узел\n    % 1 уровень\n    child[concept color=red!90!black] {\n      node[concept] {Simple}\n      % 2 уровень\n      child [concept color=red!70!black] {\n        node[concept] {\n        \\underline{Present} \\\\ V/V(es)}\n        % 3 уровень\n        child [concept] { node[concept] {regular action} }\n        child [concept] { node[concept] {work} }\n        }\n      % 2 уровень\n      child [concept color=red!80!black] {\n        node[concept] {Past \\\\ V(ed)/V2}\n        % 3 уровень\n          child [concept]{\n            node [concept] {action in the past}\n          }\n          child [concept]{ node [concept] {workED}}\n        }\n    };\n\\end{tikzpicture} % конец блока TikZ\n\\end{document} % конец документа\n")),"\n",l.createElement(n.p,null,"Рекомендуется немного поэкспериментировать с уровнями вложенности, дабы понять\nих. Также отметим, что:"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.em,null,"child")," описывает характеристики узла, содержит узлы (кроме первичного)"),"\n",l.createElement(n.li,null,l.createElement(n.em,null,"concept")," проводит линию, соединяющую элементы"),"\n",l.createElement(n.li,null,l.createElement(n.em,null,"node")," представляет собой узел (элемент)"),"\n"),"\n",l.createElement(n.p,null,"Полный вариант данной карты можно забрать\n",l.createElement(n.a,{href:"https://gist.github.com/redVi/10005075",target:"_blank",rel:"nofollow"},"отсюда"),". Разумеется, при должном умении\nесть шанс сделать куда более красивые и функциональные карты: добавить фон, тень, заметки и прочая-прочая."),"\n",l.createElement(n.h2,{id:"деревья",style:{position:"relative"}},l.createElement(n.a,{href:"#%D0%B4%D0%B5%D1%80%D0%B5%D0%B2%D1%8C%D1%8F","aria-label":"деревья permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Деревья"),"\n",l.createElement(n.p,null,"Вряд ли такой структуре как дерево можно дать много определений. Дерево\nпредставляет собой иерархическую структуру связанных друг с другом элементов\n— узлов, верхний из которых является корневым. От верхнего уровня к другим\nвершинам проходят рёбра. Вершины, не имеющие рёбер, называются листьями."),"\n",l.createElement(n.p,null,"Впрочем, зачем долго описывать теорию, когда при помощи рисунка можно быстро и\nнаглядно отобразить само дерево? Вот оно:"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1024px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 46.666666666666664%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/42af16453ad9ba1fae36dda971447fb9/e93cc/tikz2.webp 300w,\n/static/42af16453ad9ba1fae36dda971447fb9/b0544/tikz2.webp 600w,\n/static/42af16453ad9ba1fae36dda971447fb9/53334/tikz2.webp 1024w"\n              sizes="(max-width: 1024px) 100vw, 1024px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/42af16453ad9ba1fae36dda971447fb9/73b64/tikz2.jpg 300w,\n/static/42af16453ad9ba1fae36dda971447fb9/3ad8d/tikz2.jpg 600w,\n/static/42af16453ad9ba1fae36dda971447fb9/c3413/tikz2.jpg 1024w"\n            sizes="(max-width: 1024px) 100vw, 1024px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/42af16453ad9ba1fae36dda971447fb9/c3413/tikz2.jpg"\n            alt="LaTeX Ruby Classes"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",l.createElement(n.p,null,"Начнём с построения элементов одного уровня, далее будем наблюдать как\nпредставленное дерево «разрастается». В то же время слишком глубоких\nуровней здесь не представлено (безусловно, таковые могут наличествовать, если они\nнужны)."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-tex"},"\\usetikzlibrary{trees} % только деревья, библиотека mindmap не требуется\n% установим границы полей, дабы рисунок вместился целиком\n\\usepackage[left=2cm,right=2cm,\n    top=2cm,bottom=2cm,bindingoffset=0cm]{geometry}\n\n\\begin{document}\n\\tikz % блок tikz\n  \\node {Object} % корень дерева\n    child { node {Nil Class}} % первый уровень\n    child { node {True Class}}\n    child { node {False Class}}\n    child { node {Numeric}}\n    child { node {Time}}\n    child { node {Date}}\n;\n\\end{document} % end document\n")),"\n",l.createElement(n.p,null,"Если долго продолжать в том же духе, вскоре ничего нельзя будет разобрать из-за\nтого, что ветки уровней смешаются между собой. Чтобы избежать такой неприятности\nзададим дистанцию для первого и второго уровня, которые будут использоваться в\nэтой схеме."),"\n",l.createElement(n.p,null,"Перед началом блока ",l.createElement(n.em,null,"tikz")," допишем:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-tex"},"% Стили для уровней\n\\tikzstyle{level 1}=[level distance=5.5cm, sibling distance=2.5cm]\n\\tikzstyle{level 2}=[level distance=3.5cm, sibling distance=2cm]\n")),"\n",l.createElement(n.p,null,"Здесь ",l.createElement(n.em,null,"level distance")," позволит регулировать длину рёбер, а ",l.createElement(n.em,null,"sibling distance")," распределить\nветки уровней так, чтобы они не соприкасались друг с другом. Расстояние в каждом\nслучае подбирается в соответствии с вашими эстетическими предпочтениями."),"\n",l.createElement(n.p,null,"Теперь можно привести полное содержание файла:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-tex"},"\\documentclass[a4paper, landscape]{article}\n\\usepackage[russian]{babel}\n\\usepackage[utf8]{inputenc} % UTF-8\n\\usepackage{tikz}\n\\usetikzlibrary{trees}\n\\usepackage{verbatim}\n\\usepackage[left=2cm,right=2cm,\n    top=2cm,bottom=2cm,bindingoffset=0cm]{geometry}\n\n\\begin{document}\n\\pagestyle{empty}\n\n% Set style of the trees\n\\tikzstyle{level 1}=[level distance=5.5cm, sibling distance=2.5cm]\n\\tikzstyle{level 2}=[level distance=2.5cm, sibling distance=2cm]\n\n\\tikz\n  \\node {Object}\n    child { node {Nil Class}}\n    child { node {True Class}}\n    child { node {False Class}}\n    child { node {Numeric}\n      child { node {Integer}\n        child { node {Fixnum}}\n        child { node {Bignum}}\n      }\n      child { node {Float}}\n      child { node {Complex}}\n    }\n    child { node {Time}}\n    child { node {Date}}\n    child { node {String}}\n    child { node {Range}}\n    child { node {Struct}\n      child { node {Struct::Tms}}\n    }\n    child { node {Array}}\n    child { node {Hash}}\n;\n\\end{document} % end document\n")),"\n",l.createElement(n.p,null,"Дальше интереснее: плавно переходим к цепочкам."),"\n",l.createElement(n.h2,{id:"цепочки",style:{position:"relative"}},l.createElement(n.a,{href:"#%D1%86%D0%B5%D0%BF%D0%BE%D1%87%D0%BA%D0%B8","aria-label":"цепочки permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Цепочки"),"\n",l.createElement(n.p,null,"Такое название дано исходя из главной особенности структуры в LaTeX — цепочка,\nchain. В реальности эта модель скорее представляет собой граф (совокупность\nвершин и рёбер, нелинейная многосвязная структура с произвольным количеством элементов)."),"\n",l.createElement(n.p,null,"Хотя наш граф будет совсем не сложен, тем не менее, потребуется подключить\nмножество библиотек ",l.createElement(n.em,null,"TikZ"),", которые могут сослужить неплохую\nслужбу при составлении различных блоков."),"\n",l.createElement(n.p,null,"Указывать цвет также станем немного иначе: сначала зададим определённую гамму цветов в\nзаголовке документа, а затем будем использовать их. Разговор о цвете однажды уже\nзаходил. Подробности иметюся в заметке ",l.createElement(n.a,{href:"/posts/hyperref/"},"о навигации по документу"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-tex"},"\\documentclass[a4paper]{article}\n\\usepackage[russian]{babel}\n\\usepackage[utf8]{inputenc}\n\\usepackage{tikz}\n% библиотеки\n\\usetikzlibrary{%\n  arrows, % стрелки\n  shapes.misc, % фигуры\n  chains, % цепочки\n  positioning, % позиционирование элементов\n  scopes, % создание дополнительных веток\n  shadows % тени\n}\n% указание цветов\n\\definecolor{Gray}{RGB}{102,102,102}\n\\definecolor{LightGray}{RGB}{178,178,178}\n\\definecolor{Red}{RGB}{204,0,0}\n\\definecolor{Pink}{RGB}{255,102,102}\n")),"\n",l.createElement(n.p,null,"Что можно разукрасить:"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.em,null,"draw")," цвет границы"),"\n",l.createElement(n.li,null,l.createElement(n.em,null,"top color")," верхний цвет"),"\n",l.createElement(n.li,null,l.createElement(n.em,null,"bottom color")," нижний цвет"),"\n",l.createElement(n.li,null,l.createElement(n.em,null,"color")," цвет текста"),"\n"),"\n",l.createElement(n.p,null,"Как можно позиционировать элементы:"),"\n",l.createElement(n.ul,null,"\n",l.createElement(n.li,null,l.createElement(n.em,null,"riglt/left")," справа или слева от элемента"),"\n",l.createElement(n.li,null,l.createElement(n.em,null,"below right/above right")," ниже/выше справа от элемента"),"\n",l.createElement(n.li,null,l.createElement(n.em,null,"xshift/yshift=5mm")," сдвиг по оси X/Y"),"\n"),"\n",l.createElement(n.p,null,"Что должно получиться в первом шаге:"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 283px; flex:1;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 90.81272084805653%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/f092bf1705294aa2ae268749cb3f4dd9/a7a63/tikz3.webp 283w"\n              sizes="(max-width: 283px) 100vw, 283px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/f092bf1705294aa2ae268749cb3f4dd9/8a34b/tikz3.png 283w"\n            sizes="(max-width: 283px) 100vw, 283px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/f092bf1705294aa2ae268749cb3f4dd9/8a34b/tikz3.png"\n            alt="Chain First Step"\n            title="First Chain"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-tex"},"\\begin{document}\n% установки для элементов\n\\tikzset{\nnonterminal/.style={\n    rectangle, % обычный прямоугольник\n    % размер блока\n    minimum size=6mm,\n    very thick, % двойная линия\n    draw=Gray, % указываем заданный ранее цвет\n    % цвета узлов\n    top color=white,\n    bottom color=LightGray,\n    % шрифт\n    font=\\itshape\n  },\nterminal/.style={\n    rounded rectangle, % прямоугольник со скруглёнными углами\n    drop shadow={opacity=0.35}, % тень от узлов\n    minimum size=6mm, % размер узла\n    very thick, % двойная линия\n    draw=black!50, % цвет обводки\n    top color=white,bottom color=black!20, % цвета градиента\n    font=\\ttfamily} % шрифт\n}\n% начало блока\n\\begin{tikzpicture}[node distance=5mm and 5mm] % дистанция между узлами\n  % используем позиционирование (right/left/above right/above left=of something)\n  \\node (dot)[terminal]{.};\n  \\node (digit) [terminal, right=of dot, yshift=5mm] {digit};\n  \\node (root)[nonterminal, bottom color=Pink, right=of digit] {root};\n  \\node (name) [terminal, below right=of dot] {name};\n  \\node (name2) [terminal, below right=of name, color=Pink] {name2};\n\\end{tikzpicture} % конец блока\n\\end{document}\n")),"\n",l.createElement(n.p,null,"Если всё получилось, можно переходить к следующему шагу: визуальному\nсвязыванию узлов. Свяжем их в ранее упомянутую цепочку: ",l.createElement(n.em,null,"chain"),". Для этого\nзададим один параметр для стиля узлов и «начнём» цепочку указанием ",l.createElement(n.em,null,"start chain"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-tex"},"% ...\n\\tikzset{\n    every node/.style={on chain},\n% ...\n    \\begin{tikzpicture}[start chain]\n")),"\n",l.createElement(n.p,null,"В примере ниже нужно будет вручную проводить связующие стрелки между узлами. Их\nрасположение относительно друг друга гибко регулируется. На выходе получится\nследующее:"),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 300px; flex:1;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 132%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/4445e31e116c551e7b1a7c8f73034f86/e93cc/tikz4.webp 300w"\n              sizes="(max-width: 300px) 100vw, 300px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/4445e31e116c551e7b1a7c8f73034f86/eed55/tikz4.png 300w"\n            sizes="(max-width: 300px) 100vw, 300px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/4445e31e116c551e7b1a7c8f73034f86/eed55/tikz4.png"\n            alt="On Chain"\n            title="On Chain"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-tex"},"\\begin{tikzpicture}[start chain, node distance=5mm and 5mm] % начало цепочки\n  \\node (dot)[terminal]{.};\n  \\node (digit) [terminal, right=of dot, yshift=5mm] {digit};\n  \\node\n  (root)[nonterminal, minimum size=10mm, bottom color=Pink, right=of digit] {root};\n  % связь узла root к узлу name\n  \\node (name) [terminal, join=with root, below right=of dot] {name};\n  \\node (name2) [terminal, below right=of name, color=Pink] {name2};\n    % ответвление от name2\n    \\begin{scope}[start branch=plus]\n      \\node (plus)[terminal, on chain=going above right] {+};\n      \\node (plus2)[terminal, on chain=going below right] {++};\n     \\end{scope}\n     % ответвление от name2\n     \\begin{scope}[start branch=minus]\n       \\node (minus) [terminal, on chain=going below left] {-};\n       \\node (minus2) [terminal, on chain=going below right] {--};\n     \\end{scope}\n\\end{tikzpicture}\n")),"\n",l.createElement(n.p,null,"Также можно автоматически соединить все узлы от первого к\nпоследнему. При этом ответвления (branch) будут соединены со своим главным узлом."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-tex"},"every node/.style={on chain, join}, % соединить все узлы\nevery join/.style={-}, % линии без стрелок\n% every join/.style={->}, % или со стрелками\n")),"\n",l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 300px; flex:1;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 148%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/53ebf777c7f776b792e6ee0d9ea94dc8/e93cc/tikz5.webp 300w"\n              sizes="(max-width: 300px) 100vw, 300px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/53ebf777c7f776b792e6ee0d9ea94dc8/eed55/tikz5.png 300w"\n            sizes="(max-width: 300px) 100vw, 300px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/53ebf777c7f776b792e6ee0d9ea94dc8/eed55/tikz5.png"\n            alt="&quot;LaTeX chains&quot;"\n            title="LaTeX chains"\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",l.createElement(n.p,null,"Углубляться дальше, пожалуй, не станем. С помощью описанных сегодня конструкций вполне\nнеплохо можно жить. Тем, кому этих незамысловатых способов структурирования\nинформации не хватает или же перед кем стоят куда более серьёзные задачи\nнастоятельно рекомендуется обратиться к ",l.createElement(n.a,{href:"http://www.texample.net/tikz/builds/",target:"_blank",rel:"nofollow"},"документации по ",l.createElement(n.em,null,"TikZ")),",\nгде полностью разъяснены те аспекты, что были рассмотрены сегодня, и многое сверх\nтого. Документация добротная, всеобъемлющая, её хватит даже самому искушённому «графоману»."))}var r=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,a.MN)(),e.components);return n?l.createElement(n,e,l.createElement(c,e)):c(e)},s=t(7792),o=t(7619);function m(e){var n,t;let{data:{mdx:a},children:i,pageContext:{prev:c,next:r}}=e;const{h1:m,title:d,description:p,image:g,table_of_contents:u}=a.frontmatter;return(0,l.useEffect)((()=>{(0,o.K)()}),[]),l.createElement(l.Fragment,null,l.createElement(s._W,{h1:m,title:d,description:p,image:null===(n=a.frontmatter.image)||void 0===n?void 0:n.publicURL},l.createElement(s.MV,{post:a.frontmatter,imageData:null==g||null===(t=g.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},u?l.createElement(s.G8,{headings:a.tableOfContents}):null,l.createElement("div",{className:"page__content"},i,l.createElement(s.Mf,{prev:c,next:r})),l.createElement(s.QZ,null))))}function d(e){return l.createElement(m,e,l.createElement(r,e))}},8860:function(e,n,t){t.d(n,{y:function(){return a.y}});var a=t(3836)},8876:function(e,n,t){t.d(n,{MN:function(){return i}});var a=t(4424);const l=a.createContext({});function i(e){const n=a.useContext(l);return a.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);