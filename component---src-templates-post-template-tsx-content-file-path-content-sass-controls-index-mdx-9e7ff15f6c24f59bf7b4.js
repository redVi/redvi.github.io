"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[7920],{9312:function(n,a,s){s.r(a),s.d(a,{Head:function(){return o.Ss},default:function(){return i}});var e=s(8876),t=s(4424);function p(n){const a=Object.assign({p:"p",em:"em",h2:"h2",a:"a",span:"span"},(0,e.MN)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"Управляющие конструкции препроцессоров — основа, позволяющая сократить\nисходный код в несколько раз и сделать возможным написание собственного\nCSS-фреймворка. Данный материал тем, кто начинает работать с ",t.createElement(a.em,null,"любым")," препроцессором: понимаешь один — понимаешь все."),"\n",t.createElement(a.p,null,"Все управляющие конструкции SASS начинаются с символа @: «коммерческое at».\nВ SASS их целых четыре вида."),"\n",t.createElement(a.h2,{id:"for",style:{position:"relative"}},t.createElement(a.a,{href:"#for","aria-label":"for permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"@for"),"\n",t.createElement(a.p,null,"Запись ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@for $var from &lt;start> through &lt;end></code>'}})," читается как: для каждого элемента от\nстартовой точки до конечной."),"\n",t.createElement(a.p,null,"Представьте, что у вас 100 иконок с разным значением ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">background-image</code>'}}),".\nРазумеется, базовый класс, общий для всех, тоже есть. Что делать? Итерацию с ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@for</code>'}}),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sass"><pre class="language-sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$img</span><span class="token punctuation">:</span> \'assets<span class="token operator">/</span>images\';  <span class="token operator">/</span><span class="token operator">*</span> физическое расположение иконок <span class="token operator">*</span><span class="token operator">/</span></span>\n<span class="token variable-line"><span class="token variable">$class-slug</span><span class="token punctuation">:</span> \'icon\';    <span class="token operator">/</span><span class="token operator">*</span> базовое имя класса <span class="token operator">*</span><span class="token operator">/</span></span>\n\n<span class="token comment">/* модифицировать каждую из ста иконок */</span>\n<span class="token atrule-line"><span class="token atrule">@for</span> $i from 1 through 100 {</span>\n  <span class="token selector">.#{$class-slug}__#{$i} {</span>\n<span class="token property-line">    <span class="token property">background-image</span><span class="token punctuation">:</span> url("<span class="token variable">#{$img}</span><span class="token operator">/</span><span class="token variable">#{$class-slug}</span>-<span class="token variable">#{$i}</span>.svg");</span>\n  <span class="token selector">}</span>\n<span class="token selector">}</span>\n\n<span class="token comment">/* получаем в итоге */</span>\n<span class="token selector">.icon__1 {</span>\n<span class="token property-line">  <span class="token property">background-image</span><span class="token punctuation">:</span> url("assets<span class="token operator">/</span>images<span class="token operator">/</span>icon-1.svg");</span>\n<span class="token selector">}</span>\n\n<span class="token selector">.icon__100 {</span>\n<span class="token property-line">  <span class="token property">background-image</span><span class="token punctuation">:</span> url("assets<span class="token operator">/</span>images<span class="token operator">/</span>icon-100.svg");</span>\n<span class="token selector">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Да, называть иконки таким образом не всегда разумно, но для понимания цикла сгодится.\nВозможно, реальные примеры кода из репозитория Bootstrap понравятся вам больше.\nРекомендую взглянуть как-нибудь на четвёртую версию фреймворка, которая написана\nна SASS."),"\n",t.createElement(a.h2,{id:"if",style:{position:"relative"}},t.createElement(a.a,{href:"#if","aria-label":"if permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"@if"),"\n",t.createElement(a.p,null,"Обычное условие. Часто используется в подпрограммах.\nКод ниже описывает подпрограмму, которая принимает аргумент ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">boolean</code>'}}),". Если\nусловие истинно, значение ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">display</code>'}})," элемента блочное, в противном случае —\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">flexbox</code>'}}),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sass"><pre class="language-sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$boolean</span><span class="token punctuation">:</span> true !default;</span>\n\n<span class="token comment">/* создание подпрограммы */</span>\n<span class="token atrule-line"><span class="token atrule">@mixin</span> display-type($boolean) {</span>\n<span class="token atrule-line">  <span class="token atrule">@if</span> $boolean <span class="token atrule">=</span><span class="token atrule">=</span> true {</span>\n<span class="token property-line">    <span class="token property">display</span><span class="token punctuation">:</span> block;</span>\n  <span class="token selector">}</span>\n<span class="token atrule-line">  <span class="token atrule">@else</span> {</span>\n<span class="token property-line">    <span class="token property">display</span><span class="token punctuation">:</span> flex;</span>\n  <span class="token selector">}</span>\n<span class="token selector">}</span>\n\n<span class="token comment">/* включаем наш mixin с аргументом, отличным от false, в класс .block-type */</span>\n<span class="token selector">.block-type {</span>\n<span class="token atrule-line">  <span class="token atrule">@include</span> display-type(false);</span>\n<span class="token selector">}</span>\n\n<span class="token comment">/* получаем в итоге */</span>\n<span class="token selector">.block-type {</span>\n<span class="token property-line">  <span class="token property">display</span><span class="token punctuation">:</span> flex;</span>\n<span class="token selector">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"each",style:{position:"relative"}},t.createElement(a.a,{href:"#each","aria-label":"each permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"@each"),"\n",t.createElement(a.p,null,"Выручает, когда вы имеете дело с массивом. SASS будет использовать ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@list</code>'}})," для\nвычленения из него всех указанных элементов. В данном случае задача: менять аватары\nавторов."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sass"><pre class="language-sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$list</span><span class="token punctuation">:</span> (adam, john, wynn, mason, ivan);</span>\n\n<span class="token selector">.author-images {</span>\n<span class="token atrule-line">  <span class="token atrule">@each</span> $author in $list {</span>\n    <span class="token selector">&amp;--#{$author} {</span>\n<span class="token property-line">      <span class="token property">background</span><span class="token punctuation">:</span> image-url("<span class="token variable">#{$img}</span><span class="token operator">/</span><span class="token variable">#{$author}</span>.png") no-repeat;</span>\n    <span class="token selector">}</span>\n  <span class="token selector">}</span>\n<span class="token selector">}</span>\n\n<span class="token comment">/* получаем в итоге */</span>\n<span class="token selector">.author-images--adam {</span>\n<span class="token property-line">  <span class="token property">background</span><span class="token punctuation">:</span> image-url("assets<span class="token operator">/</span>images<span class="token operator">/</span>adam.png") no-repeat;</span>\n<span class="token selector">}</span>\n\n<span class="token selector">.author-images--john {</span>\n<span class="token property-line">  <span class="token property">background</span><span class="token punctuation">:</span> image-url("assets<span class="token operator">/</span>images<span class="token operator">/</span>john.png") no-repeat;</span>\n<span class="token selector">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Ещё один пример: снова иконки. На этот раз они не безымянны и не бесцветны.\nИзначально задаём нужные параметры (в примере цвет), а затем для каждой своё\nназвание и соответствующий ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">background</code>'}}),". Обратите внимание на то, что массив\nувеличился, теперь используются по два значения на итерацию."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sass"><pre class="language-sass"><code class="language-sass"><span class="token comment">/* цвета удобнее задать в одном месте */</span>\n<span class="token variable-line"><span class="token variable">$twi</span><span class="token punctuation">:</span>   #41b7d8;</span>\n<span class="token variable-line"><span class="token variable">$fb</span><span class="token punctuation">:</span>    #3b5997;</span>\n<span class="token variable-line"><span class="token variable">$gplus</span><span class="token punctuation">:</span> #d64937;</span>\n\n\n<span class="token comment">/* массив $social со значениями: название и цвет */</span>\n<span class="token variable-line"><span class="token variable">$social</span><span class="token punctuation">:</span> (twitter, <span class="token variable">$twi</span>),</span>\n         <span class="token selector">(facebook, $fb)</span><span class="token punctuation">,</span>\n         <span class="token selector">(googleplus, $gplus);</span>\n\n\n<span class="token comment">/* перебираем */</span>\n<span class="token atrule-line"><span class="token atrule">@each</span> $socialnetwork, $color in $social {</span>\n  <span class="token selector">.social-link--#{$socialnetwork} {</span>\n<span class="token property-line">    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token variable">$color</span>;</span>\n<span class="token property-line">    <span class="token property">&amp;</span><span class="token punctuation">:</span><span class="token property">focus,</span></span>\n<span class="token property-line">    <span class="token property">&amp;</span><span class="token punctuation">:</span><span class="token property">hover</span> {</span>\n<span class="token property-line">      <span class="token property">background-color</span><span class="token punctuation">:</span> darken(<span class="token variable">$color</span>, 5<span class="token operator">%</span>);</span>\n    <span class="token selector">}</span>\n  <span class="token selector">}</span>\n<span class="token selector">}</span>\n\n<span class="token comment">/* получаем в итоге */</span>\n<span class="token selector">.social-link--twitter {</span>\n<span class="token property-line">  <span class="token property">background-color</span><span class="token punctuation">:</span> #41b7d8;</span>\n<span class="token selector">}</span>\n<span class="token property-line"><span class="token property">.social-link--twitter</span><span class="token punctuation">:</span><span class="token property">focus,</span> <span class="token property">.social-link--twitter</span><span class="token punctuation">:</span><span class="token property">hover</span> {</span>\n<span class="token property-line">  <span class="token property">background-color</span><span class="token punctuation">:</span> #2cafd4;</span>\n<span class="token selector">}</span></code></pre></div>'}}),"\n",t.createElement(a.h2,{id:"while",style:{position:"relative"}},t.createElement(a.a,{href:"#while","aria-label":"while permalink",className:"anchor before"},t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"@while"),"\n",t.createElement(a.p,null,"Для цикла ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">@while</code>'}})," нужны два параметра: переменная и шаг. Пока величина шага\nудовлетворяет условию, происходит преобразование переменной. При каждой итерации\nшаг увеличивается."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="sass"><pre class="language-sass"><code class="language-sass"><span class="token variable-line"><span class="token variable">$color</span><span class="token punctuation">:</span> #e44;</span>\n<span class="token variable-line"><span class="token variable">$step</span><span class="token punctuation">:</span> 1;</span>\n\n<span class="token atrule-line"><span class="token atrule">@while</span> $step &lt;<span class="token atrule">=</span> 5 {</span>\n  <span class="token selector">.palette-#{$step} {</span>\n<span class="token property-line">    <span class="token property">background-image</span><span class="token punctuation">:</span> linear-gradient(</span>\n      <span class="token selector">to bottom</span><span class="token punctuation">,</span>\n      <span class="token function">darken</span><span class="token punctuation">(</span>$color<span class="token punctuation">,</span> <span class="token punctuation">(</span>$step * 2%<span class="token punctuation">)</span><span class="token punctuation">)</span> 0%<span class="token punctuation">,</span>\n      <span class="token function">darken</span><span class="token punctuation">(</span>$color<span class="token punctuation">,</span> <span class="token punctuation">(</span>$step * 10%<span class="token punctuation">)</span><span class="token punctuation">)</span> 100%\n    <span class="token selector">);</span>\n<span class="token variable-line">    <span class="token variable">$step</span><span class="token punctuation">:</span> <span class="token variable">$step</span> <span class="token operator">+</span> 1;</span>\n  <span class="token selector">}</span>\n<span class="token selector">}</span>\n\n<span class="token comment">/* получаем в итоге */</span>\n<span class="token selector">.palette-1 {</span>\n<span class="token property-line">  <span class="token property">background-image</span><span class="token punctuation">:</span> linear-gradient(to bottom, #ed3b3b 0<span class="token operator">%</span>, #ea1515 100<span class="token operator">%</span>);</span>\n<span class="token selector">}</span>\n\n<span class="token selector">.palette-2 {</span>\n<span class="token property-line">  <span class="token property">background-image</span><span class="token punctuation">:</span> linear-gradient(to bottom, #ec3131 0<span class="token operator">%</span>, #bb1111 100<span class="token operator">%</span>);</span>\n<span class="token selector">}</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Надеюсь, этот небольшой экскурс будет кому-то полезен. Для более подробного\nознакомления с особенностями SASS следует читать официальную документацию.\nПримеры там абстрактные, но это не помешает сообразить как их применить\nна практике."))}var l=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.MN)(),n.components);return a?t.createElement(a,n,t.createElement(p,n)):p(n)},o=s(7792),c=s(7619);function r(n){var a,s;let{data:{mdx:e},children:p,pageContext:{prev:l,next:r}}=n;const{h1:i,title:k,description:u,image:g,table_of_contents:m}=e.frontmatter;return(0,t.useEffect)((()=>{(0,c.K)()}),[]),t.createElement(t.Fragment,null,t.createElement(o._W,{h1:i,title:k,description:u,image:null===(a=e.frontmatter.image)||void 0===a?void 0:a.publicURL},t.createElement(o.MV,{post:e.frontmatter,imageData:null==g||null===(s=g.childImageSharp)||void 0===s?void 0:s.gatsbyImageData},m?t.createElement(o.G8,{headings:e.tableOfContents}):null,t.createElement("div",{className:"page__content"},p,t.createElement(o.Mf,{prev:l,next:r})),t.createElement(o.QZ,null))))}function i(n){return t.createElement(r,n,t.createElement(l,n))}},8876:function(n,a,s){s.d(a,{MN:function(){return p}});var e=s(4424);const t=e.createContext({});function p(n){const a=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);