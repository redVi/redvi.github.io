"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[7584],{4804:function(n,s,a){a.r(s),a.d(s,{Head:function(){return l.Ss},default:function(){return k}});var t=a(8876),e=a(4424),p=a(8860);function o(n){const s=Object.assign({p:"p",span:"span",h2:"h2",a:"a",h3:"h3",ul:"ul",li:"li"},(0,t.MN)(),n.components);return e.createElement(e.Fragment,null,e.createElement(s.p,null,"У разработчиков двойственные впечатления о redux-saga. Кто-то любит саги, кто-то считает\nих бесполезными. Автор придерживается мнения, что саги удобны: они позволяют\nотделить логику взаимодействия с REST API, задать последовательность событий\nи реагировать на них."),"\n",e.createElement(s.p,null,"Предлагаю пробежаться по настройке саг в связке с ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">redux-toolkit</code>'}}),",\nпонять в какой момент они начинают работать и решить для себя нужны они вам\nили нет. Для любопытных ссылки на первоисточники в конце поста."),"\n",e.createElement(p.y,{heading:"Примечание"},e.createElement(s.p,null,"Заметка будет полезна тем, кто уже знаком с основными понятиями redux.\nЕсли читатель никогда не пользовался этим менеджером состояния, многое\nможет казаться странным из-за специфической терминологии.")),"\n",e.createElement(s.p,null,"Дабы не разводить кашу из switch-инструкций оригинального ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">redux</code>'}}),", воспользуемся\nвспомогательным средством в виде ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">redux-toolkit</code>'}}),". Для быстрого старта\nкак всегда берём ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">react-create-app</code>'}}),"."),"\n",e.createElement(s.p,null,"Установка зависимостей:"),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ npx create-react-app saga_app\n$ <span class="token builtin class-name">cd</span> saga_app\n$ <span class="token function">npm</span> i axios redux react-redux @reduxjs/toolkit redux-saga redux-saga-routines</code></pre></div>'}}),"\n",e.createElement(s.h2,{id:"redux-toolkit",style:{position:"relative"}},e.createElement(s.a,{href:"#redux-toolkit","aria-label":"redux toolkit permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Redux Toolkit"),"\n",e.createElement(s.p,null,"В этом разделе приведён небольшой пример работы с ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">redux-toolkit</code>'}}),". Обычный\nсчётчик, значение которого можно уменьшать или увеличивать. Если читатель\nзахочет проверить нижеизложенное на практике, упомянутые файлы\nнужно создать самостоятельно."),"\n",e.createElement(s.p,null,"Нам понадобятся  стандартные ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">actions</code>'}})," и ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reducer</code>'}}),". Когда вызывается ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">action</code>'}}),",\nна событие реагирует ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reducer</code>'}})," — чистая функция, возвращающая новое состояние."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/store/counter.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createAction<span class="token punctuation">,</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@reduxjs/toolkit\'</span>\n\n<span class="token comment">// action creators</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> increment <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">\'counter/INCREMENT\'</span><span class="token punctuation">)</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> decrement <span class="token operator">=</span> <span class="token function">createAction</span><span class="token punctuation">(</span><span class="token string">\'counter/DECREMENT\'</span><span class="token punctuation">)</span>\n\n<span class="token comment">// reducer принимает начальное состояние 0</span>\n<span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>increment<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>decrement<span class="token punctuation">.</span>type<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token parameter">state</span> <span class="token operator">=></span> state <span class="token operator">-</span> <span class="token number">1</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> counter</code></pre></div>'}}),"\n",e.createElement(s.p,null,"В главном файле хранилища подключаются редьюсеры и конфигурируется\nсамо хранилище."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/store/index.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@reduxjs/toolkit\'</span>\n<span class="token keyword">import</span> counter <span class="token keyword">from</span> <span class="token string">\'./counter\'</span>\n\n<span class="token comment">// можно передать несколько разных редьюсеров, у нас он пока один</span>\n<span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span> counter <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">reducer</span><span class="token operator">:</span> rootReducer<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Осталось подключить ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Provider</code>'}})," и передать ему ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">store</code>'}}),"."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// src/index.js</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> ReactDOM <span class="token keyword">from</span> <span class="token string">\'react-dom\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n\n<span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">\'./store\'</span>\n<span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">\'./app\'</span>\n\nReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>\n  document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">\'root\'</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Переходим к входной точке приложения. Здесь выводим начальное\nзначение счётчика и управляем им при помощи хука ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">useDispatch</code>'}}),"."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// src/app.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch<span class="token punctuation">,</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> increment<span class="token punctuation">,</span> decrement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./store/counter\'</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token comment">// получить значение счётчика</span>\n  <span class="token keyword">const</span> counter <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span><span class="token parameter">state</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>counter<span class="token punctuation">)</span>\n\n  <span class="token comment">// вызывать действие (action) при нажатии на кнопку</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleCounterIncrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">handleCounterDecrement</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">decrement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>counter<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleCounterIncrement<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">+ counter</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handleCounterDecrement<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">- counter</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre></div>'}}),"\n",e.createElement(s.h2,{id:"redux-saga",style:{position:"relative"}},e.createElement(s.a,{href:"#redux-saga","aria-label":"redux saga permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Redux Saga"),"\n",e.createElement(s.p,null,"Пример: есть авторизация. Отправляем логин и пароль, в ответ получаем токен.\nС этим токеном на руках идём за данными пользователя. Приступим."),"\n",e.createElement(s.h3,{id:"api",style:{position:"relative"}},e.createElement(s.a,{href:"#api","aria-label":"api permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"API"),"\n",e.createElement(s.p,null,"Подойдёт любой доступный на просторах интернета открытый API. Ну и что-нибудь, что будет\nк этому API обращаться, будь то ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">axios</code>'}})," или ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fetch</code>'}}),", не столь важно."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/api/instance.js</span>\n<span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">\'axios\'</span>\n\n<span class="token comment">// экземпляр axios</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">apiInstance</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> params\n  <span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token literal-property property">baseURL</span><span class="token operator">:</span> <span class="token string">\'https://reqres.in/api\'</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">headers</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string-property property">\'Content-Type\'</span><span class="token operator">:</span> <span class="token string">\'application/json\'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token literal-property property">timeout</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>token<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    config<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>Authorization <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Bearer </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>token<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Описание методов API для работы с данными пользователя."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/api/user.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> apiInstance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./instance\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> User <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">login</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> params\n    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">apiInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">\'/login\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function-variable function">getInfo</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> params\n    <span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">apiInstance</span><span class="token punctuation">(</span><span class="token punctuation">{</span> token <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> api<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'/users/1\'</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.h3,{id:"хранилище",style:{position:"relative"}},e.createElement(s.a,{href:"#%D1%85%D1%80%D0%B0%D0%BD%D0%B8%D0%BB%D0%B8%D1%89%D0%B5","aria-label":"хранилище permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Хранилище"),"\n",e.createElement(s.p,null,"Чтобы было удобнее обращаться с сагами, создаём роутины. Из них можно\nизвлечь action creators: ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">success</code>'}}),", ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fulfill</code>'}}),", ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">failure</code>'}})," и использовать чтобы\nотдать данные дальше редьюсеру или же обработать ошибку."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/store/user.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createReducer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@reduxjs/toolkit\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createRoutine <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-saga-routines\'</span>\n\n<span class="token comment">// state</span>\n<span class="token keyword">const</span> initialState <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token literal-property property">token</span><span class="token operator">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n  <span class="token literal-property property">info</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// routine теперь заменяет action creator</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> login <span class="token operator">=</span> <span class="token function">createRoutine</span><span class="token punctuation">(</span><span class="token string">\'user/LOG_IN\'</span><span class="token punctuation">)</span>\n\n<span class="token comment">// reducer откликается на созданные роутинами actions</span>\n<span class="token keyword">const</span> user <span class="token operator">=</span> <span class="token function">createReducer</span><span class="token punctuation">(</span>initialState<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>login<span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> token<span class="token punctuation">,</span> info <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">.</span>payload\n    <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token operator">...</span>state<span class="token punctuation">,</span> token<span class="token punctuation">,</span> info <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> user</code></pre></div>'}}),"\n",e.createElement(s.h3,{id:"саги",style:{position:"relative"}},e.createElement(s.a,{href:"#%D1%81%D0%B0%D0%B3%D0%B8","aria-label":"саги permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Саги"),"\n",e.createElement(s.p,null,"Саги спокойно делятся на файлы и подключаются (подобно редьюсерам в ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rootReducer</code>'}}),") в одной ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">rootSaga</code>'}}),".\nСаги — функции-генераторы. Их принято разделять на ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">worker</code>'}})," и ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">watcher</code>'}}),".\nWorker содержит логику. Watcher следит за экшенами."),"\n",e.createElement(s.p,null,"Проще говоря, дело обстоит так: вы вызываете действие, а сага слушает когда\nкакое-то действие будет вызвано и перехватывает его. Берёт работу на себя.\nОбращается к серверу, получает данные, при необходимости делает какие-то преобразования.\nПосле выполнения своей нелёгкой работы отдаёт результат редьюсеру. А дело редьюсера —\nуправлять хранилищем и только."),"\n",e.createElement(s.p,null,"Поэтому саги — это ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">middleware</code>'}}),", промежуточный слой между ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">action</code>'}})," и ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">reducer</code>'}}),"."),"\n",e.createElement(s.p,null,"Обратимся к примеру."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/sagas/userSaga.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> call<span class="token punctuation">,</span> put<span class="token punctuation">,</span> takeLatest <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-saga/effects\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> User <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../api/user\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> login <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../store/user\'</span>\n\n<span class="token comment">// worker</span>\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">loginWorker</span><span class="token punctuation">(</span><span class="token parameter">action</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// принимает email и password извне</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">.</span>payload<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> success<span class="token punctuation">,</span> fulfill <span class="token punctuation">}</span> <span class="token operator">=</span> login<span class="token punctuation">;</span>\n\n  <span class="token keyword">try</span> <span class="token punctuation">{</span>\n    <span class="token comment">// запросить токен, получить его, а затем попытаться запросить данные</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token literal-property property">data</span><span class="token operator">:</span> authData <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>login<span class="token punctuation">,</span> <span class="token punctuation">{</span> email<span class="token punctuation">,</span> password <span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span> <span class="token operator">=</span> authData\n    <span class="token keyword">const</span> <span class="token punctuation">{</span> data <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">yield</span> <span class="token function">call</span><span class="token punctuation">(</span>User<span class="token punctuation">.</span>getInfo<span class="token punctuation">,</span> <span class="token punctuation">{</span> token <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n    <span class="token comment">// в случае успеха отдать данные редьюсеру</span>\n    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">{</span> token<span class="token punctuation">,</span> <span class="token literal-property property">info</span><span class="token operator">:</span> data<span class="token punctuation">.</span>data <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ошибку можно тоже отдать редьюсеру через вызов failure</span>\n    <span class="token comment">// или получить в компоненте</span>\n    <span class="token comment">// или вообще написать функцию-обработчик, правящую миром ошибок</span>\n    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>\n    <span class="token keyword">yield</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token function">fulfill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// watcher</span>\n<span class="token comment">// при срабатывании триггера login отработает и loginWorker</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">userWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token function">takeLatest</span><span class="token punctuation">(</span>login<span class="token punctuation">.</span><span class="token constant">TRIGGER</span><span class="token punctuation">,</span> loginWorker<span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Корневая сага принимает все саги и запускает их, чтобы они начали\nпрослушивать экшены."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/sagas/rootSaga.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> all <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux-saga/effects\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> userWatcher <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./userSaga\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">rootSaga</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">yield</span> <span class="token function">all</span><span class="token punctuation">(</span><span class="token punctuation">[</span>\n    <span class="token function">userWatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(s.p,null,"Хранилище, конечно, тоже придётся перенастроить."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="js"><pre class="language-js"><code class="language-js"><span class="token comment">// src/store/index.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> combineReducers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'redux\'</span>\n<span class="token keyword">import</span> createSagaMiddleware <span class="token keyword">from</span> <span class="token string">\'redux-saga\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> configureStore<span class="token punctuation">,</span> getDefaultMiddleware <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@reduxjs/toolkit\'</span>\n\n<span class="token keyword">import</span> counter <span class="token keyword">from</span> <span class="token string">\'./counter\'</span>\n<span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">\'./user\'</span>\n<span class="token keyword">import</span> rootSaga <span class="token keyword">from</span> <span class="token string">\'../sagas/rootSaga\'</span>\n\n<span class="token comment">// добавить sagaMiddleware</span>\n<span class="token keyword">const</span> sagaMiddleware <span class="token operator">=</span> <span class="token function">createSagaMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> middleware <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">getDefaultMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">thunk</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sagaMiddleware<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// добавить user reducer</span>\n<span class="token keyword">const</span> rootReducer <span class="token operator">=</span> <span class="token function">combineReducers</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  counter<span class="token punctuation">,</span>\n  user<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// использовать middleware</span>\n<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">configureStore</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token literal-property property">reducer</span><span class="token operator">:</span> rootReducer<span class="token punctuation">,</span>\n  middleware<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// и запустить корневую сагу</span>\nsagaMiddleware<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>rootSaga<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> store</code></pre></div>'}}),"\n",e.createElement(s.h3,{id:"вызов-action-в-компоненте",style:{position:"relative"}},e.createElement(s.a,{href:"#%D0%B2%D1%8B%D0%B7%D0%BE%D0%B2-action-%D0%B2-%D0%BA%D0%BE%D0%BC%D0%BF%D0%BE%D0%BD%D0%B5%D0%BD%D1%82%D0%B5","aria-label":"вызов action в компоненте permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Вызов action в компоненте"),"\n",e.createElement(s.p,null,"В компоненте мало что меняется. Ну, разве что теперь в ",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dispatch</code>'}}),"\nпередаются внешние данные в виде логина и пароля пользователя."),"\n",e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="jsx"><pre class="language-jsx"><code class="language-jsx"><span class="token comment">// src/app.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> login <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./store/user\'</span>\n\n<span class="token keyword">const</span> userData <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string-property property">"email"</span><span class="token operator">:</span> <span class="token string">"eve.holt@reqres.in"</span><span class="token punctuation">,</span>\n  <span class="token string-property property">"password"</span><span class="token operator">:</span> <span class="token string">"cityslicka"</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">logIn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">login</span><span class="token punctuation">(</span>userData<span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>logIn<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">log in</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre></div>'}}),"\n",e.createElement(s.h2,{id:"источники",style:{position:"relative"}},e.createElement(s.a,{href:"#%D0%B8%D1%81%D1%82%D0%BE%D1%87%D0%BD%D0%B8%D0%BA%D0%B8","aria-label":"источники permalink",className:"anchor before"},e.createElement(s.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Источники"),"\n",e.createElement(s.ul,null,"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://iamakulov.com/talks/redux-in-real-life/",target:"_blank",rel:"nofollow"},"redux в реальной жизни")),"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://redux-toolkit.js.org/",target:"_blank",rel:"nofollow"},"redux-toolkit")),"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://redux-saga.js.org/",target:"_blank",rel:"nofollow"},"redux-saga")),"\n",e.createElement(s.li,null,e.createElement(s.a,{href:"https://github.com/afitiskin/redux-saga-routines",target:"_blank",rel:"nofollow"},"redux-saga-routines")),"\n"))}var c=function(n){void 0===n&&(n={});const{wrapper:s}=Object.assign({},(0,t.MN)(),n.components);return s?e.createElement(s,n,e.createElement(o,n)):o(n)},l=a(7792),u=a(7619);function r(n){var s,a;let{data:{mdx:t},children:p,pageContext:{prev:o,next:c}}=n;const{h1:r,title:k,description:i,image:d,table_of_contents:g}=t.frontmatter;return(0,e.useEffect)((()=>{(0,u.K)()}),[]),e.createElement(e.Fragment,null,e.createElement(l._W,{h1:r,title:k,description:i,image:null===(s=t.frontmatter.image)||void 0===s?void 0:s.publicURL},e.createElement(l.MV,{post:t.frontmatter,imageData:null==d||null===(a=d.childImageSharp)||void 0===a?void 0:a.gatsbyImageData},g?e.createElement(l.G8,{headings:t.tableOfContents}):null,e.createElement("div",{className:"page__content"},p,e.createElement(l.Mf,{prev:o,next:c})),e.createElement(l.QZ,null))))}function k(n){return e.createElement(r,n,e.createElement(c,n))}},8860:function(n,s,a){a.d(s,{y:function(){return t.y}});var t=a(3836)},8876:function(n,s,a){a.d(s,{MN:function(){return p}});var t=a(4424);const e=t.createContext({});function p(n){const s=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(s):{...s,...n}),[s,n])}}}]);