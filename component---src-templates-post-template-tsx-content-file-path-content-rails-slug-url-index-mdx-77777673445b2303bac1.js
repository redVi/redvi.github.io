"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[9372],{3772:function(n,a,s){s.r(a),s.d(a,{Head:function(){return o.Ss},default:function(){return u}});var e=s(8876),t=s(4424);function l(n){const a=Object.assign({p:"p",a:"a",span:"span"},(0,e.MN)(),n.components);return t.createElement(t.Fragment,null,t.createElement(a.p,null,"В ",t.createElement(a.a,{href:"/posts/get-absolute-url/"},"предыдущем посте")," к рассмотрению был предложен\nвопрос о назначении собственных уникальных URL-адресов страницы и получения\nих полного пути. Сегодня тема та же, но другой фреймворк: для сравнения\nпосмотрим как того же самого результата можно добиться в Ruby On Rails."),"\n",t.createElement(a.p,null,"Собственно, почему вдруг Ruby? Нет, не будет утверждений будто он хуже или\nлучше Python'а, просто случайно попался на пути и весьма заинтриговал автора.\nЭтого достаточно, чтобы черкнуть о нём пару строк. Не исключено (если\nдружба наша с Ruby станет крепнуть), что время от времени здесь будут\nпоявляться небольшие заметки о Ruby или Ruby On Rails."),"\n",t.createElement(a.p,null,"Подробных объяснений базовых вещей сегодня не предвидится. Если читателю\nранее не доводилось встречаться с Rails, есть\n",t.createElement(a.a,{href:"http://ruby.railstutorial.org/ruby-on-rails-tutorial-book",target:"_blank",rel:"nofollow"},"добротное пошаговое руководство"),",\nдостаточное для быстрого старта и понимания приведённого ниже материала."),"\n",t.createElement(a.p,null,"Зададим маршрут в ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">app/config/routes.rb</code>'}}),":"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ruby"><pre class="language-ruby"><code class="language-ruby"><span class="token comment"># routes.rb:</span>\nget <span class="token string-literal"><span class="token string">\'articles/:slug\'</span></span> <span class="token operator">=></span> <span class="token string-literal"><span class="token string">\'articles#show\'</span></span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Это указание на то, что при обращении к странице будет вызван метод ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">show</code>'}}),"\nиз контроллёра ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">articles_controller.rb</code>'}}),", отвечающего за вывод публикаций."),"\n",t.createElement(a.p,null,"Перепроводим маршруты:"),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ rake routes</code></pre></div>'}}),"\n",t.createElement(a.p,null,"Далее обратимся к указанному выше контроллёру. Он содержит различные методы,\nоперирующие нашей моделью. В примере ниже находит публикацию по определённым параметрам."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ruby"><pre class="language-ruby"><code class="language-ruby"><span class="token comment"># articles_controller.rb</span>\n\n<span class="token keyword">def</span> <span class="token method-definition"><span class="token function">show</span></span>\n  <span class="token variable">@article</span><span class="token operator">=</span>Article<span class="token punctuation">.</span>find_by_slug<span class="token operator">!</span><span class="token punctuation">(</span>params<span class="token punctuation">[</span><span class="token symbol">:id</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n<span class="token keyword">end</span>\n\n<span class="token keyword">private</span>\n  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">article_params</span></span>\n    params<span class="token punctuation">.</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token symbol">:article</span><span class="token punctuation">)</span><span class="token punctuation">.</span>permit<span class="token punctuation">(</span><span class="token symbol">:title</span><span class="token punctuation">,</span> <span class="token symbol">:content</span><span class="token punctuation">,</span> <span class="token symbol">:slug</span><span class="token punctuation">)</span>\n  <span class="token keyword">end</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Собственно, модель. Здесь нас и поджидает самое интересное. Перед тем, как публикация будет записана в БД, создаётся поле ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">slug</code>'}}),". Для указания этого действия мы определяем ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">before_create</code>'}}),", в который передаём название функции — ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">create_slug</code>'}}),"."),"\n",t.createElement(a.p,null,"Можно каждый раз при создании статьи назначать её ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">slug</code>'}})," вручную. Или же создавать это поле автоматически, исходя из названия статьи."),"\n",t.createElement(a.p,null,"Если с английским языком всё более или менее понятно, то автоматический перевод с кириллицы на латиницу может совсем не радовать, поэтому в общем случае предлагается использовать первый вариант."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ruby"><pre class="language-ruby"><code class="language-ruby"><span class="token comment"># article.rb</span>\n\n<span class="token keyword">class</span> <span class="token class-name">Article</span> <span class="token operator">&lt;</span> ActiveRecord<span class="token double-colon punctuation">::</span>Base\n  before_create <span class="token symbol">:create_slug</span>\n\n  default_scope order<span class="token operator">:</span> <span class="token string-literal"><span class="token string">\'articles.created_at DESC\'</span></span> <span class="token comment"># сортировка статей</span>\n  validates <span class="token symbol">:slug</span><span class="token punctuation">,</span> <span class="token symbol">presence</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token symbol">length</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token symbol">maximum</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span> <span class="token comment"># валидация</span>\n\n  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">to_param</span></span>\n    <span class="token string-literal"><span class="token string">"</span><span class="token interpolation"><span class="token delimiter punctuation">#{</span><span class="token content">slug</span><span class="token delimiter punctuation">}</span></span><span class="token string">/"</span></span><span class="token punctuation">.</span>downcase <span class="token comment"># как выводить в URL</span>\n  <span class="token keyword">end</span>\n\n  <span class="token keyword">def</span> <span class="token method-definition"><span class="token function">create_slug</span></span>\n    <span class="token comment"># если в модели определено поле slug, slug задаётся вручную</span>\n    <span class="token keyword">self</span><span class="token punctuation">.</span>slug<span class="token operator">=</span><span class="token keyword">self</span><span class="token punctuation">.</span>slug<span class="token punctuation">.</span>parameterize\n    <span class="token comment"># если поле slug не определено, генерируется автоматически</span>\n    <span class="token comment"># исходя из значения поля title (заголовок статьи)</span>\n    <span class="token comment"># self.slug=self.title.parameterize</span>\n  <span class="token keyword">end</span>\n<span class="token keyword">end</span></code></pre></div>'}}),"\n",t.createElement(a.p,null,"Наконец, пример вывода страницы публикации ",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">show.html.erb</code>'}}),"."),"\n",t.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="erb"><pre class="language-erb"><code class="language-erb"><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%</span><span class="token ruby language-ruby"> provide<span class="token punctuation">(</span><span class="token symbol">:title</span><span class="token punctuation">,</span> <span class="token variable">@article</span><span class="token punctuation">.</span>title<span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> link_to <span class="token variable">@article</span><span class="token punctuation">.</span>title<span class="token punctuation">,</span> article_path<span class="token punctuation">(</span><span class="token variable">@article</span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h5</span><span class="token punctuation">></span></span><span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> <span class="token variable">@article</span><span class="token punctuation">.</span>created_at<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string-literal"><span class="token string">"%d %B"</span></span><span class="token punctuation">)</span> </span><span class="token delimiter punctuation">%></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h5</span><span class="token punctuation">></span></span>\n<span class="token erb language-erb"><span class="token delimiter punctuation">&lt;%=</span><span class="token ruby language-ruby"> <span class="token variable">@article</span><span class="token punctuation">.</span>content </span><span class="token delimiter punctuation">%></span></span></code></pre></div>'}}))}var p=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,e.MN)(),n.components);return a?t.createElement(a,n,t.createElement(l,n)):l(n)},o=s(7792),c=s(7619);function r(n){var a,s;let{data:{mdx:e},children:l,pageContext:{prev:p,next:r}}=n;const{h1:u,title:i,description:k,image:g,table_of_contents:m}=e.frontmatter;return(0,t.useEffect)((()=>{(0,c.K)()}),[]),t.createElement(t.Fragment,null,t.createElement(o._W,{h1:u,title:i,description:k,image:null===(a=e.frontmatter.image)||void 0===a?void 0:a.publicURL},t.createElement(o.MV,{post:e.frontmatter,imageData:null==g||null===(s=g.childImageSharp)||void 0===s?void 0:s.gatsbyImageData},m?t.createElement(o.G8,{headings:e.tableOfContents}):null,t.createElement("div",{className:"page__content"},l,t.createElement(o.Mf,{prev:p,next:r})),t.createElement(o.QZ,null))))}function u(n){return t.createElement(r,n,t.createElement(p,n))}},8876:function(n,a,s){s.d(a,{MN:function(){return l}});var e=s(4424);const t=e.createContext({});function l(n){const a=e.useContext(t);return e.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);