"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[1604],{8824:function(n,a,s){s.r(a),s.d(a,{Head:function(){return c.Ss},default:function(){return r}});var t=s(8876),e=s(4424),p=s(8860);function o(n){const a=Object.assign({p:"p",span:"span",h2:"h2",a:"a"},(0,t.MN)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"Не правда ли, было бы любопытно опробовать знаменитый фреймворк\nDjango для создания сайтов разной степени сложности? Если вам по душе\nузнавать что-то новое или вы по каким-либо причинам решили отказаться от\nразработки на PHP — Django как раз то, что вам нужно. В сегодняшнем посте\nбудут оговорены элементарные, но такие необходимые вещи: создание проекта\nи приложения, модели и отображения, шаблонов с использованием стандартных\nфильтров. Не исключено, что автор продолжит начатую тему и в последующем\nбудет опубликован ряд постов об этом популярном фреймворке."),"\n",e.createElement(a.p,null,"Далее предполагается, что у читателя установлен ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Python3</code>'}})," и ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Django >= 1.5</code>'}}),": именно\nна них рассчитаны наши последующие телодвижения. Устанавливать необходимые\nдля конкретного проекта приложения лучше используя virtualenw и pip.\nТак вы сможете избавить себя от чтения руководств по установке и захламления системных файлов."),"\n",e.createElement(a.h2,{id:"создание-проекта-и-приложения",style:{position:"relative"}},e.createElement(a.a,{href:"#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0-%D0%B8-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F","aria-label":"создание проекта и приложения permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Создание проекта и приложения"),"\n",e.createElement(a.p,null,"Проект — основной каталог, где будут располагаться те или иные приложения,\nтакже проект содержит основные настройки будущего сайта. Создадим корневой\nкаталог для проекта и сам проект:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ <span class="token function">mkdir</span> djcode <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> djcode\n$ django-admin.py startproject pySite</code></pre></div>'}}),"\n",e.createElement(a.p,null,"Просмортим появившиеся каталоги:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ tree pySite\npySite\n├── manage.py\n└── pySite\n    ├── __init__.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py</code></pre></div>'}}),"\n",e.createElement(a.p,null,"Вкратце:"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">manage.py</code>'}})," — отвечает за управление проектом, например, командой ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">python manage.py runserver</code>'}})," можно запустить сервер для тестовой разработки."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">__init__.py</code>'}})," — нужен для того, чтобы python рассматривал каталог ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pySite</code>'}})," как пакет."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">settings.py</code>'}})," — файл настроек проекта: настройки языка, часового пояса, соединения с базой данных, подключаемых приложений и прочего."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}})," — настройки URL-адресов для сайта"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">wsgi.py</code>'}})," — конфигурация модуля ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">wsgi</code>'}})," для веб-сервера"),"\n",e.createElement(a.p,null,"Хорошо, когда проект расширяемый. Ещё лучше, если его легко сопровождать. Оба этих условия выполняются в Django. Чтобы расширить функционал сайта, следует создать для него какое-либо приложение: галерею, форум, блоги. Затем лишь подключить его в ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">settings.py</code>'}})," и подправить свой ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}}),", дабы при переходе по определённому адресу пользователь перенаправлялся к страницам приложения. Поэтому давайте создадим какое-нибудь приложение. Пусть оно отвечает за публикацию новостей и хранится в том же каталоге, что и основной проект."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ django-admin.py startapp news\n$ tree pySite\npySite\n<span class="token operator">|</span>-- pySite\n<span class="token operator">|</span>   <span class="token operator">|</span>-- __init__.py\n<span class="token operator">|</span>   <span class="token operator">|</span>-- settings.py\n<span class="token operator">|</span>   <span class="token operator">|</span>-- urls.py\n<span class="token operator">|</span>   <span class="token operator">|</span>-- views.py\n<span class="token operator">|</span>   <span class="token operator">|</span>-- wsgi.py\n<span class="token operator">|</span>-- manage.py\n<span class="token operator">|</span>-- news\n<span class="token operator">|</span>   <span class="token operator">|</span>-- admin.py\n<span class="token operator">|</span>   <span class="token operator">|</span>-- __init__.py\n<span class="token operator">|</span>   <span class="token operator">|</span>-- models.py\n<span class="token operator">|</span>   <span class="token operator">|</span>-- tests.py\n<span class="token operator">|</span>   <span class="token operator">|</span>-- urls.py\n<span class="token operator">|</span>   <span class="token operator">|</span>-- views.py</code></pre></div>'}}),"\n",e.createElement(a.p,null,"Вкратце:"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">models.py</code>'}})," — файл для взаимодействия с базой данных"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}})," — отдельный файл url'ов. Он может быть пустым, если вы решите использовать для всех адресов ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}})," проекта"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">admin.py</code>'}})," — создаётся вручную, нужен исключительно для удобства: настройка отображения моделей в административной панели"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">views.py</code>'}})," — самое интересное, управляет логикой приложения"),"\n",e.createElement(a.p,null,"С приложением определились. Отлично! Пора браться за настройки."),"\n",e.createElement(a.h2,{id:"настройки-для-сайта",style:{position:"relative"}},e.createElement(a.a,{href:"#%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8-%D0%B4%D0%BB%D1%8F-%D1%81%D0%B0%D0%B9%D1%82%D0%B0","aria-label":"настройки для сайта permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Настройки для сайта"),"\n",e.createElement(a.p,null,"Заглянем в файл ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">settings.py</code>'}})," и настроим его под свои скромные пока нужды."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">PROJECT_PATH</code>'}})," — указание на то, где Django нужно искать корень проекта. Лучше использовать запись, приведённую ниже, чем писать полный путь вроде ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">~/home/user/djcode/pySite</code>'}}),"."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DEBUG = True</code>'}})," — отладка влючена, Django будет выводить информативные сообщения об ошибках."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">DATABASES</code>'}})," — настройки для вашей базы данных. В примере это ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sqlite3</code>'}}),", который не требует особого к себе отношения, но и полноценной базой данных для сайта на production-сервере быть не может. Чтобы использовать ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sqlite3</code>'}}),", достаточно создать в директории проекта файл ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">sqlite.db</code>'}}),"."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># settings.py</span>\n<span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> abspath<span class="token punctuation">,</span> join<span class="token punctuation">,</span> dirname\n\nPROJECT_PATH <span class="token operator">=</span> abspath<span class="token punctuation">(</span>join<span class="token punctuation">(</span>dirname<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">\'..\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nDEBUG <span class="token operator">=</span> <span class="token boolean">True</span>\nDATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">\'default\'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>\n        <span class="token string">\'ENGINE\'</span><span class="token punctuation">:</span> <span class="token string">\'django.db.backends.sqlite3\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'NAME\'</span><span class="token punctuation">:</span>  join<span class="token punctuation">(</span>PROJECT_PATH<span class="token punctuation">,</span> <span class="token string">\'sqlite.db\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n        <span class="token string">\'USER\'</span><span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'PASSWORD\'</span><span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'HOST\'</span><span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n        <span class="token string">\'PORT\'</span><span class="token punctuation">:</span> <span class="token string">\'\'</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Идём дальше. Желательно сразу создать и подключить директорию, где будет храниться статика: css, javascript и изображения.\nКроме того, нам понадобится директория под наши html-файлы."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">STATIC_URL</code>'}})," — относительный url для статики"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">STATICFILES_DIRS</code>'}})," — директория, где расположены соответствующие файлы"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">TEMPLATE_LOADERS</code>'}})," — модули для работы с шаблонами"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">TEMPLATE_DIRS</code>'}})," — указание на директорию, где лежат html-шаблоны"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">ROOT_URLCONF</code>'}})," — главный файл url'ов"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">INSTALLED_APPS</code>'}})," — подключенные приложения, вниз добавим наш news."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># settings.py</span>\nSTATIC_URL <span class="token operator">=</span> <span class="token string">\'/static/\'</span>\nSTATICFILES_DIRS <span class="token operator">=</span> <span class="token punctuation">(</span>join<span class="token punctuation">(</span>PROJECT_PATH<span class="token punctuation">,</span> <span class="token string">\'static\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span>\nTEMPLATE_LOADERS <span class="token operator">=</span> <span class="token punctuation">(</span>\n    <span class="token string">\'django.template.loaders.filesystem.Loader\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'django.template.loaders.app_directories.Loader\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\nROOT_URLCONF <span class="token operator">=</span> <span class="token string">\'pySite.urls\'</span>\nTEMPLATE_DIRS <span class="token operator">=</span> <span class="token punctuation">(</span>\n    join<span class="token punctuation">(</span>PROJECT_PATH<span class="token punctuation">,</span> <span class="token string">\'templates\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\nINSTALLED_APPS <span class="token operator">=</span> <span class="token punctuation">(</span>\n    <span class="token string">\'django.contrib.auth\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'django.contrib.contenttypes\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'django.contrib.sessions\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'django.contrib.sites\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'django.contrib.messages\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'django.contrib.staticfiles\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'django.contrib.admin\'</span><span class="token punctuation">,</span>\n    <span class="token string">\'news\'</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Теперь можно проверить сайт на работоспособность. Для этого, находясь в директории с ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">manage.py</code>'}})," следует ввести команду:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell">$ python manage.py syncdb\n$ python manage.py runserver</code></pre></div>'}}),"\n",e.createElement(a.p,null,"Первая команда создаст записи в базе данных и предложит создать суперпользователя, если вы подключили приложение административной панели, вторая — запустит тестовый сервер разработки."),"\n",e.createElement(a.p,null,"По адресу ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">127.0.0.1:8000/</code>'}})," должно появиться стандартное окно приветствия Django."),"\n",e.createElement(a.h2,{id:"создание-модели-и-представления-конфигурация-urlspy",style:{position:"relative"}},e.createElement(a.a,{href:"#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8-%D0%B8-%D0%BF%D1%80%D0%B5%D0%B4%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F-urlspy","aria-label":"создание модели и представления конфигурация urlspy permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Создание модели и представления, конфигурация ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}})),"\n",e.createElement(a.p,null,"Следующим шагом будет настройка моделей для взаимодействия с БД, создание представления (логика приложения), настройка файла ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}}),"."),"\n",e.createElement(a.p,null,"В примере ниже создаётся класс ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Post</code>'}}),", подкласс абстрактного класса ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">models.Model</code>'}}),". Мы хотим видеть у нашего поста название (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">title</code>'}}),"), его тело (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">body</code>'}}),"), дату создания (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">timestamp</code>'}}),") и автора (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">author</code>'}}),"). Обратите внимание на ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">models.*Field</code>'}}),". Каждая модель соответствует указанному полю."),"\n",e.createElement(a.p,null,"Так, ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">models.CharField</code>'}})," выведет несколько символов, максимальное их значение 150, этого должно хватить для названия;"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">models.TextField</code>'}})," позволит вводить неограниченное число символов: полноценный текст;"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">models.ForeignKey</code>'}})," указывает на то, что у поста может быть один автор."),"\n",e.createElement(a.p,null,"Эти таблицы будут созданы в базе данных при синхронизации."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># ~/djcode/pySite/news/models.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>models <span class="token keyword">import</span> User\n\n<span class="token keyword">class</span> <span class="token class-name">Post</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">150</span><span class="token punctuation">)</span>\n    body <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    timestamp <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    author <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">)</span>\n\n    <span class="token keyword">def</span> <span class="token function">__unicode__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title\n        <span class="token keyword">return</span> self<span class="token punctuation">.</span>body</code></pre></div>'}}),"\n",e.createElement(a.p,null,"Теперь создадим наше первое представление. Оно призвано выводить список постов на одной странице. О том, как сделать постраничный вывод поговорим ",e.createElement(a.a,{href:"/posts/django-pagination/"},"в следующий раз"),"."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># djcode/pySite/news/views.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> get_object_or_404<span class="token punctuation">,</span> render_to_response\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>template <span class="token keyword">import</span> RequestContext\n<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Post\n\n<span class="token keyword">def</span> <span class="token function">news</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\' Show all news \'\'\'</span>\n    posts <span class="token operator">=</span> Post<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">\'-timestamp\'</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> render_to_response<span class="token punctuation">(</span><span class="token string">\'news/news.html\'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token string">\'posts\'</span><span class="token punctuation">:</span>posts<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Это простейшее представление, которое принимает все существующие посты и выводит их на определённой странице. Чуть ниже мы создадим эту страницу. Но сначала наполним сайт каким-нибудь содержимым. Административная панель уже подключена в нашем ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">INSTALLED_APPS</code>'}}),", осталось только зайти и проверить как отображаются созданные нами модели. Для отображения их в админке создадим ещё один файл (можно вписать это и в предыдущем файле ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">views</code>'}}),", но разделить их иногда удобнее):"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># djcode/pySite/news/admin.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin\n<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Post\n\n<span class="token keyword">class</span> <span class="token class-name">PostAdmin</span><span class="token punctuation">(</span>admin<span class="token punctuation">.</span>ModelAdmin<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    models <span class="token operator">=</span> Post\n    list_display <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">\'title\'</span><span class="token punctuation">,</span> <span class="token string">\'timestamp\'</span><span class="token punctuation">)</span>\n    list_filter <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">\'timestamp\'</span><span class="token punctuation">,</span><span class="token punctuation">)</span>\n\nadmin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>register<span class="token punctuation">(</span>Post<span class="token punctuation">,</span> PostAdmin<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Раскомментируйте в ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">~/djcode/pySite/pySite/urls.py</code>'}})," строки:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># djcode/pySite/pySite/urls.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> patterns<span class="token punctuation">,</span> include<span class="token punctuation">,</span> url\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin\nadmin<span class="token punctuation">.</span>autodiscover<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n\nurlpatterns <span class="token operator">=</span> patterns<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">(</span><span class="token string">r\'^admin/\'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"После того, как вы зайдёте по адресу ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">127.0.0.1:8000/admin/</code>'}})," и создадите несколько постов, вы должны увидеть нечто подобное:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1024px; flex:3;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 34%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/e18ede3bf341d143856820f7139d4811/e93cc/django1.webp 300w,\n/static/e18ede3bf341d143856820f7139d4811/b0544/django1.webp 600w,\n/static/e18ede3bf341d143856820f7139d4811/53334/django1.webp 1024w"\n              sizes="(max-width: 1024px) 100vw, 1024px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/e18ede3bf341d143856820f7139d4811/73b64/django1.jpg 300w,\n/static/e18ede3bf341d143856820f7139d4811/3ad8d/django1.jpg 600w,\n/static/e18ede3bf341d143856820f7139d4811/c3413/django1.jpg 1024w"\n            sizes="(max-width: 1024px) 100vw, 1024px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/e18ede3bf341d143856820f7139d4811/c3413/django1.jpg"\n            alt="админка django"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",e.createElement(a.p,null,"Вернёмся к шаблонам. Вообще, создание страниц мы разделим на два этапа: создание базовой страницы и остальных страниц, которые будут просто наследовать содержимое базового шаблона. Это будет весьма кстати, если только вам не хочется писать каждую страницу с нуля."),"\n",e.createElement(a.p,null,"Так будет выглядеть шаблон базовой страницы:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="django"><pre class="language-django"><code class="language-django"><span class="token django language-django"><span class="token comment">{# djcode/pySite/templates/base.html #}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">load</span> <span class="token variable">static</span> <span class="token variable">from</span> <span class="token variable">staticfiles</span> <span class="token delimiter punctuation">%}</span></span> <span class="token comment">&lt;!-- подгружаем статику --\x3e</span>\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">load</span> <span class="token variable">i18n</span>  <span class="token delimiter punctuation">%}</span></span>\n\n<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">HTML</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">meta</span> <span class="token delimiter punctuation">%}</span></span>\n    <span class="token comment">&lt;!-- подключаем наш css-файл, если он есть --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">static</span> <span class="token string">"css/base.css"</span> <span class="token delimiter punctuation">%}</span></span><span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">title</span> <span class="token delimiter punctuation">%}</span></span>My Django Site<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>\n    <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">header</span> <span class="token delimiter punctuation">%}</span></span>\n        <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">include</span> <span class="token string">"header.html"</span> <span class="token delimiter punctuation">%}</span></span> <span class="token comment">&lt;!-- подключаем «шапку» сайта --\x3e</span>\n    <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span>\n\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">content</span> <span class="token delimiter punctuation">%}</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span> <span class="token comment">&lt;!-- место для контента --\x3e</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n\n    <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">footer</span> <span class="token delimiter punctuation">%}</span></span> <span class="token comment">&lt;!-- подключаем «подвал» сайта --\x3e</span>\n        <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">include</span> <span class="token string">"footer.html"</span> <span class="token delimiter punctuation">%}</span></span>\n    <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Теперь примемся за шаблон, который выведет все наши посты."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="django"><pre class="language-django"><code class="language-django"><span class="token django language-django"><span class="token comment">{# djcode/pySite/templates/news/news.html #}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">extends</span> <span class="token string">\'base.html\'</span> <span class="token delimiter punctuation">%}</span></span> <span class="token comment">&lt;!-- подключаем базовый шаблон --\x3e</span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">title</span> <span class="token delimiter punctuation">%}</span></span>News<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">content</span> <span class="token delimiter punctuation">%}</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">for</span> <span class="token variable">post</span> <span class="token keyword">in</span> <span class="token variable">posts</span> <span class="token delimiter punctuation">%}</span></span> <span class="token comment">&lt;!-- итерация по всем постам --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>\n              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">url</span> <span class="token string">\'news:one_new\'</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">id</span> <span class="token delimiter punctuation">%}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">title</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span>\n              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>\n\n            <span class="token comment">&lt;!-- дата публикации и автор --\x3e</span>\n            <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">timestamp</span> <span class="token delimiter punctuation">}}</span></span>\n            <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">author</span> <span class="token delimiter punctuation">}}</span></span>\n\n            <span class="token comment">&lt;!-- обрезаем посты, вывод по 80 слов --\x3e</span>\n            <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">body</span><span class="token operator">|</span><span class="token filter function">truncatewords</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token operator">|</span><span class="token filter function">safe</span> <span class="token delimiter punctuation">}}</span></span>\n\n            <span class="token comment">&lt;!-- ссылаемся на полный текст поста --\x3e</span>\n            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">url</span> <span class="token string">\'news:one_new\'</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">id</span> <span class="token delimiter punctuation">%}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Читать полностью<span class="token entity named-entity" title="&raquo;">&amp;raquo;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n        <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endfor</span> <span class="token delimiter punctuation">%}</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Как уже, должно быть, заметил читатель, мы сразу включили ссылку на пока несуществующее представление: вывод отдельного поста целиком. Что требуется для его создания? Дальнейшие наши шаги сводятся к созданию ещё одной функции: на этот раз она будет выводить отдельную страницу, подготовки для неё своего шаблона и настройке файла ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}}),". Приступим."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># djcode/pySite/news/views.py</span>\n\n<span class="token comment"># после функции news дописать</span>\n<span class="token keyword">def</span> <span class="token function">one_new</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> post_id<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\' Show single news\'\'\'</span>\n    post <span class="token operator">=</span> get_object_or_404<span class="token punctuation">(</span>Post<span class="token punctuation">,</span> pk<span class="token operator">=</span>post_id<span class="token punctuation">)</span>\n\n    <span class="token builtin">vars</span> <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span>\n        title<span class="token operator">=</span>post<span class="token punctuation">.</span>title<span class="token punctuation">,</span>\n        body<span class="token operator">=</span>post<span class="token punctuation">.</span>body<span class="token punctuation">,</span>\n        author<span class="token operator">=</span>post<span class="token punctuation">.</span>author<span class="token punctuation">,</span>\n        timestamp<span class="token operator">=</span>post<span class="token punctuation">.</span>timestamp<span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> render_to_response<span class="token punctuation">(</span><span class="token string">\'news/one_new.html\'</span><span class="token punctuation">,</span> <span class="token builtin">vars</span><span class="token punctuation">,</span> context_instance<span class="token operator">=</span>RequestContext<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Переменной post передаётся объект ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Post</code>'}})," с его ID либо вызывается исключение ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">404</code>'}}),": страница не найдена. Определяется то, что должно быть выведено: название, автор, время создания. Возвращается страница ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">one_new.html</code>'}}),", которой мы сейчас и займёмся."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="django"><pre class="language-django"><code class="language-django"><span class="token django language-django"><span class="token comment">{# djcode/pySite/templates/news/one_new.html #}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">extends</span> <span class="token string">\'base.html\'</span> <span class="token delimiter punctuation">%}</span></span>\n\n<span class="token comment">&lt;!-- отображать название поста как title страницы--\x3e</span>\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">title</span> <span class="token delimiter punctuation">%}</span></span><span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">title</span> <span class="token delimiter punctuation">}}</span></span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">content</span> <span class="token delimiter punctuation">%}</span></span>\n\nДата: <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">timestamp</span> <span class="token delimiter punctuation">}}</span></span>\nАвтор: <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">author</span> <span class="token delimiter punctuation">}}</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">title</span> <span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">body</span><span class="token operator">|</span><span class="token filter function">safe</span><span class="token operator">|</span><span class="token filter function">escape</span><span class="token delimiter punctuation">}}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span></code></pre></div>'}}),"\n",e.createElement(p.y,{heading:"Примечание"},e.createElement(a.p,null,"escape экранирует HTML-теги, если вы использовали их при написании статьи в админке")),"\n",e.createElement(a.p,null,"Теперь напишем функцию и шаблон для главной страницы, с которой будем переходить на последние десять записей.\nПредставление и шаблон главной страницы:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># djcode/pySite/pySite/views.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render_to_response\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>template <span class="token keyword">import</span> RequestContext\n<span class="token keyword">from</span> news<span class="token punctuation">.</span>views <span class="token keyword">import</span> Post\n\n<span class="token comment"># можно переписать как в news/views.py</span>\n<span class="token keyword">def</span> <span class="token function">home</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token builtin">vars</span> <span class="token operator">=</span> <span class="token builtin">dict</span> <span class="token punctuation">(</span>\n        posts<span class="token operator">=</span>Post<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">all</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>order_by<span class="token punctuation">(</span><span class="token string">\'-timestamp\'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n    <span class="token punctuation">)</span>\n\n    <span class="token keyword">return</span> render_to_response<span class="token punctuation">(</span><span class="token string">\'index.html\'</span><span class="token punctuation">,</span> <span class="token builtin">vars</span><span class="token punctuation">,</span> context_instance<span class="token operator">=</span>RequestContext<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Шаблон для вывода последних десяти публикаций на главной:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="django"><pre class="language-django"><code class="language-django"><span class="token django language-django"><span class="token comment">{# djcode/pySite/templates/index.html #}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">extends</span> <span class="token string">"base.html"</span> <span class="token delimiter punctuation">%}</span></span>\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">title</span> <span class="token delimiter punctuation">%}</span></span>Index Page<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endblock</span> <span class="token delimiter punctuation">%}</span></span>\n\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">block</span> <span class="token variable">content</span> <span class="token delimiter punctuation">%}</span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>posts<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>\n            <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">for</span> <span class="token variable">post</span> <span class="token keyword">in</span> <span class="token variable">posts</span> <span class="token delimiter punctuation">%}</span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">url</span> <span class="token string">\'news:one_new\'</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">id</span> <span class="token delimiter punctuation">%}</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\n                        <span class="token django language-django"><span class="token delimiter punctuation">{{</span> <span class="token variable">post</span><span class="token punctuation">.</span><span class="token variable">title</span> <span class="token delimiter punctuation">}}</span></span>\n                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>\n                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>\n            <span class="token django language-django"><span class="token delimiter punctuation">{%</span> <span class="token tag keyword">endfor</span> <span class="token delimiter punctuation">%}</span></span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>\n<span class="token django language-django"><span class="token delimiter punctuation">{%</span><span class="token tag keyword">endblock</span><span class="token delimiter punctuation">%}</span></span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Наконец, создадим два (в примере мы ведь отделяем все приложения\nдруг от друга, чтобы их можно было подключать к другому проекту\nвнесением одной лишь строки в ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">INSTALLED_APPS</code>'}})," и синхронизацией с БД)\nфайла ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}}),": один главный, другой  — персонально для созданного приложения news.\nПри наличии пяти-десяти приложений это может быть удобным. Если приложение одно\nи со временем расширять функционал не требуется, создайте лишь один ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">urls.py</code>'}}),"."),"\n",e.createElement(a.p,null,"Импортируем необходимые модули, при входе на главную выводим представление,\nуказанное в ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pySite.views.home</code>'}})," функции, при входе на ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">http://127.0.0.1:8000/news</code>'}}),"\nперенаправляем поиск в ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">news/urls.py</code>'}}),"."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># djcode/pySite/pySite/urls.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> patterns<span class="token punctuation">,</span> include<span class="token punctuation">,</span> url\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin\nadmin<span class="token punctuation">.</span>autodiscover<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nurlpatterns <span class="token operator">=</span> patterns<span class="token punctuation">(</span><span class="token string">\'\'</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">(</span><span class="token string">r\'^$\'</span><span class="token punctuation">,</span> <span class="token string">\'pySite.views.home\'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">\'home\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">(</span><span class="token string">r\'^news/\'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span><span class="token string">\'news.urls\'</span><span class="token punctuation">,</span> namespace<span class="token operator">=</span><span class="token string">\'news\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">(</span><span class="token string">r\'^admin/\'</span><span class="token punctuation">,</span> include<span class="token punctuation">(</span>admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"В следующем файле обрабатываем наши представления:"),"\n",e.createElement(a.p,null,"если пользователь заходит на страницу вывода всех новостей, использовать\nфункцию ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">news.views.news</code>'}}),"; если на конкретную новость — вывод выбранной\nновости из ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">news.views.one_new</code>'}}),":"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="python"><pre class="language-python"><code class="language-python"><span class="token comment"># djcode/pySite/news/urls.py</span>\n\n<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>urls <span class="token keyword">import</span> patterns<span class="token punctuation">,</span> include<span class="token punctuation">,</span> url\n\nurlpatterns <span class="token operator">=</span> patterns<span class="token punctuation">(</span><span class="token string">\'news.views\'</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">(</span><span class="token string">r\'^$\'</span><span class="token punctuation">,</span> <span class="token string">\'news\'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">\'news\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    url<span class="token punctuation">(</span><span class="token string">r\'^(?P&lt;post_id>\\d+)/$\'</span><span class="token punctuation">,</span> <span class="token string">\'one_new\'</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">\'one_new\'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n\n<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Дело сделано. Если всё прошло гладко, мы должны прийти примерно к подобному результату:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 956px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 41.333333333333336%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/0b2b40c0f7e9ba994705637abea65728/e93cc/django2.webp 300w,\n/static/0b2b40c0f7e9ba994705637abea65728/b0544/django2.webp 600w,\n/static/0b2b40c0f7e9ba994705637abea65728/dbaa2/django2.webp 956w"\n              sizes="(max-width: 956px) 100vw, 956px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/0b2b40c0f7e9ba994705637abea65728/eed55/django2.png 300w,\n/static/0b2b40c0f7e9ba994705637abea65728/7491f/django2.png 600w,\n/static/0b2b40c0f7e9ba994705637abea65728/ab07e/django2.png 956w"\n            sizes="(max-width: 956px) 100vw, 956px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/0b2b40c0f7e9ba994705637abea65728/ab07e/django2.png"\n            alt="django"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",e.createElement(a.p,null,"Успехов в изучении этого отличного фреймворка!"))}var l=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.MN)(),n.components);return a?e.createElement(a,n,e.createElement(o,n)):o(n)},c=s(7792),u=s(7619);function i(n){var a,s;let{data:{mdx:t},children:p,pageContext:{prev:o,next:l}}=n;const{h1:i,title:r,description:k,image:g,table_of_contents:d}=t.frontmatter;return(0,e.useEffect)((()=>{(0,u.K)()}),[]),e.createElement(e.Fragment,null,e.createElement(c._W,{h1:i,title:r,description:k,image:null===(a=t.frontmatter.image)||void 0===a?void 0:a.publicURL},e.createElement(c.MV,{post:t.frontmatter,imageData:null==g||null===(s=g.childImageSharp)||void 0===s?void 0:s.gatsbyImageData},d?e.createElement(c.G8,{headings:t.tableOfContents}):null,e.createElement("div",{className:"page__content"},p,e.createElement(c.Mf,{prev:o,next:l})),e.createElement(c.QZ,null))))}function r(n){return e.createElement(i,n,e.createElement(l,n))}},8860:function(n,a,s){s.d(a,{y:function(){return t.y}});var t=s(3836)},8876:function(n,a,s){s.d(a,{MN:function(){return p}});var t=s(4424);const e=t.createContext({});function p(n){const a=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);