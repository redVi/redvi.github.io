"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[4212],{5888:function(n,a,s){s.r(a),s.d(a,{Head:function(){return l.Ss},default:function(){return i}});var t=s(8876),e=s(4424),p=s(8860);function o(n){const a=Object.assign({p:"p",strong:"strong",span:"span",h2:"h2",a:"a",ul:"ul",li:"li"},(0,t.MN)(),n.components);return e.createElement(e.Fragment,null,e.createElement(a.p,null,"В данном посте хотелось бы предложить написать небольшое приложение, использующее графический интерфейс. Задача выбора подходящего инструмента для осуществления этой задумки может оказаться достаточно нетривиальной. Python поддерживает несколько графических библиотек:"),"\n",e.createElement(a.p,null,e.createElement(a.strong,null,"- wxWidgest")," и интерфейс к этой библиотеке — ",e.createElement(a.strong,null,"wxPython"),". Наилучший выбор, если вы хотите, чтобы ваши приложения выглядели в любой ОС с любым графическим интерфейсом как родные. Самый большой минус на момент написания поста — недостаточно широкая документация. Впрочем, кто-то может с этим не согласиться."),"\n",e.createElement(a.p,null,e.createElement(a.strong,null,"- tkinter")," — Tk — самая простая и распространённая библиотека. Используется очень широко. Документация подробна и содержит всё необходимое для быстрого начала работы."),"\n",e.createElement(a.p,null,e.createElement(a.strong,null,"-PyQt")," — интерфейс к библиотеке ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Qt</code>'}}),'. Эта библиотека также переносима на Linux, Windows и MacOS. Хотя стоит отметить, что интерфейс программы, естественно, будет отличаться от "родных" приложений и только в случае со связкой Linux+KDE будет выглядеть как влитой. Тем не менее используется очень широко. Документация отличная. В написании кода, пожалуй, наиболее сложен.'),"\n",e.createElement(a.p,null,e.createElement(a.strong,null,"PyGTK")," — как и предыдущий привязан к своей оконной системе. Не так распространён как три библиотеки, данные выше."),"\n",e.createElement(a.p,null,"Разумеется, графических библиотек намного больше. Указанные здесь — основные. Автором рекомендуется выбирать между ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">wxPython</code>'}})," и ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Tkinter</code>'}}),". Дабы использовать какую-либо библиотеку, нужно её установить (исключением является разве что OS Windows, где python, похоже, поставляется в чуть ли не полной комплектации). Разбираемый сегодня пример будет задействовать библиотеку tkinter и потребует установки модуля ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tk</code>'}}),". Пользователи Linux могут найти его с помощью своего пакетного менеджера или собрать python с ключом ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tk</code>'}})," (для gentoo)."),"\n",e.createElement(a.h2,{id:"как-это-работает",style:{position:"relative"}},e.createElement(a.a,{href:"#%D0%BA%D0%B0%D0%BA-%D1%8D%D1%82%D0%BE-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82","aria-label":"как это работает permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Как это работает?"),"\n",e.createElement(a.p,null,"tkinter  — программный слой поверх ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Tk</code>'}}),", позволяющий сценариям на языке Python обращаться к библиотеке ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">Tk</code>'}}),", конструирующей и настраивающей интерфейсы и возвращающей управление обратно в сценарии Python, которые обрабатывают события, генерируемые пользователем (например, щелчки мышью). Таким образом, обращения к  графическому интерфейсу из сценария Python направляются в tkinter, а затем в Tk; события, возникающие в графическом интерфейсе, направляются из Tk в  tkinter, а  затем обратно в  сценарий Python."),"\n",e.createElement(a.h2,{id:"начали-импорт",style:{position:"relative"}},e.createElement(a.a,{href:"#%D0%BD%D0%B0%D1%87%D0%B0%D0%BB%D0%B8-%D0%B8%D0%BC%D0%BF%D0%BE%D1%80%D1%82","aria-label":"начали импорт permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Начали импорт"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token comment"># pybackup.py</span>\n<span class="token comment">#</span>\n<span class="token comment">#! /usr/bin/env python</span>\n<span class="token comment"># -*- coding: utf-8 -*-</span>\n<span class="token keyword">import</span> os\n<span class="token keyword">import</span> shutil\n<span class="token keyword">from</span> tkinter<span class="token punctuation">.</span>messagebox <span class="token keyword">import</span> <span class="token operator">*</span>\n<span class="token keyword">from</span> tkinter<span class="token punctuation">.</span>filedialog <span class="token keyword">import</span> <span class="token operator">*</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"модуль ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">os</code>'}})," представляет переносимый интерфейс к часто используемым службам операционной системы. Нами будет использован для указания пути (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">os.path</code>'}}),");"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">shutil</code>'}})," используется для таких операций над файлами как копирование, переименование, удаление;"),"\n",e.createElement(a.p,null,"импортирование модулей из ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">tkinter.filedialog</code>'}})," даст нам возможность вызывать диалоговые окна, из ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">messagebox</code>'}}),"  — создавать сообщения, уведомления для пользователя"),"\n",e.createElement(a.p,null,"Функция выбора директории для копирования, получение доступа к описанию функции."),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">savefiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\'Ask where save your files\'\'\'</span>\n    <span class="token keyword">global</span> dst\n    dst <span class="token operator">=</span> askdirectory<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>dst<span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Прежде всего, никогда не стоит забывать документировать ваш код хотя бы для того, чтобы спустя некоторое время вы сами могли в нём разобраться. В примере сразу ниже функции даётся её краткое описание."),"\n",e.createElement(a.p,null,"При импорте модуля можно будет обратиться к ней, вызвав команду ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">backup.savefiles.__doc__</code>'}}),"  —  то есть ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">имя_модуля.имя_функции.__описание__</code>'}})," :"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="shell"><pre class="language-shell"><code class="language-shell"><span class="token operator">>></span><span class="token operator">></span> backup.savefiles.__doc__\n<span class="token string">\'Ask where save your files\'</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Полученный нами в итоге модуль не предназначен для расширения или импортирования, тем не менее строки документации создавать всё же нужно."),"\n",e.createElement(a.p,null,"Далее используется переменная dst, которая впоследствии примет значение указанной пользователем директории. Значение будет строковым. Здесь переменная сделана глобальной поскольку должна быть доступна и другим функциям."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dst = askdirectory()</code>'}})," - запросит у пользователя выбор директории для сохранения файлов"),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">print (type(dst))</code>'}})," и ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">print(dst)</code>'}})," будут выводить в консоли информацию для нас, дабы мы могли увидеть какой тип получился у переменной, когда пользователь выбрал директорию. Можно удалить строки с ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">print</code>'}}),"."),"\n",e.createElement(a.p,null,"Функция выбора файлов для бекапа и вложенная функция копирования выбранных файлов"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">_selectfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\'Select your files for backup\'\'\'</span>\n    src <span class="token operator">=</span> askopenfilenames<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    src <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>\n    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">\'\'\'Save files\'\'\'</span>\n        <span class="token keyword">for</span> listcopy <span class="token keyword">in</span> src<span class="token punctuation">:</span>\n            listname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>listcopy<span class="token punctuation">)</span>\n            shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>listname<span class="token punctuation">,</span> dst<span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Backup file is OK"</span><span class="token punctuation">)</span>\n    save<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">askopenfilenames</code>'}})," - выбрать файлы для копирования. Поскольку в итоге мы получим кортеж, а кортежи неизменяемы, сразу же конвертируем его в список: ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">list(src)</code>'}}),"."),"\n",e.createElement(a.p,null,"После выбора файлов вызывается функция для немедленного их копирования в указанную пользователем директорию. Для этого используется обход по списку и копирование с модулем ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">shutil</code>'}}),":"),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">shutil.copy</code>'}})," - скопировать"),"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">listname</code>'}})," - файлы из списка"),"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">dst</code>'}})," - куда копируем"),"\n"),"\n",e.createElement(a.p,null,"Функция выбора директории и вложенная функция рекурсивного копирования"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">_selectdirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\'Select your directory for backup\'\'\'</span>\n    src2 <span class="token operator">=</span> askdirectory<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>src2<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>src2<span class="token punctuation">)</span>\n    <span class="token keyword">def</span> <span class="token function">save2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token triple-quoted-string string">\'\'\'Save directories and files\'\'\'</span>\n        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"make backup "</span> <span class="token operator">+</span> src2<span class="token punctuation">)</span>\n        names <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>src2<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>dst<span class="token punctuation">)</span>\n        <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>\n            srcname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>src2<span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n            dstname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dst<span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>srcname<span class="token punctuation">)</span><span class="token punctuation">:</span>\n                shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span>srcname<span class="token punctuation">,</span> dstname<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>srcname<span class="token punctuation">)</span><span class="token punctuation">:</span>\n                shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>srcname<span class="token punctuation">,</span> dstname<span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Backup is OK"</span><span class="token punctuation">)</span>\n    save2<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">askdirectory</code>'}})," — выбрать директорию для копирования. В функцию включена проверка для рекурсивного копирования поддиректорий. Если ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">srcname</code>'}})," — поддиректория (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">os.path.isdir</code>'}}),"), будет выполнено рекурсивное копирование (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">copytree</code>'}}),"). Если в выбранная директория помимо поддиректорий содержит обычные файлы (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">os.path.isfile</code>'}}),"), копирование этих файлов (",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">copy</code>'}}),")."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">os.listdir</code>'}})," - возвращает список, содержащий имя директории. Выбрать несколько директорий за раз нельзя (это ограничение связано с ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">askdirectory</code>'}}),", не с самим питоном), но можно повторно вызвать функцию копирования файлов и поддиректорий для следующей директории."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">os.path.join</code>'}}),' - "склеивает" пути'),"\n",e.createElement(a.p,null,"Функция, закрывающая программу"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">close_win</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\'Close window and exit programm\'\'\'</span>\n    <span class="token keyword">if</span> askyesno<span class="token punctuation">(</span><span class="token string">"Exit"</span><span class="token punctuation">,</span> <span class="token string">"Do you want to quit?"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n        root<span class="token punctuation">.</span>destroy<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Функция, показывающая информационное окно"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">about</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    showinfo<span class="token punctuation">(</span><span class="token string">"Backup"</span><span class="token punctuation">,</span> <span class="token string">"This is simple backup programm.\\n(test version)"</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"Tkinter"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py">root <span class="token operator">=</span> Tk<span class="token punctuation">(</span><span class="token punctuation">)</span>\nm <span class="token operator">=</span> Menu<span class="token punctuation">(</span>root<span class="token punctuation">)</span>\nroot<span class="token punctuation">.</span>config<span class="token punctuation">(</span>menu<span class="token operator">=</span>m<span class="token punctuation">)</span>\n\nfm <span class="token operator">=</span> Menu<span class="token punctuation">(</span>m<span class="token punctuation">)</span>\nm<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"File"</span><span class="token punctuation">,</span>menu<span class="token operator">=</span>fm<span class="token punctuation">)</span>\nfm<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Select directory for save"</span><span class="token punctuation">,</span> command <span class="token operator">=</span> savefiles<span class="token punctuation">)</span>\nfm<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Select files for copy."</span><span class="token punctuation">,</span>command<span class="token operator">=</span>_selectfile<span class="token punctuation">)</span>\nfm<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Select directories for copy"</span><span class="token punctuation">,</span> command<span class="token operator">=</span>_selectdirectory<span class="token punctuation">)</span>\nfm<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Exit"</span><span class="token punctuation">,</span>command<span class="token operator">=</span>close_win<span class="token punctuation">)</span>\n\nhm <span class="token operator">=</span> Menu<span class="token punctuation">(</span>m<span class="token punctuation">)</span>\nm<span class="token punctuation">.</span>add_cascade<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"Help"</span><span class="token punctuation">,</span>menu<span class="token operator">=</span>hm<span class="token punctuation">)</span>\nhm<span class="token punctuation">.</span>add_command<span class="token punctuation">(</span>label<span class="token operator">=</span><span class="token string">"About"</span><span class="token punctuation">,</span>command<span class="token operator">=</span>about<span class="token punctuation">)</span>\ntxt <span class="token operator">=</span> Text<span class="token punctuation">(</span>root<span class="token punctuation">,</span>width<span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">,</span>height<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">,</span>font<span class="token operator">=</span><span class="token string">"22"</span><span class="token punctuation">)</span>\ntxt<span class="token punctuation">.</span>pack<span class="token punctuation">(</span><span class="token punctuation">)</span>\n\nroot<span class="token punctuation">.</span>mainloop<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.ul,null,"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">root = Tk()</code>'}})," — создать главное окно"),"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">m = Menu(root)</code>'}})," — создать меню, привязанное к главному окну"),"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">root.config(menu=m)</code>'}})," - для создания списка в меню (add_cascade)"),"\n",e.createElement(a.li,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fm = Menu(m)</code>'}})," — создание пунктов в списке"),"\n"),"\n",e.createElement(a.p,null,"Всё дальнейшее просто: ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">fm.add_command</code>'}})," — вызовет указанное действие; ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">label</code>'}})," — метка, то, как будет называться пункт меню; ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">command</code>'}})," — указание на функцию, которая должна быть выполнена при нажатии пунтка меню; ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">pack()</code>'}})," — менеджер расположения. Он отвечает за то, как виджеты будут располагаться на главном окне."),"\n",e.createElement(a.p,null,e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">root.mainloop()</code>'}})," — специальный обязательный метод. Без него главное окно не появится."),"\n",e.createElement(a.h2,{id:"что-не-так",style:{position:"relative"}},e.createElement(a.a,{href:"#%D1%87%D1%82%D0%BE-%D0%BD%D0%B5-%D1%82%D0%B0%D0%BA","aria-label":"что не так permalink",className:"anchor before"},e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Что не так?"),"\n",e.createElement(a.p,null,"Если вам понятен приведённый пример, вы уже можете сказать, чего в нём не хватает. Например, вы можете обнаружить, что при повторном копировании объектов одной и той же директории, замена файлов происходит, а замена поддиректорий — нет. Вам лишь укажут на тот факт, что такая поддиректория уже существует и выполнение программы прекратится. В качестве самостоятельной работы предлагается изучить конструкцию ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">try-except</code>'}})," или модуль ",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">errno</code>'}})," и проработать этот момент. Например:"),"\n",e.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="py"><pre class="language-py"><code class="language-py"><span class="token keyword">def</span> <span class="token function">save2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token triple-quoted-string string">\'\'\'Save directories\'\'\'</span>\n    <span class="token keyword">try</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"make backup "</span> <span class="token operator">+</span> src2<span class="token punctuation">)</span>\n        names <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>src2<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>dst<span class="token punctuation">)</span>\n        <span class="token keyword">for</span> name <span class="token keyword">in</span> names<span class="token punctuation">:</span>\n            srcname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>src2<span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n            dstname <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>dst<span class="token punctuation">,</span> name<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>srcname<span class="token punctuation">)</span><span class="token punctuation">:</span>\n                shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span>srcname<span class="token punctuation">,</span> dstname<span class="token punctuation">)</span>\n            <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>srcname<span class="token punctuation">)</span><span class="token punctuation">:</span>\n                shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>srcname<span class="token punctuation">,</span> dstname<span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Backup is OK"</span><span class="token punctuation">)</span>\n    <span class="token keyword">except</span> OSError<span class="token punctuation">:</span>\n        shutil<span class="token punctuation">.</span>rmtree<span class="token punctuation">(</span>dstname<span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Try again"</span><span class="token punctuation">)</span>\n        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isdir<span class="token punctuation">(</span>srcname<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            shutil<span class="token punctuation">.</span>copytree<span class="token punctuation">(</span>srcname<span class="token punctuation">,</span>dstname<span class="token punctuation">)</span>\n        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>isfile<span class="token punctuation">(</span>srcname<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            shutil<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>srcname<span class="token punctuation">,</span>dstname<span class="token punctuation">)</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Backup is OK"</span><span class="token punctuation">)</span>\nsave2<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",e.createElement(a.p,null,"В Windows копирование файла/файлов работать не будет: сие есть последствие  использования этой ОС не православных путей к файлам (обратный слэш). Возможно, пользователям Windows будет интересно изменить код таким образом, чтобы данная функция работала."),"\n",e.createElement(p.y,{heading:"Подсказка"},e.createElement(a.p,null,'Чтобы программа в Windows запускалась при двойном клике, измените расширение на .pyw\nКроме того, предлагается поупражняться с tkinter и выводить всплывающее окно "Wait, please!" во время копирования (наподобие того, как это сделано при закрытии программы).')),"\n",e.createElement(a.p,null,"Для удобства файл целиком: ",e.createElement(a.a,{href:"https://gist.github.com/redVi/5029005",target:"_blank",rel:"nofollow"},"backup.py")))}var c=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.MN)(),n.components);return a?e.createElement(a,n,e.createElement(o,n)):o(n)},l=s(7792),u=s(7619);function r(n){var a,s;let{data:{mdx:t},children:p,pageContext:{prev:o,next:c}}=n;const{h1:r,title:i,description:k,image:d,table_of_contents:m}=t.frontmatter;return(0,e.useEffect)((()=>{(0,u.K)()}),[]),e.createElement(e.Fragment,null,e.createElement(l._W,{h1:r,title:i,description:k,image:null===(a=t.frontmatter.image)||void 0===a?void 0:a.publicURL},e.createElement(l.MV,{post:t.frontmatter,imageData:null==d||null===(s=d.childImageSharp)||void 0===s?void 0:s.gatsbyImageData},m?e.createElement(l.G8,{headings:t.tableOfContents}):null,e.createElement("div",{className:"page__content"},p,e.createElement(l.Mf,{prev:o,next:c})),e.createElement(l.QZ,null))))}function i(n){return e.createElement(r,n,e.createElement(c,n))}},8860:function(n,a,s){s.d(a,{y:function(){return t.y}});var t=s(3836)},8876:function(n,a,s){s.d(a,{MN:function(){return p}});var t=s(4424);const e=t.createContext({});function p(n){const a=t.useContext(e);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);