"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[1604],{8824:function(e,n,t){t.r(n),t.d(n,{Head:function(){return s.Ss},default:function(){return i}});var l=t(8876),a=t(4424),r=t(8860);function c(e){const n=Object.assign({p:"p",code:"code",h2:"h2",a:"a",span:"span",pre:"pre"},(0,l.MN)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"Не правда ли, было бы любопытно опробовать знаменитый фреймворк\nDjango для создания сайтов разной степени сложности? Если вам по душе\nузнавать что-то новое или вы по каким-либо причинам решили отказаться от\nразработки на PHP — Django как раз то, что вам нужно. В сегодняшнем посте\nбудут оговорены элементарные, но такие необходимые вещи: создание проекта\nи приложения, модели и отображения, шаблонов с использованием стандартных\nфильтров. Не исключено, что автор продолжит начатую тему и в последующем\nбудет опубликован ряд постов об этом популярном фреймворке."),"\n",a.createElement(n.p,null,"Далее предполагается, что у читателя установлен ",a.createElement(n.code,null,"Python3")," и ",a.createElement(n.code,null,"Django >= 1.5"),": именно\nна них рассчитаны наши последующие телодвижения. Устанавливать необходимые\nдля конкретного проекта приложения лучше используя virtualenw и pip.\nТак вы сможете избавить себя от чтения руководств по установке и захламления системных файлов."),"\n",a.createElement(n.h2,{id:"создание-проекта-и-приложения",style:{position:"relative"}},a.createElement(n.a,{href:"#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B0-%D0%B8-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F","aria-label":"создание проекта и приложения permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Создание проекта и приложения"),"\n",a.createElement(n.p,null,"Проект — основной каталог, где будут располагаться те или иные приложения,\nтакже проект содержит основные настройки будущего сайта. Создадим корневой\nкаталог для проекта и сам проект:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ mkdir djcode && cd djcode\n$ django-admin.py startproject pySite\n")),"\n",a.createElement(n.p,null,"Просмортим появившиеся каталоги:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ tree pySite\npySite\n├── manage.py\n└── pySite\n    ├── __init__.py\n    ├── settings.py\n    ├── urls.py\n    └── wsgi.py\n")),"\n",a.createElement(n.p,null,"Вкратце:"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"manage.py")," — отвечает за управление проектом, например, командой ",a.createElement(n.code,null,"python manage.py runserver")," можно запустить сервер для тестовой разработки."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"__init__.py")," — нужен для того, чтобы python рассматривал каталог ",a.createElement(n.code,null,"pySite")," как пакет."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"settings.py")," — файл настроек проекта: настройки языка, часового пояса, соединения с базой данных, подключаемых приложений и прочего."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"urls.py")," — настройки URL-адресов для сайта"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"wsgi.py")," — конфигурация модуля ",a.createElement(n.code,null,"wsgi")," для веб-сервера"),"\n",a.createElement(n.p,null,"Хорошо, когда проект расширяемый. Ещё лучше, если его легко сопровождать. Оба этих условия выполняются в Django. Чтобы расширить функционал сайта, следует создать для него какое-либо приложение: галерею, форум, блоги. Затем лишь подключить его в ",a.createElement(n.code,null,"settings.py")," и подправить свой ",a.createElement(n.code,null,"urls.py"),", дабы при переходе по определённому адресу пользователь перенаправлялся к страницам приложения. Поэтому давайте создадим какое-нибудь приложение. Пусть оно отвечает за публикацию новостей и хранится в том же каталоге, что и основной проект."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ django-admin.py startapp news\n$ tree pySite\npySite\n|-- pySite\n|   |-- __init__.py\n|   |-- settings.py\n|   |-- urls.py\n|   |-- views.py\n|   |-- wsgi.py\n|-- manage.py\n|-- news\n|   |-- admin.py\n|   |-- __init__.py\n|   |-- models.py\n|   |-- tests.py\n|   |-- urls.py\n|   |-- views.py\n")),"\n",a.createElement(n.p,null,"Вкратце:"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"models.py")," — файл для взаимодействия с базой данных"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"urls.py")," — отдельный файл url'ов. Он может быть пустым, если вы решите использовать для всех адресов ",a.createElement(n.code,null,"urls.py")," проекта"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"admin.py")," — создаётся вручную, нужен исключительно для удобства: настройка отображения моделей в административной панели"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"views.py")," — самое интересное, управляет логикой приложения"),"\n",a.createElement(n.p,null,"С приложением определились. Отлично! Пора браться за настройки."),"\n",a.createElement(n.h2,{id:"настройки-для-сайта",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%BD%D0%B0%D1%81%D1%82%D1%80%D0%BE%D0%B9%D0%BA%D0%B8-%D0%B4%D0%BB%D1%8F-%D1%81%D0%B0%D0%B9%D1%82%D0%B0","aria-label":"настройки для сайта permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Настройки для сайта"),"\n",a.createElement(n.p,null,"Заглянем в файл ",a.createElement(n.code,null,"settings.py")," и настроим его под свои скромные пока нужды."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"PROJECT_PATH")," — указание на то, где Django нужно искать корень проекта. Лучше использовать запись, приведённую ниже, чем писать полный путь вроде ",a.createElement(n.code,null,"~/home/user/djcode/pySite"),"."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"DEBUG = True")," — отладка влючена, Django будет выводить информативные сообщения об ошибках."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"DATABASES")," — настройки для вашей базы данных. В примере это ",a.createElement(n.code,null,"sqlite3"),", который не требует особого к себе отношения, но и полноценной базой данных для сайта на production-сервере быть не может. Чтобы использовать ",a.createElement(n.code,null,"sqlite3"),", достаточно создать в директории проекта файл ",a.createElement(n.code,null,"sqlite.db"),"."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# settings.py\nfrom os.path import abspath, join, dirname\n\nPROJECT_PATH = abspath(join(dirname(__file__), '..'))\nDEBUG = True\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME':  join(PROJECT_PATH, 'sqlite.db'),\n        'USER': '',\n        'PASSWORD': '',\n        'HOST': '',\n        'PORT': '',\n    }\n}\n")),"\n",a.createElement(n.p,null,"Идём дальше. Желательно сразу создать и подключить директорию, где будет храниться статика: css, javascript и изображения.\nКроме того, нам понадобится директория под наши html-файлы."),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"STATIC_URL")," — относительный url для статики"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"STATICFILES_DIRS")," — директория, где расположены соответствующие файлы"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"TEMPLATE_LOADERS")," — модули для работы с шаблонами"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"TEMPLATE_DIRS")," — указание на директорию, где лежат html-шаблоны"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"ROOT_URLCONF")," — главный файл url'ов"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"INSTALLED_APPS")," — подключенные приложения, вниз добавим наш news."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# settings.py\nSTATIC_URL = '/static/'\nSTATICFILES_DIRS = (join(PROJECT_PATH, 'static'),)\nTEMPLATE_LOADERS = (\n    'django.template.loaders.filesystem.Loader',\n    'django.template.loaders.app_directories.Loader',\n)\n\nROOT_URLCONF = 'pySite.urls'\nTEMPLATE_DIRS = (\n    join(PROJECT_PATH, 'templates'),\n)\n\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'django.contrib.admin',\n    'news',\n)\n")),"\n",a.createElement(n.p,null,"Теперь можно проверить сайт на работоспособность. Для этого, находясь в директории с ",a.createElement(n.code,null,"manage.py")," следует ввести команду:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ python manage.py syncdb\n$ python manage.py runserver\n")),"\n",a.createElement(n.p,null,"Первая команда создаст записи в базе данных и предложит создать суперпользователя, если вы подключили приложение административной панели, вторая — запустит тестовый сервер разработки."),"\n",a.createElement(n.p,null,"По адресу ",a.createElement(n.code,null,"127.0.0.1:8000/")," должно появиться стандартное окно приветствия Django."),"\n",a.createElement(n.h2,{id:"создание-модели-и-представления-конфигурация-urlspy",style:{position:"relative"}},a.createElement(n.a,{href:"#%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BC%D0%BE%D0%B4%D0%B5%D0%BB%D0%B8-%D0%B8-%D0%BF%D1%80%D0%B5%D0%B4%D1%81%D1%82%D0%B0%D0%B2%D0%BB%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BA%D0%BE%D0%BD%D1%84%D0%B8%D0%B3%D1%83%D1%80%D0%B0%D1%86%D0%B8%D1%8F-urlspy","aria-label":"создание модели и представления конфигурация urlspy permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Создание модели и представления, конфигурация ",a.createElement(n.code,null,"urls.py")),"\n",a.createElement(n.p,null,"Следующим шагом будет настройка моделей для взаимодействия с БД, создание представления (логика приложения), настройка файла ",a.createElement(n.code,null,"urls.py"),"."),"\n",a.createElement(n.p,null,"В примере ниже создаётся класс ",a.createElement(n.code,null,"Post"),", подкласс абстрактного класса ",a.createElement(n.code,null,"models.Model"),". Мы хотим видеть у нашего поста название (",a.createElement(n.code,null,"title"),"), его тело (",a.createElement(n.code,null,"body"),"), дату создания (",a.createElement(n.code,null,"timestamp"),") и автора (",a.createElement(n.code,null,"author"),"). Обратите внимание на ",a.createElement(n.code,null,"models.*Field"),". Каждая модель соответствует указанному полю."),"\n",a.createElement(n.p,null,"Так, ",a.createElement(n.code,null,"models.CharField")," выведет несколько символов, максимальное их значение 150, этого должно хватить для названия;"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"models.TextField")," позволит вводить неограниченное число символов: полноценный текст;"),"\n",a.createElement(n.p,null,a.createElement(n.code,null,"models.ForeignKey")," указывает на то, что у поста может быть один автор."),"\n",a.createElement(n.p,null,"Эти таблицы будут созданы в базе данных при синхронизации."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# ~/djcode/pySite/news/models.py\n\nfrom django.db import models\nfrom django.contrib import admin\nfrom django.contrib.auth.models import User\n\nclass Post(models.Model):\n    title = models.CharField(max_length=150)\n    body = models.TextField()\n    timestamp = models.DateTimeField()\n    author = models.ForeignKey(User)\n\n    def __unicode__(self):\n        return self.title\n        return self.body\n")),"\n",a.createElement(n.p,null,"Теперь создадим наше первое представление. Оно призвано выводить список постов на одной странице. О том, как сделать постраничный вывод поговорим ",a.createElement(n.a,{href:"/posts/django-pagination/"},"в следующий раз"),"."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# djcode/pySite/news/views.py\n\nfrom django.shortcuts import get_object_or_404, render_to_response\nfrom django.template import RequestContext\nfrom .models import Post\n\ndef news(request):\n    ''' Show all news '''\n    posts = Post.objects.all().order_by('-timestamp')\n    return render_to_response('news/news.html', {'posts':posts})\n")),"\n",a.createElement(n.p,null,"Это простейшее представление, которое принимает все существующие посты и выводит их на определённой странице. Чуть ниже мы создадим эту страницу. Но сначала наполним сайт каким-нибудь содержимым. Административная панель уже подключена в нашем ",a.createElement(n.code,null,"INSTALLED_APPS"),", осталось только зайти и проверить как отображаются созданные нами модели. Для отображения их в админке создадим ещё один файл (можно вписать это и в предыдущем файле ",a.createElement(n.code,null,"views"),", но разделить их иногда удобнее):"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# djcode/pySite/news/admin.py\n\nfrom django.contrib import admin\nfrom .models import Post\n\nclass PostAdmin(admin.ModelAdmin):\n    models = Post\n    list_display = ('title', 'timestamp')\n    list_filter = ('timestamp',)\n\nadmin.site.register(Post, PostAdmin)\n")),"\n",a.createElement(n.p,null,"Раскомментируйте в ",a.createElement(n.code,null,"~/djcode/pySite/pySite/urls.py")," строки:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# djcode/pySite/pySite/urls.py\n\nfrom django.conf.urls import patterns, include, url\nfrom django.contrib import admin\nadmin.autodiscover()\n\n\nurlpatterns = patterns('',\n    url(r'^admin/', include(admin.site.urls)),\n\n)\n")),"\n",a.createElement(n.p,null,"После того, как вы зайдёте по адресу ",a.createElement(n.code,null,"127.0.0.1:8000/admin/")," и создадите несколько постов, вы должны увидеть нечто подобное:"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1024px; flex:3;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 34%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/e18ede3bf341d143856820f7139d4811/e93cc/django1.webp 300w,\n/static/e18ede3bf341d143856820f7139d4811/b0544/django1.webp 600w,\n/static/e18ede3bf341d143856820f7139d4811/53334/django1.webp 1024w"\n              sizes="(max-width: 1024px) 100vw, 1024px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/e18ede3bf341d143856820f7139d4811/73b64/django1.jpg 300w,\n/static/e18ede3bf341d143856820f7139d4811/3ad8d/django1.jpg 600w,\n/static/e18ede3bf341d143856820f7139d4811/c3413/django1.jpg 1024w"\n            sizes="(max-width: 1024px) 100vw, 1024px"\n            type="image/jpeg"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/e18ede3bf341d143856820f7139d4811/c3413/django1.jpg"\n            alt="админка django"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",a.createElement(n.p,null,"Вернёмся к шаблонам. Вообще, создание страниц мы разделим на два этапа: создание базовой страницы и остальных страниц, которые будут просто наследовать содержимое базового шаблона. Это будет весьма кстати, если только вам не хочется писать каждую страницу с нуля."),"\n",a.createElement(n.p,null,"Так будет выглядеть шаблон базовой страницы:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-django"},'{# djcode/pySite/templates/base.html #}\n\n{% load static from staticfiles %} \x3c!-- подгружаем статику --\x3e\n{% load i18n  %}\n\n<!DOCTYPE HTML>\n<html>\n<head>\n{% block meta %}\n    \x3c!-- подключаем наш css-файл, если он есть --\x3e\n    <link rel="stylesheet" type="text/css" href="{% static "css/base.css" %}" />\n{% endblock %}\n<title>{% block title %}My Django Site{% endblock %}</title>\n\n</head>\n\n<body>\n    {% block header %}\n        {% include "header.html" %} \x3c!-- подключаем «шапку» сайта --\x3e\n    {% endblock %}\n\n    <div id="content">\n        {% block content %}{% endblock %} \x3c!-- место для контента --\x3e\n    </div>\n\n    {% block footer %} \x3c!-- подключаем «подвал» сайта --\x3e\n        {% include "footer.html" %}\n    {% endblock %}\n</body>\n</html>\n')),"\n",a.createElement(n.p,null,"Теперь примемся за шаблон, который выведет все наши посты."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-django"},"{# djcode/pySite/templates/news/news.html #}\n\n{% extends 'base.html' %} \x3c!-- подключаем базовый шаблон --\x3e\n\n{% block title %}News{% endblock %}\n\n{% block content %}\n    <div id=\"post\">\n        {% for post in posts %} \x3c!-- итерация по всем постам --\x3e\n            <dl>\n              <dd>\n                <h3>\n                    <a href=\"{% url 'news:one_new' post.id %}\">{{ post.title }}</a>\n                </h3>\n              </dd>\n            </dl>\n\n            \x3c!-- дата публикации и автор --\x3e\n            {{ post.timestamp }}\n            {{ post.author }}\n\n            \x3c!-- обрезаем посты, вывод по 80 слов --\x3e\n            {{ post.body|truncatewords:80|safe }}\n\n            \x3c!-- ссылаемся на полный текст поста --\x3e\n            <a href=\"{% url 'news:one_new' post.id %}\">Читать полностью&raquo;</a>\n        {% endfor %}\n    </div>\n{% endblock %}\n")),"\n",a.createElement(n.p,null,"Как уже, должно быть, заметил читатель, мы сразу включили ссылку на пока несуществующее представление: вывод отдельного поста целиком. Что требуется для его создания? Дальнейшие наши шаги сводятся к созданию ещё одной функции: на этот раз она будет выводить отдельную страницу, подготовки для неё своего шаблона и настройке файла ",a.createElement(n.code,null,"urls.py"),". Приступим."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# djcode/pySite/news/views.py\n\n# после функции news дописать\ndef one_new(request, post_id):\n    ''' Show single news'''\n    post = get_object_or_404(Post, pk=post_id)\n\n    vars = dict(\n        title=post.title,\n        body=post.body,\n        author=post.author,\n        timestamp=post.timestamp,\n    )\n\n    return render_to_response('news/one_new.html', vars, context_instance=RequestContext(request))\n")),"\n",a.createElement(n.p,null,"Переменной post передаётся объект ",a.createElement(n.code,null,"Post")," с его ID либо вызывается исключение ",a.createElement(n.code,null,"404"),": страница не найдена. Определяется то, что должно быть выведено: название, автор, время создания. Возвращается страница ",a.createElement(n.code,null,"one_new.html"),", которой мы сейчас и займёмся."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-django"},"{# djcode/pySite/templates/news/one_new.html #}\n\n{% extends 'base.html' %}\n\n\x3c!-- отображать название поста как title страницы--\x3e\n{% block title %}{{ title }}{% endblock %}\n\n{% block content %}\n\nДата: {{ timestamp }}\nАвтор: {{ author }}\n\n<h1>{{ title }}</h1>\n<div>{{ body|safe|escape}}</div>\n{% endblock %}\n")),"\n",a.createElement(r.y,{heading:"Примечание"},a.createElement(n.p,null,"escape экранирует HTML-теги, если вы использовали их при написании статьи в админке")),"\n",a.createElement(n.p,null,"Теперь напишем функцию и шаблон для главной страницы, с которой будем переходить на последние десять записей.\nПредставление и шаблон главной страницы:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# djcode/pySite/pySite/views.py\n\nfrom django.shortcuts import render_to_response\nfrom django.template import RequestContext\nfrom news.views import Post\n\n# можно переписать как в news/views.py\ndef home(request):\n    vars = dict (\n        posts=Post.objects.all().order_by('-timestamp')[:10],\n    )\n\n    return render_to_response('index.html', vars, context_instance=RequestContext(request))\n")),"\n",a.createElement(n.p,null,"Шаблон для вывода последних десяти публикаций на главной:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-django"},'{# djcode/pySite/templates/index.html #}\n\n{% extends "base.html" %}\n{% block title %}Index Page{% endblock %}\n\n{% block content %}\n    <div id="posts">\n        <ul>\n            {% for post in posts %}\n                <li>\n                    <a href="{% url \'news:one_new\' post.id %}">\n                        {{ post.title }}\n                    </a>\n                </li>\n            {% endfor %}\n        </ul>\n    </div>\n{%endblock%}\n')),"\n",a.createElement(n.p,null,"Наконец, создадим два (в примере мы ведь отделяем все приложения\nдруг от друга, чтобы их можно было подключать к другому проекту\nвнесением одной лишь строки в ",a.createElement(n.code,null,"INSTALLED_APPS")," и синхронизацией с БД)\nфайла ",a.createElement(n.code,null,"urls.py"),": один главный, другой  — персонально для созданного приложения news.\nПри наличии пяти-десяти приложений это может быть удобным. Если приложение одно\nи со временем расширять функционал не требуется, создайте лишь один ",a.createElement(n.code,null,"urls.py"),"."),"\n",a.createElement(n.p,null,"Импортируем необходимые модули, при входе на главную выводим представление,\nуказанное в ",a.createElement(n.code,null,"pySite.views.home")," функции, при входе на ",a.createElement(n.code,null,"http://127.0.0.1:8000/news"),"\nперенаправляем поиск в ",a.createElement(n.code,null,"news/urls.py"),"."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# djcode/pySite/pySite/urls.py\n\nfrom django.conf.urls import patterns, include, url\nfrom django.contrib import admin\nadmin.autodiscover()\n\nurlpatterns = patterns('',\n    url(r'^$', 'pySite.views.home', name='home'),\n    url(r'^news/', include('news.urls', namespace='news')),\n    url(r'^admin/', include(admin.site.urls)),\n\n)\n")),"\n",a.createElement(n.p,null,"В следующем файле обрабатываем наши представления:"),"\n",a.createElement(n.p,null,"если пользователь заходит на страницу вывода всех новостей, использовать\nфункцию ",a.createElement(n.code,null,"news.views.news"),"; если на конкретную новость — вывод выбранной\nновости из ",a.createElement(n.code,null,"news.views.one_new"),":"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-python"},"# djcode/pySite/news/urls.py\n\nfrom django.conf.urls import patterns, include, url\n\nurlpatterns = patterns('news.views',\n    url(r'^$', 'news', name='news'),\n    url(r'^(?P<post_id>\\d+)/$', 'one_new', name='one_new'),\n\n)\n")),"\n",a.createElement(n.p,null,"Дело сделано. Если всё прошло гладко, мы должны прийти примерно к подобному результату:"),"\n",a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 956px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 41.333333333333336%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/0b2b40c0f7e9ba994705637abea65728/e93cc/django2.webp 300w,\n/static/0b2b40c0f7e9ba994705637abea65728/b0544/django2.webp 600w,\n/static/0b2b40c0f7e9ba994705637abea65728/dbaa2/django2.webp 956w"\n              sizes="(max-width: 956px) 100vw, 956px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/0b2b40c0f7e9ba994705637abea65728/eed55/django2.png 300w,\n/static/0b2b40c0f7e9ba994705637abea65728/7491f/django2.png 600w,\n/static/0b2b40c0f7e9ba994705637abea65728/ab07e/django2.png 956w"\n            sizes="(max-width: 956px) 100vw, 956px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/0b2b40c0f7e9ba994705637abea65728/ab07e/django2.png"\n            alt="django"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\n",a.createElement(n.p,null,"Успехов в изучении этого отличного фреймворка!"))}var o=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.MN)(),e.components);return n?a.createElement(n,e,a.createElement(c,e)):c(e)},s=t(7792),d=t(7619);function m(e){var n,t;let{data:{mdx:l},children:r,pageContext:{prev:c,next:o}}=e;const{h1:m,title:i,description:p,image:u,table_of_contents:E}=l.frontmatter;return(0,a.useEffect)((()=>{(0,d.K)()}),[]),a.createElement(a.Fragment,null,a.createElement(s._W,{h1:m,title:i,description:p,image:null===(n=l.frontmatter.image)||void 0===n?void 0:n.publicURL},a.createElement(s.MV,{post:l.frontmatter,imageData:null==u||null===(t=u.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},E?a.createElement(s.G8,{headings:l.tableOfContents}):null,a.createElement("div",{className:"page__content"},r,a.createElement(s.Mf,{prev:c,next:o})),a.createElement(s.QZ,null))))}function i(e){return a.createElement(m,e,a.createElement(o,e))}},8860:function(e,n,t){t.d(n,{y:function(){return l.y}});var l=t(3836)},8876:function(e,n,t){t.d(n,{MN:function(){return r}});var l=t(4424);const a=l.createContext({});function r(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);