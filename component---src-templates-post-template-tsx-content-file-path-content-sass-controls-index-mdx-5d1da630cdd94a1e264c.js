"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[7920],{9312:function(e,n,a){a.r(n),a.d(n,{Head:function(){return o.Ss},default:function(){return m}});var t=a(8876),l=a(4424);function r(e){const n=Object.assign({p:"p",em:"em",h2:"h2",a:"a",span:"span",code:"code",pre:"pre"},(0,t.MN)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"Управляющие конструкции препроцессоров — основа, позволяющая сократить\nисходный код в несколько раз и сделать возможным написание собственного\nCSS-фреймворка. Данный материал тем, кто начинает работать с ",l.createElement(n.em,null,"любым")," препроцессором: понимаешь один — понимаешь все."),"\n",l.createElement(n.p,null,"Все управляющие конструкции SASS начинаются с символа @: «коммерческое at».\nВ SASS их целых четыре вида."),"\n",l.createElement(n.h2,{id:"for",style:{position:"relative"}},l.createElement(n.a,{href:"#for","aria-label":"for permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"@for"),"\n",l.createElement(n.p,null,"Запись ",l.createElement(n.code,null,"@for $var from <start> through <end>")," читается как: для каждого элемента от\nстартовой точки до конечной."),"\n",l.createElement(n.p,null,"Представьте, что у вас 100 иконок с разным значением ",l.createElement(n.code,null,"background-image"),".\nРазумеется, базовый класс, общий для всех, тоже есть. Что делать? Итерацию с ",l.createElement(n.code,null,"@for"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-sass"},'$img: \'assets/images\';  /* физическое расположение иконок */\n$class-slug: \'icon\';    /* базовое имя класса */\n\n/* модифицировать каждую из ста иконок */\n@for $i from 1 through 100 {\n  .#{$class-slug}__#{$i} {\n    background-image: url("#{$img}/#{$class-slug}-#{$i}.svg");\n  }\n}\n\n/* получаем в итоге */\n.icon__1 {\n  background-image: url("assets/images/icon-1.svg");\n}\n\n.icon__100 {\n  background-image: url("assets/images/icon-100.svg");\n}\n')),"\n",l.createElement(n.p,null,"Да, называть иконки таким образом не всегда разумно, но для понимания цикла сгодится.\nВозможно, реальные примеры кода из репозитория Bootstrap понравятся вам больше.\nРекомендую взглянуть как-нибудь на четвёртую версию фреймворка, которая написана\nна SASS."),"\n",l.createElement(n.h2,{id:"if",style:{position:"relative"}},l.createElement(n.a,{href:"#if","aria-label":"if permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"@if"),"\n",l.createElement(n.p,null,"Обычное условие. Часто используется в подпрограммах.\nКод ниже описывает подпрограмму, которая принимает аргумент ",l.createElement(n.code,null,"boolean"),". Если\nусловие истинно, значение ",l.createElement(n.code,null,"display")," элемента блочное, в противном случае —\n",l.createElement(n.code,null,"flexbox"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-sass"},"$boolean: true !default;\n\n/* создание подпрограммы */\n@mixin display-type($boolean) {\n  @if $boolean == true {\n    display: block;\n  }\n  @else {\n    display: flex;\n  }\n}\n\n/* включаем наш mixin с аргументом, отличным от false, в класс .block-type */\n.block-type {\n  @include display-type(false);\n}\n\n/* получаем в итоге */\n.block-type {\n  display: flex;\n}\n")),"\n",l.createElement(n.h2,{id:"each",style:{position:"relative"}},l.createElement(n.a,{href:"#each","aria-label":"each permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"@each"),"\n",l.createElement(n.p,null,"Выручает, когда вы имеете дело с массивом. SASS будет использовать ",l.createElement(n.code,null,"@list")," для\nвычленения из него всех указанных элементов. В данном случае задача: менять аватары\nавторов."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-sass"},'$list: (adam, john, wynn, mason, ivan);\n\n.author-images {\n  @each $author in $list {\n    &--#{$author} {\n      background: image-url("#{$img}/#{$author}.png") no-repeat;\n    }\n  }\n}\n\n/* получаем в итоге */\n.author-images--adam {\n  background: image-url("assets/images/adam.png") no-repeat;\n}\n\n.author-images--john {\n  background: image-url("assets/images/john.png") no-repeat;\n}\n')),"\n",l.createElement(n.p,null,"Ещё один пример: снова иконки. На этот раз они не безымянны и не бесцветны.\nИзначально задаём нужные параметры (в примере цвет), а затем для каждой своё\nназвание и соответствующий ",l.createElement(n.code,null,"background"),". Обратите внимание на то, что массив\nувеличился, теперь используются по два значения на итерацию."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-sass"},"/* цвета удобнее задать в одном месте */\n$twi:   #41b7d8;\n$fb:    #3b5997;\n$gplus: #d64937;\n\n\n/* массив $social со значениями: название и цвет */\n$social: (twitter, $twi),\n         (facebook, $fb),\n         (googleplus, $gplus);\n\n\n/* перебираем */\n@each $socialnetwork, $color in $social {\n  .social-link--#{$socialnetwork} {\n    background-color: $color;\n    &:focus,\n    &:hover {\n      background-color: darken($color, 5%);\n    }\n  }\n}\n\n/* получаем в итоге */\n.social-link--twitter {\n  background-color: #41b7d8;\n}\n.social-link--twitter:focus, .social-link--twitter:hover {\n  background-color: #2cafd4;\n}\n")),"\n",l.createElement(n.h2,{id:"while",style:{position:"relative"}},l.createElement(n.a,{href:"#while","aria-label":"while permalink",className:"anchor before"},l.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"@while"),"\n",l.createElement(n.p,null,"Для цикла ",l.createElement(n.code,null,"@while")," нужны два параметра: переменная и шаг. Пока величина шага\nудовлетворяет условию, происходит преобразование переменной. При каждой итерации\nшаг увеличивается."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-sass"},"$color: #e44;\n$step: 1;\n\n@while $step <= 5 {\n  .palette-#{$step} {\n    background-image: linear-gradient(\n      to bottom,\n      darken($color, ($step * 2%)) 0%,\n      darken($color, ($step * 10%)) 100%\n    );\n    $step: $step + 1;\n  }\n}\n\n/* получаем в итоге */\n.palette-1 {\n  background-image: linear-gradient(to bottom, #ed3b3b 0%, #ea1515 100%);\n}\n\n.palette-2 {\n  background-image: linear-gradient(to bottom, #ec3131 0%, #bb1111 100%);\n}\n")),"\n",l.createElement(n.p,null,"Надеюсь, этот небольшой экскурс будет кому-то полезен. Для более подробного\nознакомления с особенностями SASS следует читать официальную документацию.\nПримеры там абстрактные, но это не помешает сообразить как их применить\nна практике."))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,t.MN)(),e.components);return n?l.createElement(n,e,l.createElement(r,e)):r(e)},o=a(7792),s=a(7619);function i(e){var n,a;let{data:{mdx:t},children:r,pageContext:{prev:c,next:i}}=e;const{h1:m,title:u,description:d,image:g,table_of_contents:h}=t.frontmatter;return(0,l.useEffect)((()=>{(0,s.K)()}),[]),l.createElement(l.Fragment,null,l.createElement(o._W,{h1:m,title:u,description:d,image:null===(n=t.frontmatter.image)||void 0===n?void 0:n.publicURL},l.createElement(o.MV,{post:t.frontmatter,imageData:null==g||null===(a=g.childImageSharp)||void 0===a?void 0:a.gatsbyImageData},h?l.createElement(o.G8,{headings:t.tableOfContents}):null,l.createElement("div",{className:"page__content"},r,l.createElement(o.Mf,{prev:c,next:i})),l.createElement(o.QZ,null))))}function m(e){return l.createElement(i,e,l.createElement(c,e))}},8876:function(e,n,a){a.d(n,{MN:function(){return r}});var t=a(4424);const l=t.createContext({});function r(e){const n=t.useContext(l);return t.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);