"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[6236],{1484:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.Ss},default:function(){return d}});var r=t(8876),l=t(4424);function a(e){const n=Object.assign({p:"p",pre:"pre",code:"code",a:"a"},(0,r.MN)(),e.components);return l.createElement(l.Fragment,null,l.createElement(n.p,null,"При написании статей уже давно не принято использовать простую HTML-разметку.\nНабирать каждый раз HTML-теги вручную — не самое приятное времяпрепровождение. Зачастую для этих целей используются user-friendly редакторы а-ля TinyMCE. И выглядят неплохо, и справиться с ними в силах любой необременённый излишками знания пользователь. Минус один: html-разметка, получаемая на выходе, может совсем не радовать глаз автора и мохнатые лапки поисковых «пауков»."),"\n",l.createElement(n.p,null,"По другую сторону сто́ят облегчённые языки разметки, самым популярным из которых является markdown. Вот его-то мы и будем подключать к Rails-проекту."),"\n",l.createElement(n.p,null,"Для начала установим необходимые гемы. Для этого их следует прописать в Gemfile:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-ruby"},"# Gemfile\ngem 'redcarpet', '~> 3.0.0'\ngem 'pygments.rb'\n")),"\n",l.createElement(n.p,null,"И дать команду:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-shell"},"$ bundle install\n")),"\n",l.createElement(n.p,null,"После чего обратимся к созданию helper'а, призванного сгенерировать html из\nфайла с разметкой markdown. За генерацию страниц в html из markdown в\nответе ",l.createElement(n.code,null,"redcarpet"),". К тому же благодаря ",l.createElement(n.code,null,"pygments.rb")," у нас появляется\nвозможность подсветки синтаксиса в коде."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-ruby"},"# helpers/application_helper.rb\n\nmodule ApplicationHelper\n\n  class HTMLwithPygments < Redcarpet::Render::HTML\n    require 'pygments.rb'\n\n    def block_code(code, language)\n      Pygments.highlight(code, :lexer => language)\n    end\n  end\n\n  def markdown(text, options = {})\n    renderer = HTMLwithPygments.new(hard_wrap: true)\n    options={\n      autolink: true,\n      no_intra_emphasis: true,\n      fenced_code_blocks: true,\n      lax_html_blocks: true,\n      strikethrough: true,\n      superscript: true,\n      space_after_headers: true,\n      underline: true,\n      highlight: true,\n      quote: true\n    }\n\n    Redcarpet::Markdown.new(renderer, options).render(text).html_safe\n  end\nend\n")),"\n",l.createElement(n.p,null,"Для подсветки синтаксиса нужно написать блок кода и указать необходимый ЯП, вот так:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,null,'~~~ruby\nputs "Hello!"\n~~~\n')),"\n",l.createElement(n.p,null,"Функция ",l.createElement(n.code,null,"markdown")," принимает на вход текст с указанными опциями и генерирует html-страницу. Подробно об имеющихся опциях и их значении можно прочесть на ",l.createElement(n.a,{href:"https://github.com/vmg/redcarpet",target:"_blank",rel:"nofollow"},"странице проекта"),"."),"\n",l.createElement(n.p,null,"Осталось лишь вывести наш текст на обозрение массам:"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-erb"},"<%# posts/show.html.erb %>\n\n<%= link_to @post.title, post_path(@post) %>\n  <%= markdown @post.content %>\n")),"\n",l.createElement(n.p,null,"С этим способом в базе данных текст хранится в формате markdown, а перед тем,\nкак страница будет отображена, ",l.createElement(n.code,null,"redcarpet")," переводит её в html-формат.\nС точки зрения производительности не самый лучший вариант."),"\n",l.createElement(n.p,null,"Но есть и другой способ: сгенерировать html перед тем, как сохранять файл\nв базу данных при помощи ",l.createElement(n.code,null,"before_save"),"."),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-ruby"},"# post.rb\n#\n# Table name: posts\n#\n#  id         :integer     not null, primary key\n#  title      :string(255)\n#  content    :text\n#  slug       :string(255)\n#  summary    :string(255)\n#  created_at :datetime\n#  updated_at :datetime\n\nclass Post < ActiveRecord::Base\n  before_save :render_content\n\n  def render_content\n    require 'redcarpet'\n    renderer = HTMLwithPygments\n    extensions = {fenced_code_blocks: true}\n    redcarpet = Redcarpet::Markdown.new(renderer, extensions)\n    self.content = redcarpet.render self.content\n  end\n\n  class HTMLwithPygments < Redcarpet::Render::HTML\n    require 'pygments.rb'\n    def block_code(code, language)\n      Pygments.highlight(code, :lexer => language)\n    end\n  end\nend\n")),"\n",l.createElement(n.p,null,"Если ресурс не относится к техническим и статья не предназначена для\nвывода блоков кода можно обойтись без ",l.createElement(n.code,null,"pygments"),":"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-ruby"},"# post.rb\n\nclass Post < ActiveRecord::Base\n  before_save :render_content\n\n  def render_content\n    require 'redcarpet'\n    renderer = Redcarpet::Render::HTML.new\n    extensions = {fenced_code_blocks: true}\n    redcarpet = Redcarpet::Markdown.new(renderer, extensions)\n    self.content = redcarpet.render self.content\n  end\nend\n")),"\n",l.createElement(n.p,null,"Теперь в базе будет лежать готовая html-страница."),"\n",l.createElement(n.p,null,"Для корректного вывода такой странички нам нужно использовать\nстандартный фильтр ",l.createElement(n.code,null,"html_safe"),":"),"\n",l.createElement(n.pre,null,l.createElement(n.code,{className:"language-erb"},"<%# posts/show.html.erb %>\n\n<%= link_to @post.title, post_path(@post) %>\n  <%= @post.content.html_safe %>\n")),"\n",l.createElement(n.p,null,"Ещё раз: в первом примере (при генерации «на лету») страница\nсохраняется в формате markdown, каждый раз перед тем как вывести её\nсодержимое ",l.createElement(n.code,null,"redcarpet")," генерирует текст из markdown в html."),"\n",l.createElement(n.p,null,"Во втором примере отображается предварительно сгенерированный html-код.\nТак что вы вольны выбирать, какой из вариантов удобнее в каждом конкретном случае."))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,r.MN)(),e.components);return n?l.createElement(n,e,l.createElement(a,e)):a(e)},o=t(7792),s=t(7619);function m(e){var n,t;let{data:{mdx:r},children:a,pageContext:{prev:c,next:m}}=e;const{h1:d,title:u,description:p,image:i,table_of_contents:g}=r.frontmatter;return(0,l.useEffect)((()=>{(0,s.K)()}),[]),l.createElement(l.Fragment,null,l.createElement(o._W,{h1:d,title:u,description:p,image:null===(n=r.frontmatter.image)||void 0===n?void 0:n.publicURL},l.createElement(o.MV,{post:r.frontmatter,imageData:null==i||null===(t=i.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},g?l.createElement(o.G8,{headings:r.tableOfContents}):null,l.createElement("div",{className:"page__content"},a,l.createElement(o.Mf,{prev:c,next:m})),l.createElement(o.QZ,null))))}function d(e){return l.createElement(m,e,l.createElement(c,e))}},8876:function(e,n,t){t.d(n,{MN:function(){return a}});var r=t(4424);const l=r.createContext({});function a(e){const n=r.useContext(l);return r.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);