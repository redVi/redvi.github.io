"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[3748],{3884:function(e,n,t){t.r(n),t.d(n,{Head:function(){return o.Ss},default:function(){return m}});var l=t(8876),a=t(4424);function r(e){const n=Object.assign({p:"p",h2:"h2",a:"a",span:"span",em:"em",blockquote:"blockquote",pre:"pre",code:"code",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",strong:"strong",h3:"h3",ul:"ul",li:"li"},(0,l.MN)(),e.components);return a.createElement(a.Fragment,null,a.createElement(n.p,null,"В продолжение темы о публикациях, способах их создания и размещения. На этот раз\nпопробуем приготовить основу блога, базирующегося на sinatra."),"\n",a.createElement(n.h2,{id:"введение",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%B2%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5","aria-label":"введение permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Введение"),"\n",a.createElement(n.p,null,a.createElement(n.em,null,"Sinatra")," — DSL (Domain Specific language, предметно-специфичный язык),\nиспользующий интерфейс для разработки веб приложений ",a.createElement(n.em,null,"Rack"),". Хотя в некоторых\nисточниках его гордо именуют веб-фреймворком, на официальном сайте можно\nвстретить следующую формулировку:"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"Sinatra is a DSL for quickly creating web applications in Ruby with minimal\neffort"),"\n",a.createElement(n.p,null,"Sinatra это DSL для быстрого создания веб-приложений на Ruby с минимальными усилиями"),"\n"),"\n",a.createElement(n.p,null,"В природе имеются и полноценные фреймворки, базирующиеся на sinatra. Padrino, например."),"\n",a.createElement(n.p,null,"Увы, об истории создания самого Sinatra миру неизвестно ничего, кроме того факта, что\nразработал его некий Blake Mizerany из солнечного штата Калифорния."),"\n",a.createElement(n.h2,{id:"первые-шаги",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%BF%D0%B5%D1%80%D0%B2%D1%8B%D0%B5-%D1%88%D0%B0%D0%B3%D0%B8","aria-label":"первые шаги permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Первые шаги"),"\n",a.createElement(n.p,null,"Для начала установим необходимый минимум зависимостей и поприветствуем мир. Для\nсего несложного действа нам потребуется создать несколько файлов. Вот они:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ mkdir sinatra && cd sinatra\n$ touch main.rb config.ru Gemfile\n")),"\n",a.createElement(n.p,null,"При помощи ",a.createElement(n.code,null,"main.rb")," мы будем взывать к самому sinatra, ",a.createElement(n.code,null,"config.ru")," понадобится\nнам для запуска нашего минималистичного веб-сервера, а в ",a.createElement(n.code,null,"Gemfile")," будут\nсосредоточены те джемы, которые потребуются для запуска всего этого хозяйства."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# main.rb\n\nrequire 'sinatra' # подгрузить sinatra\n# sinatra имеет модульную структуру\n# что позволяет включать лишь необходимое:\n# require 'sinatra/base'\n# вывести на главной странице приветствие\nget '/' do\n  \"<h2>Hello!</h2>\"\nend\n")),"\n",a.createElement(n.p,null,"Дальше заглянем в файл с нашими джемами:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# Gemfile\n\nsource 'https://rubygems.org' # откуда брать gem'ы\nruby '2.1.0' # версия руби\n\ngem 'sinatra'\ngem 'rake'\n")),"\n",a.createElement(n.p,null,"Можно установить эти джемы вручную или же при помощи ",a.createElement(n.code,null,"bundle"),", ежели таковой у\nвас уже имеется:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ gem install my_gem # ручная установка джемов\n$ bundle install # рекомендуемый способ, bundle будет читать ваш Gemfile\n")),"\n",a.createElement(n.p,null,"Чтобы при установке пакетов не ставить документацию к ним можно создать в домашнем каталоге файл ",a.createElement(n.code,null,"~/.gemrc")," с таким содержанием:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-bash"},"# ~/.gemrc\ngem: --no-rdoc --no-ri\n")),"\n",a.createElement(n.p,null,"Осталось главное: запустить наше приветствие. Сделаем это, обратившись к\n",a.createElement(n.code,null,"config.ru"),":"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"#\\ -w -p 4000 # указать желаемый порт\n\nrequire './main.rb' # подгрузить main.rb\nrun Sinatra::Application # запустить приложение\n")),"\n",a.createElement(n.p,null,"Отныне по адресу ",a.createElement(n.a,{href:"http://localhost:4000",target:"_blank",rel:"nofollow"},"http://localhost:4000")," доступна наша первая страничка. Введите\nв консоли команду ",a.createElement(n.code,null,"rackup"),", чтобы запустить сервер разработки WEBrick и\nубедиться в этом."),"\n",a.createElement(n.h2,{id:"миграции",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%BC%D0%B8%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D0%B8","aria-label":"миграции permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Миграции"),"\n",a.createElement(n.p,null,"Для удобства вынесем некоторые элементы из корня в другие каталоги, после чего\nструктура приложения будет выглядеть следующим образом:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,null,"sinatra\n├── app\n│   ├── helpers.rb\n│   ├── models.rb\n│   └── routes.rb\n├── config\n│   ├── constants.rb\n│   └── environments.rb\n├── config.ru\n├── Gemfile\n├── main.rb\n├── public\n│   ├── favicon.ico\n│   ├── images\n│   │   ├── logo.png\n│   └── style.css\n├── Rakefile\n└── views\n    ├── index.erb\n    └── layout.erb\n")),"\n",a.createElement(n.p,null,"Подключим наши новообразованные файлы:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# main.rb\n# -*- coding: utf-8 -*-\n\nrequire 'sinatra'\nrequire 'sinatra/activerecord'\nrequire 'redcarpet'\n\n$LOAD_PATH.unshift(File.dirname(__FILE__) + '/app')\nrequire 'models'  # здесь живут модели\nrequire 'routes'  # маршруты\nrequire 'helpers' # и хелперы\n\n$LOAD_PATH.unshift(File.dirname(__FILE__) + '/config')\nrequire 'environments' # настройки конфигурации\nrequire 'constants'    # константы\n\n# или короче\n# Dir.glob('./{app,config}/*.rb').each {|file| require file}\n")),"\n",a.createElement(n.p,null,"Теперь все пути станем прописывать в файле ",a.createElement(n.code,null,"routes.rb")),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# -*- coding: utf-8 -*-\n# app/routes.rb\n\nget '/' do\n  @title = 'Заголовок индексной страницы'\n  erb :index\nend\n")),"\n",a.createElement(n.p,null,"В отдельном файле хранятся такие вещи как заголовок и url сайта:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# config/constants.rb\n# -*- coding: utf-8 -*-\n\nSITE_NAME = 'Mysite'\nSITE_URL = 'http://0.0.0.0:4000'\nSITE_SUBTITLE = 'IT Blog'\n")),"\n",a.createElement(n.p,null,"Для того, чтобы убедиться в работоспособности приложения изменим\n«вьюху»:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-erb"},'<%# /views/layout.erb %>\n\n<!DOCTYPE html>\n<html lang="en">\n<head>\n  <meta charset="utf-8">\n\n  <% if @title  %>\n    <%# /вывести заголовок страницы и имя сайта %>\n    <title><%= @title + " | #{SITE_NAME}" %></title>\n  <% else %>\n    <title><%="#{SITE_NAME}" %></title>\n  <% end %>\n\n  <% if @summary %>\n    <meta name="description" content="<%= @summary || @post.summary %>">\n  <% end %>\n\n  <%# путь к иконке из public %>\n  <link rel="icon" href="/favicon.ico" type="image/x-icon">\n  <link rel="shortcut icon" href="/favicon.ico" type="image/x-icon">\n\n  <%# путь к css из public %>\n  <link href="/style.css" rel="stylesheet" type="text/css" />\n</head>\n  <body>\n      <main>\n        <%= yield %>\n      </main>\n  </body>\n</html>\n')),"\n",a.createElement(n.p,null,"Sinatra поддерживает встроенные шаблоны. Так, вы можете разбить\nглавный шаблон на более мелкие и подключать их отдельно:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-erb"},"<%= erb :'includes/footer', :layout => false %>\n")),"\n",a.createElement(n.p,null,"Как мы увидим впоследствии, при открытии страницы ",a.createElement(n.code,null,"index")," заголовки должны\nизмениться на указанные нами."),"\n",a.createElement(n.p,null,"Но что же с моделью? Все наши записи мы будем хранить в базе данных,\nосуществлять же доступ к оной нам поможет\n",a.createElement(n.a,{href:"http://rusrails.ru/active-record-query-interface",target:"_blank",rel:"nofollow"},"ActiveRecord"),"."),"\n",a.createElement(n.p,null,"Для начала убедимся, что с базой данных не возникнет проблем. Изменим настройки\nнескольких файлов:"),"\n",a.createElement(n.p,null,"Установка связи с ActiveRecord:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# config/environments.rb\n# настройки при разработке приложения\n\nconfigure :development do\n set :database, 'sqlite3:///dev.db'\n set :show_exceptions, true\nend\n\n# настройки для production-окружения\nconfigure :production do\n db = URI.parse(ENV['DATABASE_URL'] || 'postgres:///localhost/mydb')\n\n ActiveRecord::Base.establish_connection(\n   :adapter  => db.scheme == 'postgres' ? 'postgresql' : db.scheme,\n   :host     => db.host,\n   :username => db.user,\n   :password => db.password,\n   :database => db.path[1..-1],\n   :encoding => 'utf8'\n )\nend\n")),"\n",a.createElement(n.p,null,"Таким образом в разных окружениях (development & production) будут\nиспользоваться разные базы данных. Также вносятся поправки в другие файлы:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# Rakefile\nrequire './main'\nrequire 'sinatra/activerecord/rake'\n\n# app/models.rb\nclass Post < ActiveRecord::Base\nend\n")),"\n",a.createElement(n.p,null,"Ниже приводится полное содержимое джемфайла."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# -*- coding: utf-8 -*-\n# Gemfile\n\nsource 'https://rubygems.org'\nruby '2.1.0'\n\ngem 'sinatra'\ngem 'redcarpet'\ngem 'pygments.rb'\ngem 'activerecord'\ngem 'sinatra-activerecord'\n\ngroup :development do\n  gem 'shotgun'\n  gem 'tux'\n  gem 'sqlite3'\nend\n\ngroup :production do\n  gem 'pg'\nend\n\ngroup :test do\n  gem 'rspec'\nend\n")),"\n",a.createElement(n.p,null,"Доустановить недостающие зависимости без установки джемов для production-окружения\nможно командой"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ bundle install --without production\n")),"\n",a.createElement(n.p,null,"Теперь создадим саму миграцию: если говорить просто, это такая штука, при помощи\nкоторой мы можем менять схему нашей БД. Сейчас нам важно, что миграции весьма\nудобны для тестового наполнения базы данных."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ rake -T (отобразить справку по возможным действиям)\n$ rake db:create_migration NAME=create_post (создать миграцию)\n")),"\n",a.createElement(n.p,null,"Если всё прошло успешно, в корневом каталоге проекта появится подкаталог ",a.createElement(n.code,null,"db"),",\nсодержащий миграцию вида ",a.createElement(n.code,null,"db/migrate/xxx_create_post.rb"),". Изменим её:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},'# db/migrate/xxx_create_post.rb\n# -*- coding: utf-8 -*-\n\nclass CreatePost < ActiveRecord::Migration\n  def self.up\n    # создание таблицы с заданными полями\n    create_table :posts do |post|\n      post.string   :title\n      post.text     :content\n      post.timestamps\n    end\n\n    # тестовые записи\n    Post.create(title: "Example Post",\n                content: "Content of my first post")\n    Post.create(title: "Second Post",\n                content: "Content of my second post")\n  end\n  def self.down\n    # откатить миграцию (rake:db rollback)\n    drop_table :posts\n  end\nend\n')),"\n",a.createElement(n.p,null,"Осталось лишь запустить миграцию, после чего в каталоге ",a.createElement(n.code,null,"db")," автоматически\nпоявится файл ",a.createElement(n.code,null,"schema.rb"),":"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ rake db:migrate\n")),"\n",a.createElement(n.p,null,"А в корневом каталоге должен появиться файл ",a.createElement(n.code,null,"dev.db"),", представляющий собой базу\nс созданной в ней (указанной в миграции) таблицей."),"\n",a.createElement(n.h2,{id:"играем-с-tuxом",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%B8%D0%B3%D1%80%D0%B0%D0%B5%D0%BC-%D1%81-tux%D0%BE%D0%BC","aria-label":"играем с tuxом permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Играем с tux'ом"),"\n",a.createElement(n.p,null,"Внимательный читатель наверняка заметил, что мы установили несколько новых\nджемов: tux, shotgun. Второй из них теперь можно запускать вместо команды\n",a.createElement(n.code,null,"rackup")," — при внесении любых изменений вам не потребуется перезапускать\nсервер, shotgun сделает всю рутинную работу за вас."),"\n",a.createElement(n.p,null,"Первый из упомянутых джем окажет посильную помощь при разработке приложений на\nsinatra. Это консольная программа, являющаяся связующим звеном между\nразработчиком и sinatra-приложением. Давайте поиграем с ней."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},'$ tux\nLoading development environment (Rack 1.2)\n>> a = Post.all (получить все посты)\n[DEBUG -- : Post Load (2.0ms)  SELECT "posts".* FROM "posts"\n=> #<ActiveRecord::Relation\n[#<Post id: 1, title: "What is sinatra?"]>\n... вывод сокращён ...\n>> a.count (количество постов)\nDEBUG -- : (0.4ms)  SELECT COUNT(*) FROM "posts"\n=> 4\n>> a.first (получить данные первого поста)\n=> #<Post id: 1, title: "What is sinatra?" content: "Sinatra is...">\n>> a.first.title (заголовок первого поста)\n=> "What is sinatra?"\n>> a.first.id (его идентификатор)\n=> 1\n>> a.last.content(тело последнего поста)\n=> "Oh, my last post!"\n')),"\n",a.createElement(n.p,null,"Надеюсь, читатель убедился в небесполезности tux'а: прежде, чем писать новую\nфункциональность можно немного потестировать её в консоли."),"\n",a.createElement(n.h2,{id:"crud",style:{position:"relative"}},a.createElement(n.a,{href:"#crud","aria-label":"crud permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"CRUD"),"\n",a.createElement(n.p,null,"Дабы наконец развлечься каким-то практическим эффектом от содеянного\nранее, займёмся написанием маршрутов и шаблонов: нужно ведь отобразить ту\nинформацию, которую мы имеем. А заодно узнаем, что скрывается под аббревиатурой\nCRUD."),"\n",a.createElement(n.p,null,"CRUD — так именуются четыре базовые функции для работы с данными и Sinatra\nвполне поддерживает их все."),"\n",a.createElement(n.table,null,a.createElement(n.thead,null,a.createElement(n.tr,null,a.createElement(n.th,null,"сокращение"),a.createElement(n.th,null,"значение"),a.createElement(n.th,null,"sinatra"))),a.createElement(n.tbody,null,a.createElement(n.tr,null,a.createElement(n.td,null,a.createElement(n.strong,null,"C")),a.createElement(n.td,null,"create"),a.createElement(n.td,null,"put")),a.createElement(n.tr,null,a.createElement(n.td,null,a.createElement(n.strong,null,"R")),a.createElement(n.td,null,"read"),a.createElement(n.td,null,"get")),a.createElement(n.tr,null,a.createElement(n.td,null,a.createElement(n.strong,null,"U")),a.createElement(n.td,null,"update"),a.createElement(n.td,null,"post")),a.createElement(n.tr,null,a.createElement(n.td,null,a.createElement(n.strong,null,"D")),a.createElement(n.td,null,"destroy"),a.createElement(n.td,null,"delete")))),"\n",a.createElement(n.p,null,"Ниже приводится пример создаваемых маршрутов сразу с комментариями."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# -*- coding: utf-8 -*-\n# app/routes.rb\n\n# получить главную страницу\n# отобрать последние 10 постов\nget '/' do\n  # сортировка и указание лимита\n  @posts = Post.order(\"created_at DESC\").limit(10)\n  # для отображения взять /views/index.erb\n  erb :index\nend\n\n# получить отдельный пост по его ID\nget '/posts/:id/' do\n  # найти пост\n  @post = Post.find(params[:id])\n  @title = @post.title\n  @content = @post.content\n  erb :'posts/show'\nend\n\n# отобразить форму для создания нового поста\nget '/posts/new' do\n  @title = 'Create new post'\n  erb :'posts/create'\nend\n\n# взять параметры из формы и сохранить пост\npost '/posts/new' do\n  params.delete 'submit'\n  @post = Post.create(params)\n\n  if @post.save\n    redirect to '/'\n  else\n    'Post was not save'\n  end\nend\n\n# страница about\n# запись вида ('/about/?') позволит\n# обращаться как к странице /about\n# так и к странице /about/\nget ('/about/?') do\n  @title = 'About me'\n  erb :about\nend\n\n# если страница не найдена\nnot_found do\n  @title = 'Page not found'\n  # создайте для неё шаблон 404.erb\n  erb :'404'\nend\n\n# обработка ошибки сервера\nerror do\n  @error = request.env['sinatra_error'].name\n  erb :'500'\nend\n")),"\n",a.createElement(n.p,null,"Надеюсь, комментарии смогли дать какое-то представление о маршрутизации в\nsinatra. Дальше напишем шаблоны страниц, содержимое которых будет динамическим."),"\n",a.createElement(n.p,null,"На главной странице отобразим список последних десяти публикаций, снабдим каждую\nзапись ссылкой на её полную версию."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-erb"},'<%# views/index.erb %>\n\n<% @posts.each do |post| %>\n  <a href="/posts/<%= post.id %>/"><%= post.title %></a>\n<% end %>\n')),"\n",a.createElement(n.p,null,"Страница отдельного поста будет отображать его заголовок и тело."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-erb"},"<%# views/posts/show.erb %>\n\n<h2><%= @post.title %></h2>\n<p><%= @post.created_at %></p>\n<%= @post.content %>\n")),"\n",a.createElement(n.p,null,"Для ручного добавления новых статей нам понадобится форма."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-erb"},'<%# views/posts/create.erb %>\n\n<form method="post" action="/posts/new">\n  <label for="title"><strong>Post title:</strong></label>\n  <input id="title" type="text" name="title" value="" style="width: 250px;">\n\n  <label for="content">Post content:</strong></label>\n  <textarea id="content" name="content" style="height: 250px;"></textarea>\n\n  <button type="submit">Create post</button>\n</form>\n')),"\n",a.createElement(n.p,null,"Теперь можно запустить shotgun, проверить как отображаются\n«мигрированные» публикации, а также, добавив к адресу главной\nстраницы ",a.createElement(n.code,null,"posts/new"),", создать новый пост вручную."),"\n",a.createElement(n.p,null,"После того, как читатель получил удовлетворение от первых успехов своих,\nпереведя дух, предлагается ему дальнейшее следование CDRU: научимся изменять и\nудалять данные."),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Изменение/Обновление")),"\n",a.createElement(n.p,null,"Для изменения уже существующих публикаций заведём соответствующие этим\nнамерениям маршруты и страницу."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# app/routes.rb\n# получаем страницу с формой редактирования\nget '/posts/:id/edit/' do\n  @title = 'Update post'\n  @post = Post.find(params[:id])\n  erb :'posts/edit'\nend\n\n# обновляем данные\nput '/posts/:id/edit/' do\n  @post = Post.find(params[:id])\n  if @post.update_attributes(params[:post])\n    redirect to '/'\n  else\n    erb :'posts/edit'\n  end\nend\n")),"\n",a.createElement(n.p,null,"Вот как может выглядеть сама формочка:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-erb"},'<%# views/posts/edit.erb %>\n\n<h3>Edit</h3>\n<a href="/posts/<%= @post.id %>/delete/">delete this post</a>\n\n<form action="/posts/<%= @post.id %>/edit/" method="post">\n  <input name="_method" type="hidden" value="put" />\n\n  <label for="title">Title:</label>\n  <input type="text" name="post[title]" id="title" value="<%= @post.title %>">\n\n  <label for="content"><strong>Post content:</label>\n  <textarea id="content" name="post[content]" style="height: 250px;"><%= @post.content %></textarea>\n\n  <button itype="submit">Save</button>\n</form>\n')),"\n",a.createElement(n.p,null,"Теперь попробуйте обновить какую-либо статью и приступайте к последнему таинству\n— удалению."),"\n",a.createElement(n.p,null,a.createElement(n.strong,null,"Удаление")),"\n",a.createElement(n.p,null,"Дальнейшее повествование описывает создание маршрутов и страницы, на которую станем\nперенаправлять пользователя, дабы убедиться действительно ли жаждет он\nрасстаться со своими материалами. Поехали."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# app/routes.rb\n# получить страницу\nget '/posts/:id/delete/' do\n  @title = 'Confirm deletion of article ##{params[:id]}'\n  @post = Post.find(params[:id])\n  erb :'posts/delete'\nend\n\n# удалить публикацию\ndelete '/posts/:id/' do\n  Post.find(params[:id]).destroy\n  redirect to '/'\nend\n")),"\n",a.createElement(n.p,null,"Ни в каких формах мы более не нуждаемся, хотя неплохо было бы уточнить\nдействительно ли пост должен быть удалён:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-erb"},'<%# views/posts/delete.erb %>\n\n<% if @post %>\n  <p>Are you sure?</p>\n  <form action="/posts/<%= @post.id %>/" method="post">\n    <input type="hidden" name="_method" value="delete">\n    <input type="submit" value="Yes, Delete It!">\n    <a href="<%="#{SITE_URL}"%>/posts/<%= @post.id %>/">Cancel</a>\n  </form>\n<% else %>\n  <p>Post not found.</p>\n<% end %>\n')),"\n",a.createElement(n.p,null,"Прежде, чем двинуться дальше, рекомендуется ещё немного поэкспериментировать с\nэтим."),"\n",a.createElement(n.h2,{id:"валидация",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%B2%D0%B0%D0%BB%D0%B8%D0%B4%D0%B0%D1%86%D0%B8%D1%8F","aria-label":"валидация permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Валидация"),"\n",a.createElement(n.p,null,"Пришло время существенно улучшить наше приложение и воспользоваться ещё одной\nособенностью, данной нам ActiveRecord: валидацией данных. Иметь валидные данные\n— значит иметь проверенные данные. Например, очень важно, чтобы при\nсоздании новой публикации она не осталась безымянной. Статья просто обязана\nиметь заголовок!"),"\n",a.createElement(n.p,null,"Что же, сделаем так, чтобы невозможно было этот самый заголовок пропустить (в\nпротивном случае данные не будут сохранены в базе). Обратимся к уже подзабытому\nфайлу с моделью."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# app/models.rb\nclass Post < ActiveRecord::Base\n  # заголовок с максимальной длиной в 100 символов!\n  validates :title, presence: true, length: {maximum: 100}\n  validates :content, presence: true\nend\n")),"\n",a.createElement(n.p,null,"Сейчас попробуйте сохранить новый пост без указания заголовка или с длиной,\nпревышающей сотню символов. При попытке сохранения вы должны получить ошибку, а\nобъект не будет сохранён в БД."),"\n",a.createElement(n.h2,{id:"отложенные-публикации",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%BE%D1%82%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%BD%D1%8B%D0%B5-%D0%BF%D1%83%D0%B1%D0%BB%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B8","aria-label":"отложенные публикации permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Отложенные публикации"),"\n",a.createElement(n.p,null,"С основополагающими принципами немного разобрались. Следующим шагом будет\nпростенькое добавление отложенных публикаций. Для этого прежде всего следует\nизменить миграцию."),"\n",a.createElement(n.h3,{id:"миграция",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%BC%D0%B8%D0%B3%D1%80%D0%B0%D1%86%D0%B8%D1%8F","aria-label":"миграция permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Миграция"),"\n",a.createElement(n.p,null,"Добавление всего одного параметра даты, который при написании статьи вводится вручную и\nпризван обозначать время публикации этой самой статьи:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},'# db/migrate/xxx_create_post.rb\nclass CreatePost < ActiveRecord::Migration\n  def self.up\n    create_table :posts do |t|\n      t.date     :published_at\n    end\n    Post.create(\n      title: "Who I am?",\n      published_at: "2086-03-05",\n      content: "You don\'t show me!")\n  end\nend\n')),"\n",a.createElement(n.p,null,"После этого необходимо прогуляться в сторону модели:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},'# app/models.rb\nclass Post < ActiveRecord::Base\n  scope :published_at, lambda { where("published_at <= ?", Time.now) }\n  validates :published_at, presence: true\nend\n')),"\n",a.createElement(n.p,null,"Поскольку данные пока не представляют собой никакой ценности (их попросту нет),\nдля вступления в силу принятых изменений можно сделать ход конём:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ rake db:rollback\n$ rake db:migrate\n")),"\n",a.createElement(n.p,null,"Это откат прошлой миграции и создание новой. Все созданные вручную записи будут потеряны."),"\n",a.createElement(n.h3,{id:"вывод-публикаций",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4-%D0%BF%D1%83%D0%B1%D0%BB%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B9","aria-label":"вывод публикаций permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Вывод публикаций"),"\n",a.createElement(n.p,null,"Что же, настало время обратиться к маршрутам и там, где это нужно, указать новую\nвыборку. Например, при выводе публикаций на главной странице:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# app/routes.rb\nget '/' do\n  @summary = 'Blog description'\n  # отображать только опубликованные статьи\n  @posts = Post.published_at.limit(10)\n  erb :index\nend\n")),"\n",a.createElement(n.p,null,"Это не единственный (и, возможно, не самый лучший) способ создать отложенные\nпубликации, но первый, что пришёл в голову."),"\n",a.createElement(n.h2,{id:"отображение-дат",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%BE%D1%82%D0%BE%D0%B1%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D0%B5-%D0%B4%D0%B0%D1%82","aria-label":"отображение дат permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Отображение дат"),"\n",a.createElement(n.p,null,"Если читатель проделал на практике все шаги вплоть до этого момента, он мог\nзаметить, что формат даты нельзя назвать «человекопонятным». Пришло\nвремя узнать зачем в sinatra используются хелперы."),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},'# app/helpers.rb\n\nhelpers do\n  def pretty_date(time)\n    # форматируем дату\n    time.strftime("%d %b %Y")\n  end\nend\n')),"\n",a.createElement(n.p,null,"Теперь там, где это представляется необходимым, следует использовать подобную\nконструкцию для вывода симпатичных дат:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-erb"},"<%# views/posts/show.erb %>\n\n<h2><%= @post.title %></h2>\n<p><%= pretty_date(@post.published_at) %></p>\n")),"\n",a.createElement(n.h2,{id:"markdown-и-архив-публикаций",style:{position:"relative"}},a.createElement(n.a,{href:"#markdown-%D0%B8-%D0%B0%D1%80%D1%85%D0%B8%D0%B2-%D0%BF%D1%83%D0%B1%D0%BB%D0%B8%D0%BA%D0%B0%D1%86%D0%B8%D0%B9","aria-label":"markdown и архив публикаций permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Markdown и архив публикаций"),"\n",a.createElement(n.p,null,"На самом деле, эти вещи уже были описаны ранее."),"\n",a.createElement(n.p,null,"Для того, чтобы получить возможность писать статью при помощи markdown-разметки,\nа сохранять и отображать её в виде html, достаточно взять блок кода из второго\nпримера, где используется ",a.createElement(n.a,{href:"/posts/rails-markdown/"},"before_save"),". Код этот\nпомещается в ",a.createElement(n.code,null,"app/models.rb"),", в шаблоне вывода публикации ничего править не\nнужно."),"\n",a.createElement(n.p,null,"То же самое с созданием архива. Один из способов описан в публикации об\n",a.createElement(n.a,{href:"/posts/rails-archive/"},"упорядочивании записей в rails"),". С\nнашей организацией проекта это будет выглядеть не совсем так:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-ruby"},"# app/routes.rb\n# Archive\n\n[('/archive/?'), ('/posts/?')].each do |route|\n  get route do\n    @posts = Post.published_at\n    @posts_by_year = Post.published_at.order(\"published_at ASC\").limit(300).group_by { |post| post.published_at.beginning_of_year }\n    @title = 'Archive'\n    erb :archive\n  end\nend\n")),"\n",a.createElement(n.p,null,"Вывод страниц:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-erb"},'<h2><%= @title %></h2>\n\n<% @posts_by_year.each do |year, posts| %>\n  <h2><%= "#{year.strftime(\'%Y\')}" %></h2>\n  <dl>\n    <% for post in posts %>\n      <dd><a href="/posts/<%= post.id %>/"><%= post.title %></a>\n       <%= pretty_date(post.published_at) %>\n      </dd>\n    <% end %>\n  </dl>\n<% end %>\n')),"\n",a.createElement(n.p,null,"Эффект обеспечен тот же самый."),"\n",a.createElement(n.h2,{id:"развёртывание-приложения-на-heroku",style:{position:"relative"}},a.createElement(n.a,{href:"#%D1%80%D0%B0%D0%B7%D0%B2%D1%91%D1%80%D1%82%D1%8B%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F-%D0%BD%D0%B0-heroku","aria-label":"развёртывание приложения на heroku permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Развёртывание приложения на Heroku"),"\n",a.createElement(n.p,null,"Прежде всего следует удостовериться, что файлы ",a.createElement(n.code,null,"Gemfile")," и ",a.createElement(n.code,null,"config.ru")," расположены в\nкорне проекта, который вы собираетесь развёртывать. Затем создать аккаунт на\n",a.createElement(n.code,null,"heroku.com")," и установить ",a.createElement(n.a,{href:"https://toolbelt.heroku.com/",target:"_blank",rel:"nofollow"},"Heroku Toolbelt"),":"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ wget -qO- https://toolbelt.heroku.com/install.sh | sh\n$ echo 'PATH=\"/usr/local/heroku/bin:$PATH\"' >> ~/.profile\n$ heroku login\n")),"\n",a.createElement(n.p,null,"После чего сделать из нашего каталога git-репозиторий:"),"\n",a.createElement(n.pre,null,a.createElement(n.code,{className:"language-shell"},"$ git init\n$ git add .\n$ git commit -am 'initial commit'\n$ heroku create\n$ git push heroku master\n$ heroku run rake --trace db:migrate\n")),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"Чтобы указать какую-то определённую миграцию используйте db:migrate\nVERSION=xxx"),"\n"),"\n",a.createElement(n.blockquote,null,"\n",a.createElement(n.p,null,"Если что-то пошло не так, посмотрите логи командой heroku logs"),"\n"),"\n",a.createElement(n.p,null,"Надо также заметить, что строка, указывающая порт в ",a.createElement(n.code,null,"config.ru")," должна быть в\nобязательном порядке удалена перед деплоем на heroku."),"\n",a.createElement(n.h2,{id:"послесловие",style:{position:"relative"}},a.createElement(n.a,{href:"#%D0%BF%D0%BE%D1%81%D0%BB%D0%B5%D1%81%D0%BB%D0%BE%D0%B2%D0%B8%D0%B5","aria-label":"послесловие permalink",className:"anchor before"},a.createElement(n.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Послесловие"),"\n",a.createElement(n.p,null,"Сегодня было раскрыто многое из того, что можно сделать с помощью sinatra, но\nещё больше осталось за кадром. Как кэшировать страницы, как защитить админку,\nчто можно использовать кроме ActiveRecord, какой может быть архитектура\nприложения (а она имеет полное право разительно отличаться от того, что было представлено в заметке),\nкак генерировать rss-ленту, как тестировать приложение. Ответы на эти и другие вопросы следует искать прежде всего в\nследующих источниках:"),"\n",a.createElement(n.ul,null,"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"http://www.sinatrarb.com/",target:"_blank",rel:"nofollow"},"http://www.sinatrarb.com/")),"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"http://recipes.sinatrarb.com/",target:"_blank",rel:"nofollow"},"http://recipes.sinatrarb.com/")),"\n",a.createElement(n.li,null,a.createElement(n.a,{href:"http://rspec.info/",target:"_blank",rel:"nofollow"},"http://rspec.info/")),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:n}=Object.assign({},(0,l.MN)(),e.components);return n?a.createElement(n,e,a.createElement(r,e)):r(e)},o=t(7792),s=t(7619);function i(e){var n,t;let{data:{mdx:l},children:r,pageContext:{prev:c,next:i}}=e;const{h1:m,title:u,description:d,image:p,table_of_contents:h}=l.frontmatter;return(0,a.useEffect)((()=>{(0,s.K)()}),[]),a.createElement(a.Fragment,null,a.createElement(o._W,{h1:m,title:u,description:d,image:null===(n=l.frontmatter.image)||void 0===n?void 0:n.publicURL},a.createElement(o.MV,{post:l.frontmatter,imageData:null==p||null===(t=p.childImageSharp)||void 0===t?void 0:t.gatsbyImageData},h?a.createElement(o.G8,{headings:l.tableOfContents}):null,a.createElement("div",{className:"page__content"},r,a.createElement(o.Mf,{prev:c,next:i})),a.createElement(o.QZ,null))))}function m(e){return a.createElement(i,e,a.createElement(c,e))}},8876:function(e,n,t){t.d(n,{MN:function(){return r}});var l=t(4424);const a=l.createContext({});function r(e){const n=l.useContext(a);return l.useMemo((()=>"function"==typeof e?e(n):{...n,...e}),[n,e])}}}]);