"use strict";(self.webpackChunkgatsby_blog=self.webpackChunkgatsby_blog||[]).push([[2792],{9408:function(n,a,s){s.r(a),s.d(a,{Head:function(){return l.Ss},default:function(){return k}});var t=s(8876),p=s(4424),e=s(3616);function o(n){const a=Object.assign({p:"p",strong:"strong",span:"span",h2:"h2",a:"a",ul:"ul",li:"li"},(0,t.MN)(),n.components);return p.createElement(p.Fragment,null,p.createElement(a.p,null,"Поговорим о том как можно использовать карты в приложении на RN бесплатно. О том какой ещё может быть структура\nкаталогов. Как можно сделать универсальный контейнер для компонентов. Чем могут быть полезны селекторы."),"\n",p.createElement(a.p,null,p.createElement(a.strong,null,"Структура каталогов"),". Как вариант - каждая фича (feature) в отдельной директории, чтобы не искать размазанные\nпо всему проекту файлы. Общие для всех только методы API. В нашем примере это директория ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">map</code>'}}),"."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">$ tree src\nsrc\n├── modules\n│   └── map\n│       ├── MapContainer.tsx\n│       ├── MapScreen.tsx\n│       ├── MapView.tsx\n│       ├── types.ts\n│       ├── selectors.ts\n│       └── store.ts\n├── services\n│   └── api\n│       └── maps.ts\n└── store\n    └── index.ts</code></pre></div>'}}),"\n",p.createElement(a.p,null,"При использовании TypeScript сразу заведём типы данных в ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">types.ts</code>'}}),":"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IMarker</span> <span class="token punctuation">{</span>\n  i<span class="token operator">:</span> <span class="token builtin">number</span>\n  latitude<span class="token operator">:</span> <span class="token builtin">number</span>\n  longitude<span class="token operator">:</span> <span class="token builtin">number</span>\n  active<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n  visited<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IRegion</span> <span class="token punctuation">{</span>\n  latitude<span class="token operator">:</span> <span class="token builtin">number</span>\n  longitude<span class="token operator">:</span> <span class="token builtin">number</span>\n  latitudeDelta<span class="token operator">:</span> <span class="token builtin">number</span>\n  longitudeDelta<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span></code></pre></div>'}}),"\n",p.createElement(a.h2,{id:"вывод-карты",style:{position:"relative"}},p.createElement(a.a,{href:"#%D0%B2%D1%8B%D0%B2%D0%BE%D0%B4-%D0%BA%D0%B0%D1%80%D1%82%D1%8B","aria-label":"вывод карты permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Вывод карты"),"\n",p.createElement(a.p,null,"Не стану углубляться в ",p.createElement(a.a,{href:"/posts/rn-toolkit/"},"настройку хранилища"),", подробный рассказ об этом уже был.\nВ исходной точке подключим само хранилище (store) и экран приложения с картой."),"\n",p.createElement(e.k,{headings:["App.tsx","MapScreen.tsx","MapContainer.tsx","MapView.tsx"]},p.createElement(e.s,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// App.tsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> store <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./src/store\'</span>\n<span class="token keyword">import</span> MapScreen <span class="token keyword">from</span> <span class="token string">\'./src/modules/map/MapScreen\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">App</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Provider</span></span> <span class="token attr-name">store</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>store<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MapScreen</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Provider</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> App</code></pre></div>'}})),p.createElement(e.s,null,p.createElement(a.p,null,"Экран может быть скомпонован из множества элементов и контейнеров как страница на вебе.\nВ данном случае используется лишь один контейнер с картой."),p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// MapScreen.tsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> MapContainer <span class="token keyword">from</span> <span class="token string">\'./MapContainer\'</span>\n<span class="token keyword">import</span> MapView <span class="token keyword">from</span> <span class="token string">\'./MapView\'</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">MapScreen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MapContainer</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MapView</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">MapContainer</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> MapScreen</code></pre></div>'}})),p.createElement(e.s,null,p.createElement(a.p,null,"А вот и первый лайфхак. Если есть необходимость использовать универсальный\nконтейнер без привязки к конкретным компонентам (не наш случай, но всё же),\nможно опираться на ",p.createElement(a.a,{href:"/posts/react-render-props/"},"render-props")," или вообще\nсклонировать компонент, который будет передан контейнеру."),p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// MapContainer.tsx</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> ReactElement <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n\n<span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  children<span class="token operator">:</span> ReactElement\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">MapContainer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> MapContainer</code></pre></div>'}})),p.createElement(e.s,null,p.createElement(a.p,null,"Ставим библиотеку ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">react-native-maps</code>'}}),":"),p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="bash"><pre class="language-bash"><code class="language-bash">$ <span class="token function">yarn</span> <span class="token function">add</span> react-native-maps<span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> ios<span class="token punctuation">;</span> pod <span class="token function">install</span><span class="token punctuation">;</span> <span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/</code></pre></div>'}}),p.createElement(a.ul,null,"\n",p.createElement(a.li,null,p.createElement(a.strong,null,"initialRegion")," — координаты при инициализации карты"),"\n",p.createElement(a.li,null,p.createElement(a.strong,null,"urlTemplate")," — для простейших нужд бесплатна карта OpenStreet"),"\n",p.createElement(a.li,null,p.createElement(a.strong,null,"tracksViewChanges")," — должен ли маркер отслеживать изменения, для лучшей производительности можно отключить"),"\n"),p.createElement(a.p,null,"Остальное должно быть понятно из кода. И пока обойдёмся тестовыми данными, чтобы скорее увидеть результат."),p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// MapView.tsx</span>\n<span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> StyleSheet<span class="token punctuation">,</span> Dimensions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native\'</span>\n<span class="token keyword">import</span> Map<span class="token punctuation">,</span> <span class="token punctuation">{</span> UrlTile<span class="token punctuation">,</span> Marker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-native-maps\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> IRegion<span class="token punctuation">,</span> IMarker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./types\'</span>\n\n<span class="token keyword">const</span> <span class="token constant">SCREEN_HEIGHT</span> <span class="token operator">=</span> Dimensions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">\'window\'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>height\n<span class="token keyword">const</span> urlTemplate <span class="token operator">=</span> <span class="token string">\'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\'</span>\n<span class="token keyword">const</span> <span class="token constant">REGION</span><span class="token operator">:</span> IRegion <span class="token operator">=</span> <span class="token punctuation">{</span>\n  latitude<span class="token operator">:</span> <span class="token number">59.9342802</span><span class="token punctuation">,</span>\n  longitude<span class="token operator">:</span> <span class="token number">30.3350986</span><span class="token punctuation">,</span>\n  latitudeDelta<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>\n  longitudeDelta<span class="token operator">:</span> <span class="token number">0.5</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> <span class="token constant">MARKERS</span><span class="token operator">:</span> IMarker<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    i<span class="token operator">:</span> <span class="token number">1421059</span><span class="token punctuation">,</span>\n    latitude<span class="token operator">:</span> <span class="token number">59.903967999999999</span><span class="token punctuation">,</span>\n    longitude<span class="token operator">:</span> <span class="token number">30.519534</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    i<span class="token operator">:</span> <span class="token number">1007126</span><span class="token punctuation">,</span>\n    latitude<span class="token operator">:</span> <span class="token number">59.930376000000003</span><span class="token punctuation">,</span>\n    longitude<span class="token operator">:</span> <span class="token number">30.353428999999998</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    i<span class="token operator">:</span> <span class="token number">1332648</span><span class="token punctuation">,</span>\n    latitude<span class="token operator">:</span> <span class="token number">59.839900999999998</span><span class="token punctuation">,</span>\n    longitude<span class="token operator">:</span> <span class="token number">30.350867000000001</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">MapView</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span></span> <span class="token attr-name">initialRegion</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token constant">REGION</span><span class="token punctuation">}</span></span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>map<span class="token punctuation">}</span></span><span class="token punctuation">></span></span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UrlTile</span></span> <span class="token attr-name">urlTemplate</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>urlTemplate<span class="token punctuation">}</span></span> <span class="token attr-name">maximumZ</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span></span> <span class="token attr-name">flipY</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n    </span><span class="token punctuation">{</span><span class="token constant">MARKERS</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>marker<span class="token operator">:</span> IMarker<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Marker</span></span>\n        <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>marker<span class="token punctuation">.</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>marker<span class="token punctuation">.</span>active<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">identifier</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>marker<span class="token punctuation">.</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">coordinate</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">latitude</span><span class="token operator">:</span> marker<span class="token punctuation">.</span>latitude<span class="token punctuation">,</span> <span class="token literal-property property">longitude</span><span class="token operator">:</span> marker<span class="token punctuation">.</span>longitude <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n        <span class="token attr-name">tracksViewChanges</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n      <span class="token punctuation">/></span></span>\n    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Map</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  map<span class="token operator">:</span> <span class="token punctuation">{</span>\n    width<span class="token operator">:</span> <span class="token string">\'100%\'</span><span class="token punctuation">,</span>\n    height<span class="token operator">:</span> <span class="token constant">SCREEN_HEIGHT</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> MapView</code></pre></div>'}}))),"\n",p.createElement(a.p,null,"Смотрим\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1073px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 61.66666666666666%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/1453761a840ddb19bdf409bcb6e7b0a1/e93cc/rn-openstreet-map.webp 300w,\n/static/1453761a840ddb19bdf409bcb6e7b0a1/b0544/rn-openstreet-map.webp 600w,\n/static/1453761a840ddb19bdf409bcb6e7b0a1/81982/rn-openstreet-map.webp 1073w"\n              sizes="(max-width: 1073px) 100vw, 1073px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/1453761a840ddb19bdf409bcb6e7b0a1/eed55/rn-openstreet-map.png 300w,\n/static/1453761a840ddb19bdf409bcb6e7b0a1/7491f/rn-openstreet-map.png 600w,\n/static/1453761a840ddb19bdf409bcb6e7b0a1/ff858/rn-openstreet-map.png 1073w"\n            sizes="(max-width: 1073px) 100vw, 1073px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/1453761a840ddb19bdf409bcb6e7b0a1/ff858/rn-openstreet-map.png"\n            alt="RN OpenStreet Map"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}),"\nПо поводу английского языка можно не волноваться — всегда будет\nвыбран язык, установленный в системе."),"\n",p.createElement(a.h2,{id:"смена-маркеров-при-прокрутке-карты",style:{position:"relative"}},p.createElement(a.a,{href:"#%D1%81%D0%BC%D0%B5%D0%BD%D0%B0-%D0%BC%D0%B0%D1%80%D0%BA%D0%B5%D1%80%D0%BE%D0%B2-%D0%BF%D1%80%D0%B8-%D0%BF%D1%80%D0%BE%D0%BA%D1%80%D1%83%D1%82%D0%BA%D0%B5-%D0%BA%D0%B0%D1%80%D1%82%D1%8B","aria-label":"смена маркеров при прокрутке карты permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Смена маркеров при прокрутке карты"),"\n",p.createElement(a.p,null,"Теперь представим, что у нас есть API, где при смене региона мы получаем новые данные.\nА вот если просто сдвигать область на карте, данные не меняются: API отдаёт весь внушительный\nсписок маркеров, что у него есть. Выводить сразу все маркеры нельзя — скажется\nна производетельности. В этом случае нас выручат селекторы."),"\n",p.createElement(e.k,{headings:["selectors.ts","store.ts","MapContainer.tsx","MapView.tsx"]},p.createElement(e.s,null,p.createElement(a.p,null,"Для рассчёта ближайших маркеров понадобится библиотека: например, ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">geolib</code>'}}),"."),p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// selectors.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'reselect\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> orderByDistance <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'geolib\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> RootState <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../../store\'</span>\n\n<span class="token keyword">const</span> <span class="token constant">MARKERS_LENGTH</span> <span class="token operator">=</span> <span class="token number">10</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">stateSelector</span> <span class="token operator">=</span> <span class="token punctuation">(</span>state<span class="token operator">:</span> RootState<span class="token punctuation">)</span> <span class="token operator">=></span> state<span class="token punctuation">.</span>maps\n<span class="token comment">// маркеры</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> mapEntitiesSelector <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>stateSelector<span class="token punctuation">,</span> item <span class="token operator">=></span> item<span class="token punctuation">.</span>mapEntities<span class="token punctuation">)</span>\n<span class="token comment">// регион</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> mapRegionSelector <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>stateSelector<span class="token punctuation">,</span> item <span class="token operator">=></span> item<span class="token punctuation">.</span>region<span class="token punctuation">)</span>\n<span class="token comment">// отслеживание процесса загрузки данных</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> mapLoadingSelector <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>stateSelector<span class="token punctuation">,</span> item <span class="token operator">=></span> item<span class="token punctuation">.</span>loading<span class="token punctuation">)</span>\n\n<span class="token comment">// рассчёт ближайших маркеров на карте, отдавать 10 штук</span>\n<span class="token comment">// при изменении региона или маркеров пересчитывается автоматически</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> mapMarkersSelector <span class="token operator">=</span> <span class="token function">createSelector</span><span class="token punctuation">(</span>\n  <span class="token punctuation">[</span>mapEntitiesSelector<span class="token punctuation">,</span> mapRegionSelector<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>data<span class="token punctuation">,</span> region<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>region<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token function">orderByDistance</span><span class="token punctuation">(</span>region<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">MARKERS_LENGTH</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">return</span> data<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token constant">MARKERS_LENGTH</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span></code></pre></div>'}})),p.createElement(e.s,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// store.ts</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> createAsyncThunk<span class="token punctuation">,</span> createSlice<span class="token punctuation">,</span> isRejected <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'@reduxjs/toolkit\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> getMapEntities <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'../../services/api/maps\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> IMarker<span class="token punctuation">,</span> IRegion <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./types\'</span>\n\n<span class="token keyword">export</span> <span class="token keyword">const</span> fetchMapEntities <span class="token operator">=</span> <span class="token function">createAsyncThunk</span><span class="token punctuation">(</span>\n  <span class="token string">\'maps/GET_MARKERS\'</span><span class="token punctuation">,</span>\n  <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">getMapEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> <span class="token constant">LT_DEFAULT</span> <span class="token operator">=</span> <span class="token number">59.9342802</span>\n<span class="token keyword">const</span> <span class="token constant">LG_DEFAULT</span> <span class="token operator">=</span> <span class="token number">30.3350986</span>\n<span class="token keyword">const</span> <span class="token constant">REGION_DEFAULT</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  latitude<span class="token operator">:</span> <span class="token constant">LT_DEFAULT</span><span class="token punctuation">,</span>\n  longitude<span class="token operator">:</span> <span class="token constant">LG_DEFAULT</span><span class="token punctuation">,</span>\n  latitudeDelta<span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>\n  longitudeDelta<span class="token operator">:</span> <span class="token number">0.1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IState</span> <span class="token punctuation">{</span>\n  loading<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  region<span class="token operator">:</span> IRegion\n  mapEntities<span class="token operator">:</span> IMarker<span class="token punctuation">[</span><span class="token punctuation">]</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> initialState<span class="token operator">:</span> IState <span class="token operator">=</span> <span class="token punctuation">{</span>\n  loading<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>\n  region<span class="token operator">:</span> <span class="token constant">REGION_DEFAULT</span><span class="token punctuation">,</span>\n  mapEntities<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> mapsSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">\'maps\'</span><span class="token punctuation">,</span>\n  initialState<span class="token punctuation">,</span>\n  reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token comment">// смена локации</span>\n    <span class="token function">changeRegion</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      state<span class="token punctuation">.</span>region <span class="token operator">=</span> action<span class="token punctuation">.</span>payload\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">extraReducers</span><span class="token operator">:</span> builder <span class="token operator">=></span> <span class="token punctuation">{</span>\n    builder\n      <span class="token comment">// загрузка данных</span>\n      <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>fetchMapEntities<span class="token punctuation">.</span>pending<span class="token punctuation">,</span> state <span class="token operator">=></span> <span class="token punctuation">{</span>\n        state<span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token comment">// получение данных</span>\n      <span class="token punctuation">.</span><span class="token function">addCase</span><span class="token punctuation">(</span>fetchMapEntities<span class="token punctuation">.</span>fulfilled<span class="token punctuation">,</span> <span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        state<span class="token punctuation">.</span>mapEntities <span class="token operator">=</span> action<span class="token punctuation">.</span>payload\n        state<span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n      <span class="token punctuation">.</span><span class="token function">addMatcher</span><span class="token punctuation">(</span>isRejected<span class="token punctuation">,</span> state <span class="token operator">=></span> <span class="token punctuation">{</span>\n        state<span class="token punctuation">.</span>loading <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> mapsSlice</code></pre></div>'}})),p.createElement(e.s,null,p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// MapContainer</span>\n<span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> useEffect<span class="token punctuation">,</span> ReactElement<span class="token punctuation">,</span> useCallback <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> useDispatch<span class="token punctuation">,</span> useSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'react-redux\'</span>\n<span class="token keyword">import</span> mapsSlice<span class="token punctuation">,</span> <span class="token punctuation">{</span> fetchMapEntities <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./store\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> mapLoadingSelector<span class="token punctuation">,</span> mapMarkersSelector<span class="token punctuation">,</span> mapRegionSelector <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./selectors\'</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> IRegion <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./types\'</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> changeRegion <span class="token punctuation">}</span> <span class="token operator">=</span> mapsSlice<span class="token punctuation">.</span>actions\n\n<span class="token keyword">type</span> <span class="token class-name">Props</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  children<span class="token operator">:</span> ReactElement\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">MapContainer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// забираем данные из хранилища</span>\n  <span class="token keyword">const</span> dispatch <span class="token operator">=</span> <span class="token function">useDispatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token keyword">const</span> markers <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>mapMarkersSelector<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> region <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>mapRegionSelector<span class="token punctuation">)</span>\n  <span class="token keyword">const</span> isLoading <span class="token operator">=</span> <span class="token function">useSelector</span><span class="token punctuation">(</span>mapLoadingSelector<span class="token punctuation">)</span>\n\n  <span class="token keyword">const</span> handleGetMapEntities <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span>\n    <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">await</span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchMapEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    <span class="token punctuation">[</span>dispatch<span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n\n  <span class="token comment">// получить от карты точное местоположение и сохранить его</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">onRegionChangeComplete</span> <span class="token operator">=</span> <span class="token punctuation">(</span>coordinate<span class="token operator">:</span> IRegion<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">changeRegion</span><span class="token punctuation">(</span>coordinate<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token comment">/*\n    при посещении экрана дёргаем API один раз\n    можно проверять есть ли уже данные\n    или получать новые данные при смене локации\n    это остаётся на усмотрение читателя\n  */</span>\n  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">handleGetMapEntities</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>handleGetMapEntities<span class="token punctuation">]</span><span class="token punctuation">)</span>\n\n  <span class="token comment">// передать данные в дочерний компонент</span>\n  <span class="token keyword">const</span> CloneChildren <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    markers<span class="token punctuation">,</span>\n    region<span class="token punctuation">,</span>\n    isLoading<span class="token punctuation">,</span>\n    onRegionChangeComplete<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n  <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token punctuation">{</span>CloneChildren<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> MapContainer</code></pre></div>'}})),p.createElement(e.s,null,p.createElement(a.p,null,"Теперь ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MapView</code>'}})," получает данные из контейнера и код компонента немного изменится\n(не буду приводить код полностью, не забудьте импортировать все компоненты из ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">react-native</code>'}}),")."),p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// MapView.tsx</span>\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  markers<span class="token operator">:</span> IMarker<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  region<span class="token operator">:</span> IRegion\n  isLoading<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token function-variable function">onRegionChangeComplete</span><span class="token operator">:</span> <span class="token punctuation">(</span>region<span class="token operator">:</span> IRegion<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">MapView</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  markers<span class="token punctuation">,</span>\n  region<span class="token punctuation">,</span>\n  isLoading<span class="token punctuation">,</span>\n  onRegionChangeComplete<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ActivityIndicator</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>large<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span></span>\n      <span class="token attr-name">initialRegion</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>region<span class="token punctuation">}</span></span>\n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>map<span class="token punctuation">}</span></span>\n      <span class="token attr-name">onRegionChangeComplete</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onRegionChangeComplete<span class="token punctuation">}</span></span>\n      <span class="token attr-name">moveOnMarkerPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n      <span class="token attr-name">removeClippedSubviews</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UrlTile</span></span> <span class="token attr-name">urlTemplate</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>urlTemplate<span class="token punctuation">}</span></span> <span class="token attr-name">maximumZ</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span></span> <span class="token attr-name">flipY</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>markers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>marker<span class="token operator">:</span> IMarker<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">(</span>\n        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Marker</span></span>\n          <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>marker<span class="token punctuation">.</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>marker<span class="token punctuation">.</span>active<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n          <span class="token attr-name">identifier</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>marker<span class="token punctuation">.</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n          <span class="token attr-name">coordinate</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> <span class="token literal-property property">latitude</span><span class="token operator">:</span> marker<span class="token punctuation">.</span>latitude<span class="token punctuation">,</span> <span class="token literal-property property">longitude</span><span class="token operator">:</span> marker<span class="token punctuation">.</span>longitude <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n          <span class="token attr-name">tracksViewChanges</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n        <span class="token punctuation">/></span></span>\n      <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Map</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}}))),"\n",p.createElement(a.p,null,"Для того, чтобы уменьшить время отклика и повысить производительность при перерисовке\nмаркеров, поставьте библиотеку ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">throttle-debounce</code>'}}),". Код в ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">MapContainer</code>'}}),"\nизменится таким образом:"),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// MapContainer.tsx</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> debounce <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'throttle-debounce\'</span>\n<span class="token comment">// ...</span>\n\n<span class="token keyword">const</span> onRegionChangeComplete <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>coordinate<span class="token operator">:</span> IRegion<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">changeRegion</span><span class="token punctuation">(</span>coordinate<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}),"\n",p.createElement(a.h2,{id:"состояние-маркеров",style:{position:"relative"}},p.createElement(a.a,{href:"#%D1%81%D0%BE%D1%81%D1%82%D0%BE%D1%8F%D0%BD%D0%B8%D0%B5-%D0%BC%D0%B0%D1%80%D0%BA%D0%B5%D1%80%D0%BE%D0%B2","aria-label":"состояние маркеров permalink",className:"anchor before"},p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<svg aria-hidden="true" focusable="false" height="16" version="1.1" viewBox="0 0 16 16" width="16"><path fill-rule="evenodd" d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z"></path></svg>'}})),"Состояние маркеров"),"\n",p.createElement(a.p,null,"Не упомнишь какие из маркеров были нажаты. Здорово было бы отражать их состояние: обычный,\nактивный или уже просмотренный. Как может выглядеть реализация?"),"\n",p.createElement(e.k,{headings:["MapContainer.tsx","MapView.tsx","store.ts"]},p.createElement(e.s,null,p.createElement(a.p,null,"Нам нужен новый экшен ",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<code class="language-text">setMarkerAction</code>'}})," для манипулирования состоянием маркера.\nИмпортируем его из группы экшенов и отдадим дочернему компоненту."),p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// MapContainer.tsx</span>\n<span class="token keyword">import</span> mapsSlice<span class="token punctuation">,</span> <span class="token punctuation">{</span> fetchMapEntities <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">\'./store\'</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> changeRegion<span class="token punctuation">,</span> setMarkerAction <span class="token punctuation">}</span> <span class="token operator">=</span> mapsSlice<span class="token punctuation">.</span>actions\n\n<span class="token keyword">const</span> <span class="token function-variable function">MapContainer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> children <span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">const</span> <span class="token function-variable function">toggleMarker</span> <span class="token operator">=</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n    <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">setMarkerAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n  <span class="token keyword">const</span> CloneChildren <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">cloneElement</span><span class="token punctuation">(</span>children<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n    markers<span class="token punctuation">,</span>\n    region<span class="token punctuation">,</span>\n    isLoading<span class="token punctuation">,</span>\n    onRegionChangeComplete<span class="token punctuation">,</span>\n    toggleMarker<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span></code></pre></div>'}})),p.createElement(e.s,null,p.createElement(a.p,null,"В дочернем компоненте определим цвета для разных состояний маркеров,\nа также разрешим нажимать маркер."),p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="tsx"><pre class="language-tsx"><code class="language-tsx"><span class="token comment">// MapView.tsx</span>\n<span class="token comment">// ...</span>\n<span class="token keyword">interface</span> <span class="token class-name">Props</span> <span class="token punctuation">{</span>\n  markers<span class="token operator">:</span> IMarker<span class="token punctuation">[</span><span class="token punctuation">]</span>\n  region<span class="token operator">:</span> IRegion\n  isLoading<span class="token operator">:</span> <span class="token builtin">boolean</span>\n  <span class="token function-variable function">onRegionChangeComplete</span><span class="token operator">:</span> <span class="token punctuation">(</span>region<span class="token operator">:</span> IRegion<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n  <span class="token function-variable function">toggleMarker</span><span class="token operator">:</span> <span class="token punctuation">(</span>id<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">void</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">switchColor</span> <span class="token operator">=</span> <span class="token punctuation">(</span>item<span class="token operator">:</span> IMarker<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>active<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'#009a00\'</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>visited<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">\'#adbce6\'</span>\n  <span class="token keyword">return</span> <span class="token string">\'#ff0040\'</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> <span class="token function-variable function">MapView</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  markers<span class="token punctuation">,</span>\n  region<span class="token punctuation">,</span>\n  onRegionChangeComplete<span class="token punctuation">,</span>\n  toggleMarker<span class="token punctuation">,</span>\n  isLoading\n<span class="token punctuation">}</span><span class="token operator">:</span> Props<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>isLoading<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ActivityIndicator</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>large<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span></span>\n      <span class="token attr-name">initialRegion</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>region<span class="token punctuation">}</span></span>\n      <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>map<span class="token punctuation">}</span></span>\n      <span class="token attr-name">onRegionChangeComplete</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>onRegionChangeComplete<span class="token punctuation">}</span></span>\n      <span class="token attr-name">moveOnMarkerPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n      <span class="token attr-name">removeClippedSubviews</span><span class="token punctuation">></span></span><span class="token plain-text">\n      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">UrlTile</span></span> <span class="token attr-name">urlTemplate</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>urlTemplate<span class="token punctuation">}</span></span> <span class="token attr-name">maximumZ</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">}</span></span> <span class="token attr-name">flipY</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">\n      </span><span class="token punctuation">{</span>markers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>marker<span class="token operator">:</span> IMarker<span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> latitude<span class="token punctuation">,</span> longitude<span class="token punctuation">,</span> i<span class="token punctuation">,</span> active <span class="token punctuation">}</span> <span class="token operator">=</span> marker\n        <span class="token keyword">const</span> <span class="token function-variable function">handlePress</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>\n          <span class="token function">toggleMarker</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token function">switchColor</span><span class="token punctuation">(</span>marker<span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>\n          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Marker</span></span>\n            <span class="token attr-name">key</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">-</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>active<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n            <span class="token attr-name">identifier</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>i<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">}</span></span>\n            <span class="token attr-name">coordinate</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token punctuation">{</span> latitude<span class="token punctuation">,</span> longitude <span class="token punctuation">}</span><span class="token punctuation">}</span></span>\n            <span class="token attr-name">tracksViewChanges</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span><span class="token boolean">false</span><span class="token punctuation">}</span></span>\n            <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>handlePress<span class="token punctuation">}</span></span>\n            <span class="token attr-name">pinColor</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">{</span>color<span class="token punctuation">}</span></span>\n          <span class="token punctuation">/></span></span>\n        <span class="token punctuation">)</span>\n      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token plain-text">\n    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">Map</span></span><span class="token punctuation">></span></span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// ...</span></code></pre></div>'}})),p.createElement(e.s,null,p.createElement(a.p,null,"Наконец, добавим редьюсер, содержащий логику смены состояния.\nРаботать это будет ровно до момента новой загрузки данных с сервера."),p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<div class="gatsby-highlight" data-language="ts"><pre class="language-ts"><code class="language-ts"><span class="token comment">// store.ts</span>\n<span class="token keyword">export</span> <span class="token keyword">interface</span> <span class="token class-name">IState</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  lastActiveMarkerId<span class="token operator">:</span> <span class="token builtin">number</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> initialState<span class="token operator">:</span> IState <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  lastActiveMarkerId<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> mapsSlice <span class="token operator">=</span> <span class="token function">createSlice</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n  reducers<span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token function">setMarkerAction</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">const</span> <span class="token punctuation">{</span> id <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">}</span> <span class="token operator">=</span> action<span class="token punctuation">.</span>payload\n      <span class="token comment">// поиск индекса по id</span>\n      <span class="token keyword">const</span> <span class="token function-variable function">getMarkerIndex</span> <span class="token operator">=</span> <span class="token punctuation">(</span>Id<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token operator">=></span>\n        state<span class="token punctuation">.</span>mapEntities<span class="token punctuation">.</span><span class="token function">findIndex</span><span class="token punctuation">(</span>marker <span class="token operator">=></span> marker<span class="token punctuation">.</span>i <span class="token operator">===</span> Id<span class="token punctuation">)</span>\n      <span class="token keyword">let</span> lastIndex <span class="token operator">=</span> <span class="token function">getMarkerIndex</span><span class="token punctuation">(</span>state<span class="token punctuation">.</span>lastActiveMarkerId<span class="token punctuation">)</span>\n      <span class="token keyword">const</span> currentIndex <span class="token operator">=</span> <span class="token function">getMarkerIndex</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span>\n\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>lastIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token comment">/* снять active с предыдущего маркера */</span>\n        state<span class="token punctuation">.</span>mapEntities<span class="token punctuation">[</span>lastIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">false</span>\n        state<span class="token punctuation">.</span>mapEntities<span class="token punctuation">[</span>lastIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token boolean">true</span>\n      <span class="token punctuation">}</span>\n\n      <span class="token comment">// если передан id</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">&amp;&amp;</span> currentIndex <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        state<span class="token punctuation">.</span>lastActiveMarkerId <span class="token operator">=</span> id\n        <span class="token comment">/* установить active текущему маркеру */</span>\n        state<span class="token punctuation">.</span>mapEntities<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">true</span>\n        state<span class="token punctuation">.</span>mapEntities<span class="token punctuation">[</span>currentIndex<span class="token punctuation">]</span><span class="token punctuation">.</span>visited <span class="token operator">=</span> <span class="token boolean">false</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre></div>'}}))),"\n",p.createElement(a.p,null,"Теперь маркеры меняют цвет в зависимости от того было по ним нажатие или нет."),"\n",p.createElement(a.span,{dangerouslySetInnerHTML:{__html:'<span\n      class="gatsby-resp-image-wrapper"\n      style="position: relative; display: block; margin-left: auto; margin-right: auto; max-width: 1071px; flex:2;"\n    >\n      <span\n    class="gatsby-resp-image-background-image"\n    style="padding-bottom: 48.33333333333333%; position: relative; bottom: 0; left: 0; display: block;"\n  ></span>\n  <picture>\n          <source\n              srcset="/static/788494078fd2c0006f0742a3db5d453a/e93cc/rn-markers.webp 300w,\n/static/788494078fd2c0006f0742a3db5d453a/b0544/rn-markers.webp 600w,\n/static/788494078fd2c0006f0742a3db5d453a/c84b4/rn-markers.webp 1071w"\n              sizes="(max-width: 1071px) 100vw, 1071px"\n              type="image/webp"\n            />\n          <source\n            srcset="/static/788494078fd2c0006f0742a3db5d453a/eed55/rn-markers.png 300w,\n/static/788494078fd2c0006f0742a3db5d453a/7491f/rn-markers.png 600w,\n/static/788494078fd2c0006f0742a3db5d453a/a29f5/rn-markers.png 1071w"\n            sizes="(max-width: 1071px) 100vw, 1071px"\n            type="image/png"\n          />\n          <img\n            class="gatsby-resp-image-image"\n            src="/static/788494078fd2c0006f0742a3db5d453a/a29f5/rn-markers.png"\n            alt="Maps Markers"\n            title=""\n            loading="lazy"\n            decoding="async"\n            style="width:100%;height:100%;margin:0;vertical-align:middle;position:absolute;top:0;left:0;"\n          />\n        </picture>\n    </span>'}}))}var c=function(n){void 0===n&&(n={});const{wrapper:a}=Object.assign({},(0,t.MN)(),n.components);return a?p.createElement(a,n,p.createElement(o,n)):o(n)},l=s(7792),u=s(7619);function i(n){var a,s;let{data:{mdx:t},children:e,pageContext:{prev:o,next:c}}=n;const{h1:i,title:k,description:r,image:g,table_of_contents:m}=t.frontmatter;return(0,p.useEffect)((()=>{(0,u.K)()}),[]),p.createElement(p.Fragment,null,p.createElement(l._W,{h1:i,title:k,description:r,image:null===(a=t.frontmatter.image)||void 0===a?void 0:a.publicURL},p.createElement(l.MV,{post:t.frontmatter,imageData:null==g||null===(s=g.childImageSharp)||void 0===s?void 0:s.gatsbyImageData},m?p.createElement(l.G8,{headings:t.tableOfContents}):null,p.createElement("div",{className:"page__content"},e,p.createElement(l.Mf,{prev:o,next:c})),p.createElement(l.QZ,null))))}function k(n){return p.createElement(i,n,p.createElement(c,n))}},8876:function(n,a,s){s.d(a,{MN:function(){return e}});var t=s(4424);const p=t.createContext({});function e(n){const a=t.useContext(p);return t.useMemo((()=>"function"==typeof n?n(a):{...a,...n}),[a,n])}}}]);